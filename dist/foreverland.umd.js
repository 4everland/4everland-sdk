(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.foreverland = {}));
})(this, (function (exports) { 'use strict';

  function _regeneratorRuntime() {
    _regeneratorRuntime = function () {
      return exports;
    };
    var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      defineProperty = Object.defineProperty || function (obj, key, desc) {
        obj[key] = desc.value;
      },
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define(obj, key, value) {
      return Object.defineProperty(obj, key, {
        value: value,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }), obj[key];
    }
    try {
      define({}, "");
    } catch (err) {
      define = function (obj, key, value) {
        return obj[key] = value;
      };
    }
    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
      return defineProperty(generator, "_invoke", {
        value: makeInvokeMethod(innerFn, self, context)
      }), generator;
    }
    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }
    exports.wrap = wrap;
    var ContinueSentinel = {};
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });
    var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }
    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if ("throw" !== record.type) {
          var result = record.arg,
            value = result.value;
          return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          }) : PromiseImpl.resolve(value).then(function (unwrapped) {
            result.value = unwrapped, resolve(result);
          }, function (error) {
            return invoke("throw", error, resolve, reject);
          });
        }
        reject(record.arg);
      }
      var previousPromise;
      defineProperty(this, "_invoke", {
        value: function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }
          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
      });
    }
    function makeInvokeMethod(innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");
        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return {
            value: void 0,
            done: !0
          };
        }
        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }
          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);
          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }
          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }
    function maybeInvokeDelegate(delegate, context) {
      var methodName = context.method,
        method = delegate.iterator[methodName];
      if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
      var record = tryCatch(method, delegate.iterator, context.arg);
      if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
      var info = record.arg;
      return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
    }
    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };
      1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal", delete record.arg, entry.completion = record;
    }
    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
    }
    function values(iterable) {
      if (iterable || "" === iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) return iteratorMethod.call(iterable);
        if ("function" == typeof iterable.next) return iterable;
        if (!isNaN(iterable.length)) {
          var i = -1,
            next = function next() {
              for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              return next.value = undefined, next.done = !0, next;
            };
          return next.next = next;
        }
      }
      throw new TypeError(typeof iterable + " is not iterable");
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
      value: GeneratorFunctionPrototype,
      configurable: !0
    }), defineProperty(GeneratorFunctionPrototype, "constructor", {
      value: GeneratorFunction,
      configurable: !0
    }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
      var ctor = "function" == typeof genFun && genFun.constructor;
      return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
    }, exports.mark = function (genFun) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
    }, exports.awrap = function (arg) {
      return {
        __await: arg
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      void 0 === PromiseImpl && (PromiseImpl = Promise);
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
      return this;
    }), define(Gp, "toString", function () {
      return "[object Generator]";
    }), exports.keys = function (val) {
      var object = Object(val),
        keys = [];
      for (var key in object) keys.push(key);
      return keys.reverse(), function next() {
        for (; keys.length;) {
          var key = keys.pop();
          if (key in object) return next.value = key, next.done = !1, next;
        }
        return next.done = !0, next;
      };
    }, exports.values = values, Context.prototype = {
      constructor: Context,
      reset: function (skipTempReset) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
      },
      stop: function () {
        this.done = !0;
        var rootRecord = this.tryEntries[0].completion;
        if ("throw" === rootRecord.type) throw rootRecord.arg;
        return this.rval;
      },
      dispatchException: function (exception) {
        if (this.done) throw exception;
        var context = this;
        function handle(loc, caught) {
          return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
        }
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i],
            record = entry.completion;
          if ("root" === entry.tryLoc) return handle("end");
          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");
            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            } else {
              if (!hasFinally) throw new Error("try statement without catch or finally");
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            }
          }
        }
      },
      abrupt: function (type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }
        finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
        var record = finallyEntry ? finallyEntry.completion : {};
        return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
      },
      complete: function (record, afterLoc) {
        if ("throw" === record.type) throw record.arg;
        return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
      },
      finish: function (finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
        }
      },
      catch: function (tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if ("throw" === record.type) {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }
        throw new Error("illegal catch attempt");
      },
      delegateYield: function (iterable, resultName, nextLoc) {
        return this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
      }
    }, exports;
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", {
      writable: false
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }
  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };
    return _setPrototypeOf(o, p);
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }
  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) {
      _construct = Reflect.construct.bind();
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }
    return _construct.apply(null, arguments);
  }
  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }
  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;
      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }
      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);
        _cache.set(Class, Wrapper);
      }
      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }
      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };
    return _wrapNativeSuper(Class);
  }
  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }
    return _assertThisInitialized(self);
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
        result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }

  /******************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  /* global Reflect, Promise, SuppressedError, Symbol */

  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return extendStatics(d, b);
  };
  function __extends(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  var __assign = function () {
    __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
    return __assign.apply(this, arguments);
  };
  function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  }
  function __decorate(decorators, target, key, desc) {
    var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  }
  function __param(paramIndex, decorator) {
    return function (target, key) {
      decorator(target, key, paramIndex);
    };
  }
  function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) {
      if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
      return f;
    }
    var kind = contextIn.kind,
      key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _,
      done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function (f) {
        if (done) throw new TypeError("Cannot add initializers after decoration has completed");
        extraInitializers.push(accept(f || null));
      };
      var result = (0, decorators[i])(kind === "accessor" ? {
        get: descriptor.get,
        set: descriptor.set
      } : descriptor[key], context);
      if (kind === "accessor") {
        if (result === void 0) continue;
        if (result === null || typeof result !== "object") throw new TypeError("Object expected");
        if (_ = accept(result.get)) descriptor.get = _;
        if (_ = accept(result.set)) descriptor.set = _;
        if (_ = accept(result.init)) initializers.unshift(_);
      } else if (_ = accept(result)) {
        if (kind === "field") initializers.unshift(_);else descriptor[key] = _;
      }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
  }
  function __runInitializers(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
  }
  function __propKey(x) {
    return typeof x === "symbol" ? x : "".concat(x);
  }
  function __setFunctionName(f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", {
      configurable: true,
      value: prefix ? "".concat(prefix, " ", name) : name
    });
  }
  function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
  }
  function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function () {
          if (t[0] & 1) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      },
      f,
      y,
      t,
      g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g;
    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _) try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
        if (y = 0, t) op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2]) _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : void 0,
        done: true
      };
    }
  }
  var __createBinding = Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = {
        enumerable: true,
        get: function () {
          return m[k];
        }
      };
    }
    Object.defineProperty(o, k2, desc);
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  };
  function __exportStar(m, o) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
  }
  function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator,
      m = s && o[s],
      i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
      next: function () {
        if (o && i >= o.length) o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o),
      r,
      ar = [],
      e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    } catch (error) {
      e = {
        error: error
      };
    } finally {
      try {
        if (r && !r.done && (m = i["return"])) m.call(i);
      } finally {
        if (e) throw e.error;
      }
    }
    return ar;
  }

  /** @deprecated */
  function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
  }

  /** @deprecated */
  function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
    return r;
  }
  function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
  }
  function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
  }
  function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []),
      i,
      q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i;
    function verb(n) {
      if (g[n]) i[n] = function (v) {
        return new Promise(function (a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
    }
    function resume(n, v) {
      try {
        step(g[n](v));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v) {
      if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
  }
  function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) {
      throw e;
    }), verb("return"), i[Symbol.iterator] = function () {
      return this;
    }, i;
    function verb(n, f) {
      i[n] = o[n] ? function (v) {
        return (p = !p) ? {
          value: __await(o[n](v)),
          done: false
        } : f ? f(v) : v;
      } : f;
    }
  }
  function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator],
      i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && function (v) {
        return new Promise(function (resolve, reject) {
          v = o[n](v), settle(resolve, reject, v.done, v.value);
        });
      };
    }
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function (v) {
        resolve({
          value: v,
          done: d
        });
      }, reject);
    }
  }
  function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) {
      Object.defineProperty(cooked, "raw", {
        value: raw
      });
    } else {
      cooked.raw = raw;
    }
    return cooked;
  }
  var __setModuleDefault = Object.create ? function (o, v) {
    Object.defineProperty(o, "default", {
      enumerable: true,
      value: v
    });
  } : function (o, v) {
    o["default"] = v;
  };
  function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  }
  function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
      default: mod
    };
  }
  function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  }
  function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  }
  function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
  }
  function __addDisposableResource(env, value, async) {
    if (value !== null && value !== void 0) {
      if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
      var dispose;
      if (async) {
        if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
        dispose = value[Symbol.asyncDispose];
      }
      if (dispose === void 0) {
        if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
        dispose = value[Symbol.dispose];
      }
      if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
      env.stack.push({
        value: value,
        dispose: dispose,
        async: async
      });
    } else if (async) {
      env.stack.push({
        async: true
      });
    }
    return value;
  }
  var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
  };
  function __disposeResources(env) {
    function fail(e) {
      env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
      env.hasError = true;
    }
    function next() {
      while (env.stack.length) {
        var rec = env.stack.pop();
        try {
          var result = rec.dispose && rec.dispose.call(rec.value);
          if (rec.async) return Promise.resolve(result).then(next, function (e) {
            fail(e);
            return next();
          });
        } catch (e) {
          fail(e);
        }
      }
      if (env.hasError) throw env.error;
    }
    return next();
  }
  var tslib_es6 = {
    __extends: __extends,
    __assign: __assign,
    __rest: __rest,
    __decorate: __decorate,
    __param: __param,
    __metadata: __metadata,
    __awaiter: __awaiter,
    __generator: __generator,
    __createBinding: __createBinding,
    __exportStar: __exportStar,
    __values: __values,
    __read: __read,
    __spread: __spread,
    __spreadArrays: __spreadArrays,
    __spreadArray: __spreadArray,
    __await: __await,
    __asyncGenerator: __asyncGenerator,
    __asyncDelegator: __asyncDelegator,
    __asyncValues: __asyncValues,
    __makeTemplateObject: __makeTemplateObject,
    __importStar: __importStar,
    __importDefault: __importDefault,
    __classPrivateFieldGet: __classPrivateFieldGet,
    __classPrivateFieldSet: __classPrivateFieldSet,
    __classPrivateFieldIn: __classPrivateFieldIn,
    __addDisposableResource: __addDisposableResource,
    __disposeResources: __disposeResources
  };

  var tslib_es6$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    __addDisposableResource: __addDisposableResource,
    get __assign () { return __assign; },
    __asyncDelegator: __asyncDelegator,
    __asyncGenerator: __asyncGenerator,
    __asyncValues: __asyncValues,
    __await: __await,
    __awaiter: __awaiter,
    __classPrivateFieldGet: __classPrivateFieldGet,
    __classPrivateFieldIn: __classPrivateFieldIn,
    __classPrivateFieldSet: __classPrivateFieldSet,
    __createBinding: __createBinding,
    __decorate: __decorate,
    __disposeResources: __disposeResources,
    __esDecorate: __esDecorate,
    __exportStar: __exportStar,
    __extends: __extends,
    __generator: __generator,
    __importDefault: __importDefault,
    __importStar: __importStar,
    __makeTemplateObject: __makeTemplateObject,
    __metadata: __metadata,
    __param: __param,
    __propKey: __propKey,
    __read: __read,
    __rest: __rest,
    __runInitializers: __runInitializers,
    __setFunctionName: __setFunctionName,
    __spread: __spread,
    __spreadArray: __spreadArray,
    __spreadArrays: __spreadArrays,
    __values: __values,
    default: tslib_es6
  });

  var HttpAuthLocation;
  (function (HttpAuthLocation) {
    HttpAuthLocation["HEADER"] = "header";
    HttpAuthLocation["QUERY"] = "query";
  })(HttpAuthLocation || (HttpAuthLocation = {}));

  var EndpointURLScheme;
  (function (EndpointURLScheme) {
    EndpointURLScheme["HTTP"] = "http";
    EndpointURLScheme["HTTPS"] = "https";
  })(EndpointURLScheme || (EndpointURLScheme = {}));

  var AlgorithmId;
  (function (AlgorithmId) {
    AlgorithmId["MD5"] = "md5";
    AlgorithmId["CRC32"] = "crc32";
    AlgorithmId["CRC32C"] = "crc32c";
    AlgorithmId["SHA1"] = "sha1";
    AlgorithmId["SHA256"] = "sha256";
  })(AlgorithmId || (AlgorithmId = {}));

  var FieldPosition;
  (function (FieldPosition) {
    FieldPosition[FieldPosition["HEADER"] = 0] = "HEADER";
    FieldPosition[FieldPosition["TRAILER"] = 1] = "TRAILER";
  })(FieldPosition || (FieldPosition = {}));

  var RequestHandlerProtocol;
  (function (RequestHandlerProtocol) {
    RequestHandlerProtocol["HTTP_0_9"] = "http/0.9";
    RequestHandlerProtocol["HTTP_1_0"] = "http/1.0";
    RequestHandlerProtocol["TDS_8_0"] = "tds/8.0";
  })(RequestHandlerProtocol || (RequestHandlerProtocol = {}));

  class HttpRequest {
    constructor(options) {
      this.method = options.method || "GET";
      this.hostname = options.hostname || "localhost";
      this.port = options.port;
      this.query = options.query || {};
      this.headers = options.headers || {};
      this.body = options.body;
      this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
      this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
      this.username = options.username;
      this.password = options.password;
      this.fragment = options.fragment;
    }
    static isInstance(request) {
      if (!request) return false;
      const req = request;
      return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
    }
    clone() {
      const cloned = new HttpRequest({
        ...this,
        headers: {
          ...this.headers
        }
      });
      if (cloned.query) cloned.query = cloneQuery$1(cloned.query);
      return cloned;
    }
  }
  function cloneQuery$1(query) {
    return Object.keys(query).reduce((carry, paramName) => {
      const param = query[paramName];
      return {
        ...carry,
        [paramName]: Array.isArray(param) ? [...param] : param
      };
    }, {});
  }

  class HttpResponse {
    constructor(options) {
      this.statusCode = options.statusCode;
      this.reason = options.reason;
      this.headers = options.headers || {};
      this.body = options.body;
    }
    static isInstance(response) {
      if (!response) return false;
      const resp = response;
      return typeof resp.statusCode === "number" && typeof resp.headers === "object";
    }
  }

  function isValidHostname(hostname) {
    const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
    return hostPattern.test(hostname);
  }

  function addExpectContinueMiddleware(options) {
    return next => async args => {
      const {
        request
      } = args;
      if (HttpRequest.isInstance(request) && request.body && options.runtime === "node") {
        request.headers = {
          ...request.headers,
          Expect: "100-continue"
        };
      }
      return next({
        ...args,
        request
      });
    };
  }
  const addExpectContinueMiddlewareOptions = {
    step: "build",
    tags: ["SET_EXPECT_HEADER", "EXPECT_HEADER"],
    name: "addExpectContinueMiddleware",
    override: true
  };
  const getAddExpectContinuePlugin = options => ({
    applyToStack: clientStack => {
      clientStack.add(addExpectContinueMiddleware(options), addExpectContinueMiddlewareOptions);
    }
  });

  function resolveHostHeaderConfig(input) {
    return input;
  }
  const hostHeaderMiddleware = options => next => async args => {
    if (!HttpRequest.isInstance(args.request)) return next(args);
    const {
      request
    } = args;
    const {
      handlerProtocol = ""
    } = options.requestHandler.metadata || {};
    if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
      delete request.headers["host"];
      request.headers[":authority"] = "";
    } else if (!request.headers["host"]) {
      let host = request.hostname;
      if (request.port != null) host += `:${request.port}`;
      request.headers["host"] = host;
    }
    return next(args);
  };
  const hostHeaderMiddlewareOptions = {
    name: "hostHeaderMiddleware",
    step: "build",
    priority: "low",
    tags: ["HOST"],
    override: true
  };
  const getHostHeaderPlugin = options => ({
    applyToStack: clientStack => {
      clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
    }
  });

  const loggerMiddleware = () => (next, context) => async args => {
    try {
      const response = await next(args);
      const {
        clientName,
        commandName,
        logger,
        dynamoDbDocumentClientOptions = {}
      } = context;
      const {
        overrideInputFilterSensitiveLog,
        overrideOutputFilterSensitiveLog
      } = dynamoDbDocumentClientOptions;
      const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
      const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;
      const {
        $metadata,
        ...outputWithoutMetadata
      } = response.output;
      logger?.info?.({
        clientName,
        commandName,
        input: inputFilterSensitiveLog(args.input),
        output: outputFilterSensitiveLog(outputWithoutMetadata),
        metadata: $metadata
      });
      return response;
    } catch (error) {
      const {
        clientName,
        commandName,
        logger,
        dynamoDbDocumentClientOptions = {}
      } = context;
      const {
        overrideInputFilterSensitiveLog
      } = dynamoDbDocumentClientOptions;
      const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;
      logger?.error?.({
        clientName,
        commandName,
        input: inputFilterSensitiveLog(args.input),
        error,
        metadata: error.$metadata
      });
      throw error;
    }
  };
  const loggerMiddlewareOptions = {
    name: "loggerMiddleware",
    tags: ["LOGGER"],
    step: "initialize",
    override: true
  };
  const getLoggerPlugin = options => ({
    applyToStack: clientStack => {
      clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
    }
  });

  var global$1 = (typeof global !== "undefined" ? global :
    typeof self !== "undefined" ? self :
    typeof window !== "undefined" ? window : {});

  // shim for using process in browser
  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

  function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
  }
  function defaultClearTimeout () {
      throw new Error('clearTimeout has not been defined');
  }
  var cachedSetTimeout = defaultSetTimout;
  var cachedClearTimeout = defaultClearTimeout;
  if (typeof global$1.setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
  }
  if (typeof global$1.clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
  }

  function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
      } catch(e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
          } catch(e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
          }
      }


  }
  function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
      } catch (e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
          } catch (e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
          }
      }



  }
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
      if (!draining || !currentQueue) {
          return;
      }
      draining = false;
      if (currentQueue.length) {
          queue = currentQueue.concat(queue);
      } else {
          queueIndex = -1;
      }
      if (queue.length) {
          drainQueue();
      }
  }

  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;

      var len = queue.length;
      while(len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
  }
  function nextTick(fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
      }
  }
  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  var title = 'browser';
  var platform = 'browser';
  var browser$1 = true;
  var env = {};
  var argv = [];
  var version$2 = ''; // empty string to avoid regexp issues
  var versions = {};
  var release = {};
  var config = {};

  function noop() {}

  var on = noop;
  var addListener = noop;
  var once = noop;
  var off = noop;
  var removeListener = noop;
  var removeAllListeners = noop;
  var emit = noop;

  function binding(name) {
      throw new Error('process.binding is not supported');
  }

  function cwd () { return '/' }
  function chdir (dir) {
      throw new Error('process.chdir is not supported');
  }function umask() { return 0; }

  // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
  var performance = global$1.performance || {};
  var performanceNow =
    performance.now        ||
    performance.mozNow     ||
    performance.msNow      ||
    performance.oNow       ||
    performance.webkitNow  ||
    function(){ return (new Date()).getTime() };

  // generate timestamp or delta
  // see http://nodejs.org/api/process.html#process_process_hrtime
  function hrtime(previousTimestamp){
    var clocktime = performanceNow.call(performance)*1e-3;
    var seconds = Math.floor(clocktime);
    var nanoseconds = Math.floor((clocktime%1)*1e9);
    if (previousTimestamp) {
      seconds = seconds - previousTimestamp[0];
      nanoseconds = nanoseconds - previousTimestamp[1];
      if (nanoseconds<0) {
        seconds--;
        nanoseconds += 1e9;
      }
    }
    return [seconds,nanoseconds]
  }

  var startTime = new Date();
  function uptime() {
    var currentTime = new Date();
    var dif = currentTime - startTime;
    return dif / 1000;
  }

  var browser$1$1 = {
    nextTick: nextTick,
    title: title,
    browser: browser$1,
    env: env,
    argv: argv,
    version: version$2,
    versions: versions,
    on: on,
    addListener: addListener,
    once: once,
    off: off,
    removeListener: removeListener,
    removeAllListeners: removeAllListeners,
    emit: emit,
    binding: binding,
    cwd: cwd,
    chdir: chdir,
    umask: umask,
    hrtime: hrtime,
    platform: platform,
    release: release,
    config: config,
    uptime: uptime
  };

  const TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
  const ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
  const ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
  const recursionDetectionMiddleware = options => next => async args => {
    const {
      request
    } = args;
    if (!HttpRequest.isInstance(request) || options.runtime !== "node" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
      return next(args);
    }
    const functionName = browser$1$1.env[ENV_LAMBDA_FUNCTION_NAME];
    const traceId = browser$1$1.env[ENV_TRACE_ID];
    const nonEmptyString = str => typeof str === "string" && str.length > 0;
    if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
      request.headers[TRACE_ID_HEADER_NAME] = traceId;
    }
    return next({
      ...args,
      request
    });
  };
  const addRecursionDetectionMiddlewareOptions = {
    step: "build",
    tags: ["RECURSION_DETECTION"],
    name: "recursionDetectionMiddleware",
    override: true,
    priority: "low"
  };
  const getRecursionDetectionPlugin = options => ({
    applyToStack: clientStack => {
      clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);
    }
  });

  const CONTENT_LENGTH_HEADER$1 = "content-length";
  function checkContentLengthHeader() {
    return (next, context) => async args => {
      const {
        request
      } = args;
      if (HttpRequest.isInstance(request)) {
        if (!request.headers[CONTENT_LENGTH_HEADER$1]) {
          const message = `Are you using a Stream of unknown length as the Body of a PutObject request? Consider using Upload instead from @aws-sdk/lib-storage.`;
          if (typeof context?.logger?.warn === "function") {
            context.logger.warn(message);
          } else {
            console.warn(message);
          }
        }
      }
      return next({
        ...args
      });
    };
  }
  const checkContentLengthHeaderMiddlewareOptions = {
    step: "finalizeRequest",
    tags: ["CHECK_CONTENT_LENGTH_HEADER"],
    name: "getCheckContentLengthHeaderPlugin",
    override: true
  };
  const getCheckContentLengthHeaderPlugin = unused => ({
    applyToStack: clientStack => {
      clientStack.add(checkContentLengthHeader(), checkContentLengthHeaderMiddlewareOptions);
    }
  });

  const resolveS3Config = input => ({
    ...input,
    forcePathStyle: input.forcePathStyle ?? false,
    useAccelerateEndpoint: input.useAccelerateEndpoint ?? false,
    disableMultiregionAccessPoints: input.disableMultiregionAccessPoints ?? false
  });

  const throw200ExceptionsMiddleware = config => next => async args => {
    const result = await next(args);
    const {
      response
    } = result;
    if (!HttpResponse.isInstance(response)) return result;
    const {
      statusCode,
      body
    } = response;
    if (statusCode < 200 || statusCode >= 300) return result;
    const bodyBytes = await collectBody$1(body, config);
    const bodyString = await collectBodyString$1(bodyBytes, config);
    if (bodyBytes.length === 0) {
      const err = new Error("S3 aborted request");
      err.name = "InternalError";
      throw err;
    }
    if (bodyString && bodyString.match("<Error>")) {
      response.statusCode = 400;
    }
    response.body = bodyBytes;
    return result;
  };
  const collectBody$1 = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
      return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
  };
  const collectBodyString$1 = (streamBody, context) => collectBody$1(streamBody, context).then(body => context.utf8Encoder(body));
  const throw200ExceptionsMiddlewareOptions = {
    relation: "after",
    toMiddleware: "deserializerMiddleware",
    tags: ["THROW_200_EXCEPTIONS", "S3"],
    name: "throw200ExceptionsMiddleware",
    override: true
  };
  const getThrow200ExceptionsPlugin = config => ({
    applyToStack: clientStack => {
      clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);
    }
  });

  const validate$1 = str => typeof str === "string" && str.indexOf("arn:") === 0 && str.split(":").length >= 6;

  function validateBucketNameMiddleware() {
    return next => async args => {
      const {
        input: {
          Bucket
        }
      } = args;
      if (typeof Bucket === "string" && !validate$1(Bucket) && Bucket.indexOf("/") >= 0) {
        const err = new Error(`Bucket name shouldn't contain '/', received '${Bucket}'`);
        err.name = "InvalidBucketName";
        throw err;
      }
      return next({
        ...args
      });
    };
  }
  const validateBucketNameMiddlewareOptions = {
    step: "initialize",
    tags: ["VALIDATE_BUCKET_NAME"],
    name: "validateBucketNameMiddleware",
    override: true
  };
  const getValidateBucketNamePlugin = unused => ({
    applyToStack: clientStack => {
      clientStack.add(validateBucketNameMiddleware(), validateBucketNameMiddlewareOptions);
    }
  });

  const memoize = (provider, isExpired, requiresRefresh) => {
    let resolved;
    let pending;
    let hasResult;
    let isConstant = false;
    const coalesceProvider = async () => {
      if (!pending) {
        pending = provider();
      }
      try {
        resolved = await pending;
        hasResult = true;
        isConstant = false;
      } finally {
        pending = undefined;
      }
      return resolved;
    };
    if (isExpired === undefined) {
      return async options => {
        if (!hasResult || options?.forceRefresh) {
          resolved = await coalesceProvider();
        }
        return resolved;
      };
    }
    return async options => {
      if (!hasResult || options?.forceRefresh) {
        resolved = await coalesceProvider();
      }
      if (isConstant) {
        return resolved;
      }
      if (requiresRefresh && !requiresRefresh(resolved)) {
        isConstant = true;
        return resolved;
      }
      if (isExpired(resolved)) {
        await coalesceProvider();
        return resolved;
      }
      return resolved;
    };
  };

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function getAugmentedNamespace(n) {
    if (n.__esModule) return n;
    var f = n.default;
  	if (typeof f == "function") {
  		var a = function a () {
  			if (this instanceof a) {
          return Reflect.construct(f, arguments, this.constructor);
  			}
  			return f.apply(this, arguments);
  		};
  		a.prototype = f.prototype;
    } else a = {};
    Object.defineProperty(a, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  var build$7 = {};

  var require$$0 = /*@__PURE__*/getAugmentedNamespace(tslib_es6$1);

  var build$6 = {};

  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var inited = false;
  function init () {
    inited = true;
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;
  }

  function toByteArray (b64) {
    if (!inited) {
      init();
    }
    var i, j, l, tmp, placeHolders, arr;
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice
    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

    // base64 is 4/3 + up to two characters of the original data
    arr = new Arr(len * 3 / 4 - placeHolders);

    // if there are placeholders, only get up to the last complete 4 chars
    l = placeHolders > 0 ? len - 4 : len;

    var L = 0;

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
      arr[L++] = (tmp >> 16) & 0xFF;
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    if (placeHolders === 2) {
      tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
      arr[L++] = tmp & 0xFF;
    } else if (placeHolders === 1) {
      tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    return arr
  }

  function tripletToBase64 (num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
  }

  function encodeChunk (uint8, start, end) {
    var tmp;
    var output = [];
    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
      output.push(tripletToBase64(tmp));
    }
    return output.join('')
  }

  function fromByteArray (uint8) {
    if (!inited) {
      init();
    }
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
    var output = '';
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup[tmp >> 2];
      output += lookup[(tmp << 4) & 0x3F];
      output += '==';
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
      output += lookup[tmp >> 10];
      output += lookup[(tmp >> 4) & 0x3F];
      output += lookup[(tmp << 2) & 0x3F];
      output += '=';
    }

    parts.push(output);

    return parts.join('')
  }

  function read (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  }

  function write (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  }

  var toString = {}.toString;

  var isArray$1 = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };

  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   */

  var INSPECT_MAX_BYTES = 50;

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Use Object implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * Due to various browser bugs, sometimes the Object implementation will be used even
   * when the browser supports typed arrays.
   *
   * Note:
   *
   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
   *
   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
   *
   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
   *     incorrect length in some situations.

   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
   * get the Object implementation, which is slower but behaves correctly.
   */
  Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
    ? global$1.TYPED_ARRAY_SUPPORT
    : true;

  /*
   * Export kMaxLength after typed array support is determined.
   */
  kMaxLength();

  function kMaxLength () {
    return Buffer.TYPED_ARRAY_SUPPORT
      ? 0x7fffffff
      : 0x3fffffff
  }

  function createBuffer (that, length) {
    if (kMaxLength() < length) {
      throw new RangeError('Invalid typed array length')
    }
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = new Uint8Array(length);
      that.__proto__ = Buffer.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      if (that === null) {
        that = new Buffer(length);
      }
      that.length = length;
    }

    return that
  }

  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */

  function Buffer (arg, encodingOrOffset, length) {
    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
      return new Buffer(arg, encodingOrOffset, length)
    }

    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new Error(
          'If encoding is specified then the first argument must be a string'
        )
      }
      return allocUnsafe(this, arg)
    }
    return from(this, arg, encodingOrOffset, length)
  }

  Buffer.poolSize = 8192; // not used by this implementation

  // TODO: Legacy, not needed anymore. Remove in next major version.
  Buffer._augment = function (arr) {
    arr.__proto__ = Buffer.prototype;
    return arr
  };

  function from (that, value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number')
    }

    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
      return fromArrayBuffer(that, value, encodingOrOffset, length)
    }

    if (typeof value === 'string') {
      return fromString(that, value, encodingOrOffset)
    }

    return fromObject(that, value)
  }

  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer.from = function (value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length)
  };

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    Buffer.prototype.__proto__ = Uint8Array.prototype;
    Buffer.__proto__ = Uint8Array;
    if (typeof Symbol !== 'undefined' && Symbol.species &&
        Buffer[Symbol.species] === Buffer) ;
  }

  function assertSize (size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be a number')
    } else if (size < 0) {
      throw new RangeError('"size" argument must not be negative')
    }
  }

  function alloc (that, size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(that, size)
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpretted as a start offset.
      return typeof encoding === 'string'
        ? createBuffer(that, size).fill(fill, encoding)
        : createBuffer(that, size).fill(fill)
    }
    return createBuffer(that, size)
  }

  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer.alloc = function (size, fill, encoding) {
    return alloc(null, size, fill, encoding)
  };

  function allocUnsafe (that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; ++i) {
        that[i] = 0;
      }
    }
    return that
  }

  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer.allocUnsafe = function (size) {
    return allocUnsafe(null, size)
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(null, size)
  };

  function fromString (that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }

    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding')
    }

    var length = byteLength$1(string, encoding) | 0;
    that = createBuffer(that, length);

    var actual = that.write(string, encoding);

    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      that = that.slice(0, actual);
    }

    return that
  }

  function fromArrayLike (that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that
  }

  function fromArrayBuffer (that, array, byteOffset, length) {
    array.byteLength; // this throws if `array` is not a valid ArrayBuffer

    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('\'offset\' is out of bounds')
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('\'length\' is out of bounds')
    }

    if (byteOffset === undefined && length === undefined) {
      array = new Uint8Array(array);
    } else if (length === undefined) {
      array = new Uint8Array(array, byteOffset);
    } else {
      array = new Uint8Array(array, byteOffset, length);
    }

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = array;
      that.__proto__ = Buffer.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      that = fromArrayLike(that, array);
    }
    return that
  }

  function fromObject (that, obj) {
    if (internalIsBuffer(obj)) {
      var len = checked(obj.length) | 0;
      that = createBuffer(that, len);

      if (that.length === 0) {
        return that
      }

      obj.copy(that, 0, 0, len);
      return that
    }

    if (obj) {
      if ((typeof ArrayBuffer !== 'undefined' &&
          obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
        if (typeof obj.length !== 'number' || isnan(obj.length)) {
          return createBuffer(that, 0)
        }
        return fromArrayLike(that, obj)
      }

      if (obj.type === 'Buffer' && isArray$1(obj.data)) {
        return fromArrayLike(that, obj.data)
      }
    }

    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
  }

  function checked (length) {
    // Note: cannot use `length < kMaxLength()` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + kMaxLength().toString(16) + ' bytes')
    }
    return length | 0
  }
  Buffer.isBuffer = isBuffer;
  function internalIsBuffer (b) {
    return !!(b != null && b._isBuffer)
  }

  Buffer.compare = function compare (a, b) {
    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
      throw new TypeError('Arguments must be Buffers')
    }

    if (a === b) return 0

    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  Buffer.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  };

  Buffer.concat = function concat (list, length) {
    if (!isArray$1(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }

    if (list.length === 0) {
      return Buffer.alloc(0)
    }

    var i;
    if (length === undefined) {
      length = 0;
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }

    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for (i = 0; i < list.length; ++i) {
      var buf = list[i];
      if (!internalIsBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
      buf.copy(buffer, pos);
      pos += buf.length;
    }
    return buffer
  };

  function byteLength$1 (string, encoding) {
    if (internalIsBuffer(string)) {
      return string.length
    }
    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
      return string.byteLength
    }
    if (typeof string !== 'string') {
      string = '' + string;
    }

    var len = string.length;
    if (len === 0) return 0

    // Use a for loop to avoid recursion
    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len
        case 'utf8':
        case 'utf-8':
        case undefined:
          return utf8ToBytes(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) return utf8ToBytes(string).length // assume utf8
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer.byteLength = byteLength$1;

  function slowToString (encoding, start, end) {
    var loweredCase = false;

    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.

    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0;
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return ''
    }

    if (end === undefined || end > this.length) {
      end = this.length;
    }

    if (end <= 0) {
      return ''
    }

    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;

    if (end <= start) {
      return ''
    }

    if (!encoding) encoding = 'utf8';

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end)

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end)

        case 'ascii':
          return asciiSlice(this, start, end)

        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end)

        case 'base64':
          return base64Slice(this, start, end)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  }

  // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
  // Buffer instances.
  Buffer.prototype._isBuffer = true;

  function swap (b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }

  Buffer.prototype.swap16 = function swap16 () {
    var len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits')
    }
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }
    return this
  };

  Buffer.prototype.swap32 = function swap32 () {
    var len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits')
    }
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }
    return this
  };

  Buffer.prototype.swap64 = function swap64 () {
    var len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits')
    }
    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }
    return this
  };

  Buffer.prototype.toString = function toString () {
    var length = this.length | 0;
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
  };

  Buffer.prototype.equals = function equals (b) {
    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer.compare(this, b) === 0
  };

  Buffer.prototype.inspect = function inspect () {
    var str = '';
    var max = INSPECT_MAX_BYTES;
    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
      if (this.length > max) str += ' ... ';
    }
    return '<Buffer ' + str + '>'
  };

  Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
    if (!internalIsBuffer(target)) {
      throw new TypeError('Argument must be a Buffer')
    }

    if (start === undefined) {
      start = 0;
    }
    if (end === undefined) {
      end = target ? target.length : 0;
    }
    if (thisStart === undefined) {
      thisStart = 0;
    }
    if (thisEnd === undefined) {
      thisEnd = this.length;
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index')
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0
    }
    if (thisStart >= thisEnd) {
      return -1
    }
    if (start >= end) {
      return 1
    }

    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;

    if (this === target) return 0

    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);

    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1

    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000;
    }
    byteOffset = +byteOffset;  // Coerce to Number.
    if (isNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : (buffer.length - 1);
    }

    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
      if (dir) return -1
      else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;
      else return -1
    }

    // Normalize val
    if (typeof val === 'string') {
      val = Buffer.from(val, encoding);
    }

    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (internalIsBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]
      if (Buffer.TYPED_ARRAY_SUPPORT &&
          typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
        }
      }
      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
    }

    throw new TypeError('val must be string, number or Buffer')
  }

  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();
      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
          encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }

    function read (buf, i) {
      if (indexSize === 1) {
        return buf[i]
      } else {
        return buf.readUInt16BE(i * indexSize)
      }
    }

    var i;
    if (dir) {
      var foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break
          }
        }
        if (found) return i
      }
    }

    return -1
  }

  Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1
  };

  Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
  };

  Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
  };

  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }

    // must be an even number of digits
    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (isNaN(parsed)) return i
      buf[offset + i] = parsed;
    }
    return i
  }

  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  }

  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }

  function latin1Write (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
  }

  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }

  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }

  Buffer.prototype.write = function write (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset | 0;
      if (isFinite(length)) {
        length = length | 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
    // legacy write(string, encoding, offset, length) - remove in v0.13
    } else {
      throw new Error(
        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
      )
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;

    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds')
    }

    if (!encoding) encoding = 'utf8';

    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length)

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length)

        case 'ascii':
          return asciiWrite(this, string, offset, length)

        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length)

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };

  Buffer.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  };

  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return fromByteArray(buf)
    } else {
      return fromByteArray(buf.slice(start, end))
    }
  }

  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];

    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = (firstByte > 0xEF) ? 4
        : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
        : 1;

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }
            break
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }
        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      res.push(codePoint);
      i += bytesPerSequence;
    }

    return decodeCodePointsArray(res)
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000;

  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res
  }

  function asciiSlice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }
    return ret
  }

  function latin1Slice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret
  }

  function hexSlice (buf, start, end) {
    var len = buf.length;

    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;

    var out = '';
    for (var i = start; i < end; ++i) {
      out += toHex$1(buf[i]);
    }
    return out
  }

  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res
  }

  Buffer.prototype.slice = function slice (start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }

    if (end < start) end = start;

    var newBuf;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      newBuf = this.subarray(start, end);
      newBuf.__proto__ = Buffer.prototype;
    } else {
      var sliceLen = end - start;
      newBuf = new Buffer(sliceLen, undefined);
      for (var i = 0; i < sliceLen; ++i) {
        newBuf[i] = this[i + start];
      }
    }

    return newBuf
  };

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  }

  Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    return val
  };

  Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }

    var val = this[offset + --byteLength];
    var mul = 1;
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }

    return val
  };

  Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset]
  };

  Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | (this[offset + 1] << 8)
  };

  Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return (this[offset] << 8) | this[offset + 1]
  };

  Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  };

  Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  };

  Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
  };

  Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | (this[offset + 1] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | (this[offset] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  };

  Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  };

  Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, true, 23, 4)
  };

  Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, false, 23, 4)
  };

  Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, true, 52, 8)
  };

  Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, false, 52, 8)
  };

  function checkInt (buf, value, offset, ext, max, min) {
    if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
  }

  Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    this[offset] = (value & 0xff);
    return offset + 1
  };

  function objectWriteUInt16 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
        (littleEndian ? i : 1 - i) * 8;
    }
  }

  Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  function objectWriteUInt32 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
    }
  }

  Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = (value >>> 24);
      this[offset + 2] = (value >>> 16);
      this[offset + 1] = (value >>> 8);
      this[offset] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = (value & 0xff);
    return offset + 1
  };

  Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      this[offset + 2] = (value >>> 16);
      this[offset + 3] = (value >>> 24);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0) value = 0xffffffff + value + 1;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
    if (offset < 0) throw new RangeError('Index out of range')
  }

  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4);
    }
    write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4
  }

  Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  };

  Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  };

  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8);
    }
    write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8
  }

  Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  };

  Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  };

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer.prototype.copy = function copy (target, targetStart, start, end) {
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;

    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')

    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;
    var i;

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start];
      }
    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; ++i) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, start + len),
        targetStart
      );
    }

    return len
  };

  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer.prototype.fill = function fill (val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0);
        if (code < 256) {
          val = code;
        }
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string')
      }
      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    }

    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index')
    }

    if (end <= start) {
      return this
    }

    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;

    if (!val) val = 0;

    var i;
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = internalIsBuffer(val)
        ? val
        : utf8ToBytes(new Buffer(val, encoding).toString());
      var len = bytes.length;
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }

    return this
  };

  // HELPER FUNCTIONS
  // ================

  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

  function base64clean (str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return ''
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '=';
    }
    return str
  }

  function stringtrim (str) {
    if (str.trim) return str.trim()
    return str.replace(/^\s+|\s+$/g, '')
  }

  function toHex$1 (n) {
    if (n < 16) return '0' + n.toString(16)
    return n.toString(16)
  }

  function utf8ToBytes (string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          }

          // valid lead
          leadSurrogate = codePoint;

          continue
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }

      leadSurrogate = null;

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else {
        throw new Error('Invalid code point')
      }
    }

    return bytes
  }

  function asciiToBytes (str) {
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }
    return byteArray
  }

  function utf16leToBytes (str, units) {
    var c, hi, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break

      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }

    return byteArray
  }


  function base64ToBytes (str) {
    return toByteArray(base64clean(str))
  }

  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i];
    }
    return i
  }

  function isnan (val) {
    return val !== val // eslint-disable-line no-self-compare
  }


  // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
  // The _isBuffer check is for Safari 5-7 support, because it's missing
  // Object.prototype.constructor. Remove this eventually
  function isBuffer(obj) {
    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
  }

  function isFastBuffer (obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
  }

  // For Node v0.10 support. Remove this eventually.
  function isSlowBuffer (obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
  }

  var convertToBuffer$1 = {};

  const fromUtf8$3 = input => {
    const bytes = [];
    for (let i = 0, len = input.length; i < len; i++) {
      const value = input.charCodeAt(i);
      if (value < 0x80) {
        bytes.push(value);
      } else if (value < 0x800) {
        bytes.push(value >> 6 | 0b11000000, value & 0b111111 | 0b10000000);
      } else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
        const surrogatePair = 0x10000 + ((value & 0b1111111111) << 10) + (input.charCodeAt(++i) & 0b1111111111);
        bytes.push(surrogatePair >> 18 | 0b11110000, surrogatePair >> 12 & 0b111111 | 0b10000000, surrogatePair >> 6 & 0b111111 | 0b10000000, surrogatePair & 0b111111 | 0b10000000);
      } else {
        bytes.push(value >> 12 | 0b11100000, value >> 6 & 0b111111 | 0b10000000, value & 0b111111 | 0b10000000);
      }
    }
    return Uint8Array.from(bytes);
  };
  const toUtf8$3 = input => {
    let decoded = "";
    for (let i = 0, len = input.length; i < len; i++) {
      const byte = input[i];
      if (byte < 0x80) {
        decoded += String.fromCharCode(byte);
      } else if (0b11000000 <= byte && byte < 0b11100000) {
        const nextByte = input[++i];
        decoded += String.fromCharCode((byte & 0b11111) << 6 | nextByte & 0b111111);
      } else if (0b11110000 <= byte && byte < 0b101101101) {
        const surrogatePair = [byte, input[++i], input[++i], input[++i]];
        const encoded = "%" + surrogatePair.map(byteValue => byteValue.toString(16)).join("%");
        decoded += decodeURIComponent(encoded);
      } else {
        decoded += String.fromCharCode((byte & 0b1111) << 12 | (input[++i] & 0b111111) << 6 | input[++i] & 0b111111);
      }
    }
    return decoded;
  };

  function fromUtf8$2(input) {
    return new TextEncoder().encode(input);
  }
  function toUtf8$2(input) {
    return new TextDecoder("utf-8").decode(input);
  }

  const fromUtf8$1 = input => typeof TextEncoder === "function" ? fromUtf8$2(input) : fromUtf8$3(input);
  const toUtf8$1 = input => typeof TextDecoder === "function" ? toUtf8$2(input) : toUtf8$3(input);

  var distEs$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    fromUtf8: fromUtf8$1,
    toUtf8: toUtf8$1
  });

  var require$$2 = /*@__PURE__*/getAugmentedNamespace(distEs$1);

  var hasRequiredConvertToBuffer;
  function requireConvertToBuffer() {
    if (hasRequiredConvertToBuffer) return convertToBuffer$1;
    hasRequiredConvertToBuffer = 1;
    // Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
    // SPDX-License-Identifier: Apache-2.0
    Object.defineProperty(convertToBuffer$1, "__esModule", {
      value: true
    });
    convertToBuffer$1.convertToBuffer = void 0;
    var util_utf8_browser_1 = require$$2;
    // Quick polyfill
    var fromUtf8 = typeof Buffer !== "undefined" && Buffer.from ? function (input) {
      return Buffer.from(input, "utf8");
    } : util_utf8_browser_1.fromUtf8;
    function convertToBuffer(data) {
      // Already a Uint8, do nothing
      if (data instanceof Uint8Array) return data;
      if (typeof data === "string") {
        return fromUtf8(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
    convertToBuffer$1.convertToBuffer = convertToBuffer;
    return convertToBuffer$1;
  }

  var isEmptyData$3 = {};

  var hasRequiredIsEmptyData$2;
  function requireIsEmptyData$2() {
    if (hasRequiredIsEmptyData$2) return isEmptyData$3;
    hasRequiredIsEmptyData$2 = 1;
    // Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
    // SPDX-License-Identifier: Apache-2.0
    Object.defineProperty(isEmptyData$3, "__esModule", {
      value: true
    });
    isEmptyData$3.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    isEmptyData$3.isEmptyData = isEmptyData;
    return isEmptyData$3;
  }

  var numToUint8 = {};

  var hasRequiredNumToUint8;
  function requireNumToUint8() {
    if (hasRequiredNumToUint8) return numToUint8;
    hasRequiredNumToUint8 = 1;
    // Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
    // SPDX-License-Identifier: Apache-2.0
    Object.defineProperty(numToUint8, "__esModule", {
      value: true
    });
    numToUint8.numToUint8 = void 0;
    function numToUint8$1(num) {
      return new Uint8Array([(num & 0xff000000) >> 24, (num & 0x00ff0000) >> 16, (num & 0x0000ff00) >> 8, num & 0x000000ff]);
    }
    numToUint8.numToUint8 = numToUint8$1;
    return numToUint8;
  }

  var uint32ArrayFrom = {};

  var hasRequiredUint32ArrayFrom;
  function requireUint32ArrayFrom() {
    if (hasRequiredUint32ArrayFrom) return uint32ArrayFrom;
    hasRequiredUint32ArrayFrom = 1;
    // Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
    // SPDX-License-Identifier: Apache-2.0
    Object.defineProperty(uint32ArrayFrom, "__esModule", {
      value: true
    });
    uint32ArrayFrom.uint32ArrayFrom = void 0;
    // IE 11 does not support Array.from, so we do it manually
    function uint32ArrayFrom$1(a_lookUpTable) {
      if (!Uint32Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while (a_index < a_lookUpTable.length) {
          return_array[a_index] = a_lookUpTable[a_index];
          a_index += 1;
        }
        return return_array;
      }
      return Uint32Array.from(a_lookUpTable);
    }
    uint32ArrayFrom.uint32ArrayFrom = uint32ArrayFrom$1;
    return uint32ArrayFrom;
  }

  var hasRequiredBuild$5;
  function requireBuild$5() {
    if (hasRequiredBuild$5) return build$6;
    hasRequiredBuild$5 = 1;
    (function (exports) {

      // Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
      // SPDX-License-Identifier: Apache-2.0
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = void 0;
      var convertToBuffer_1 = requireConvertToBuffer();
      Object.defineProperty(exports, "convertToBuffer", {
        enumerable: true,
        get: function () {
          return convertToBuffer_1.convertToBuffer;
        }
      });
      var isEmptyData_1 = requireIsEmptyData$2();
      Object.defineProperty(exports, "isEmptyData", {
        enumerable: true,
        get: function () {
          return isEmptyData_1.isEmptyData;
        }
      });
      var numToUint8_1 = requireNumToUint8();
      Object.defineProperty(exports, "numToUint8", {
        enumerable: true,
        get: function () {
          return numToUint8_1.numToUint8;
        }
      });
      var uint32ArrayFrom_1 = requireUint32ArrayFrom();
      Object.defineProperty(exports, "uint32ArrayFrom", {
        enumerable: true,
        get: function () {
          return uint32ArrayFrom_1.uint32ArrayFrom;
        }
      });
    })(build$6);
    return build$6;
  }

  var aws_crc32 = {};

  var hasRequiredAws_crc32;
  function requireAws_crc32() {
    if (hasRequiredAws_crc32) return aws_crc32;
    hasRequiredAws_crc32 = 1;
    // Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
    // SPDX-License-Identifier: Apache-2.0
    Object.defineProperty(aws_crc32, "__esModule", {
      value: true
    });
    aws_crc32.AwsCrc32 = void 0;
    var tslib_1 = require$$0;
    var util_1 = requireBuild$5();
    var index_1 = requireBuild$4();
    var AwsCrc32 = /** @class */function () {
      function AwsCrc32() {
        this.crc32 = new index_1.Crc32();
      }
      AwsCrc32.prototype.update = function (toHash) {
        if ((0, util_1.isEmptyData)(toHash)) return;
        this.crc32.update((0, util_1.convertToBuffer)(toHash));
      };
      AwsCrc32.prototype.digest = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
          return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, (0, util_1.numToUint8)(this.crc32.digest())];
          });
        });
      };
      AwsCrc32.prototype.reset = function () {
        this.crc32 = new index_1.Crc32();
      };
      return AwsCrc32;
    }();
    aws_crc32.AwsCrc32 = AwsCrc32;
    return aws_crc32;
  }

  var hasRequiredBuild$4;
  function requireBuild$4() {
    if (hasRequiredBuild$4) return build$7;
    hasRequiredBuild$4 = 1;
    (function (exports) {

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.AwsCrc32 = exports.Crc32 = exports.crc32 = void 0;
      var tslib_1 = require$$0;
      var util_1 = requireBuild$5();
      function crc32(data) {
        return new Crc32().update(data).digest();
      }
      exports.crc32 = crc32;
      var Crc32 = /** @class */function () {
        function Crc32() {
          this.checksum = 0xffffffff;
        }
        Crc32.prototype.update = function (data) {
          var e_1, _a;
          try {
            for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
              var byte = data_1_1.value;
              this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 0xff];
            }
          } catch (e_1_1) {
            e_1 = {
              error: e_1_1
            };
          } finally {
            try {
              if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
          return this;
        };
        Crc32.prototype.digest = function () {
          return (this.checksum ^ 0xffffffff) >>> 0;
        };
        return Crc32;
      }();
      exports.Crc32 = Crc32;
      // prettier-ignore
      var a_lookUpTable = [0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01, 0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, 0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9, 0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D];
      var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookUpTable);
      var aws_crc32_1 = requireAws_crc32();
      Object.defineProperty(exports, "AwsCrc32", {
        enumerable: true,
        get: function () {
          return aws_crc32_1.AwsCrc32;
        }
      });
    })(build$7);
    return build$7;
  }

  var buildExports$1 = requireBuild$4();

  const SHORT_TO_HEX = {};
  const HEX_TO_SHORT = {};
  for (let i = 0; i < 256; i++) {
    let encodedByte = i.toString(16).toLowerCase();
    if (encodedByte.length === 1) {
      encodedByte = `0${encodedByte}`;
    }
    SHORT_TO_HEX[i] = encodedByte;
    HEX_TO_SHORT[encodedByte] = i;
  }
  function fromHex(encoded) {
    if (encoded.length % 2 !== 0) {
      throw new Error("Hex encoded strings must have an even number length");
    }
    const out = new Uint8Array(encoded.length / 2);
    for (let i = 0; i < encoded.length; i += 2) {
      const encodedByte = encoded.slice(i, i + 2).toLowerCase();
      if (encodedByte in HEX_TO_SHORT) {
        out[i / 2] = HEX_TO_SHORT[encodedByte];
      } else {
        throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
      }
    }
    return out;
  }
  function toHex(bytes) {
    let out = "";
    for (let i = 0; i < bytes.byteLength; i++) {
      out += SHORT_TO_HEX[bytes[i]];
    }
    return out;
  }

  class Int64 {
    constructor(bytes) {
      this.bytes = bytes;
      if (bytes.byteLength !== 8) {
        throw new Error("Int64 buffers must be exactly 8 bytes");
      }
    }
    static fromNumber(number) {
      if (number > 9223372036854776000 || number < -9223372036854776000) {
        throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
      }
      const bytes = new Uint8Array(8);
      for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {
        bytes[i] = remaining;
      }
      if (number < 0) {
        negate(bytes);
      }
      return new Int64(bytes);
    }
    valueOf() {
      const bytes = this.bytes.slice(0);
      const negative = bytes[0] & 0b10000000;
      if (negative) {
        negate(bytes);
      }
      return parseInt(toHex(bytes), 16) * (negative ? -1 : 1);
    }
    toString() {
      return String(this.valueOf());
    }
  }
  function negate(bytes) {
    for (let i = 0; i < 8; i++) {
      bytes[i] ^= 0xff;
    }
    for (let i = 7; i > -1; i--) {
      bytes[i]++;
      if (bytes[i] !== 0) break;
    }
  }

  class HeaderMarshaller {
    constructor(toUtf8, fromUtf8) {
      this.toUtf8 = toUtf8;
      this.fromUtf8 = fromUtf8;
    }
    format(headers) {
      const chunks = [];
      for (const headerName of Object.keys(headers)) {
        const bytes = this.fromUtf8(headerName);
        chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
      }
      const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
      let position = 0;
      for (const chunk of chunks) {
        out.set(chunk, position);
        position += chunk.byteLength;
      }
      return out;
    }
    formatHeaderValue(header) {
      switch (header.type) {
        case "boolean":
          return Uint8Array.from([header.value ? 0 : 1]);
        case "byte":
          return Uint8Array.from([2, header.value]);
        case "short":
          const shortView = new DataView(new ArrayBuffer(3));
          shortView.setUint8(0, 3);
          shortView.setInt16(1, header.value, false);
          return new Uint8Array(shortView.buffer);
        case "integer":
          const intView = new DataView(new ArrayBuffer(5));
          intView.setUint8(0, 4);
          intView.setInt32(1, header.value, false);
          return new Uint8Array(intView.buffer);
        case "long":
          const longBytes = new Uint8Array(9);
          longBytes[0] = 5;
          longBytes.set(header.value.bytes, 1);
          return longBytes;
        case "binary":
          const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
          binView.setUint8(0, 6);
          binView.setUint16(1, header.value.byteLength, false);
          const binBytes = new Uint8Array(binView.buffer);
          binBytes.set(header.value, 3);
          return binBytes;
        case "string":
          const utf8Bytes = this.fromUtf8(header.value);
          const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
          strView.setUint8(0, 7);
          strView.setUint16(1, utf8Bytes.byteLength, false);
          const strBytes = new Uint8Array(strView.buffer);
          strBytes.set(utf8Bytes, 3);
          return strBytes;
        case "timestamp":
          const tsBytes = new Uint8Array(9);
          tsBytes[0] = 8;
          tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);
          return tsBytes;
        case "uuid":
          if (!UUID_PATTERN.test(header.value)) {
            throw new Error(`Invalid UUID received: ${header.value}`);
          }
          const uuidBytes = new Uint8Array(17);
          uuidBytes[0] = 9;
          uuidBytes.set(fromHex(header.value.replace(/\-/g, "")), 1);
          return uuidBytes;
      }
    }
    parse(headers) {
      const out = {};
      let position = 0;
      while (position < headers.byteLength) {
        const nameLength = headers.getUint8(position++);
        const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
        position += nameLength;
        switch (headers.getUint8(position++)) {
          case 0:
            out[name] = {
              type: BOOLEAN_TAG,
              value: true
            };
            break;
          case 1:
            out[name] = {
              type: BOOLEAN_TAG,
              value: false
            };
            break;
          case 2:
            out[name] = {
              type: BYTE_TAG,
              value: headers.getInt8(position++)
            };
            break;
          case 3:
            out[name] = {
              type: SHORT_TAG,
              value: headers.getInt16(position, false)
            };
            position += 2;
            break;
          case 4:
            out[name] = {
              type: INT_TAG,
              value: headers.getInt32(position, false)
            };
            position += 4;
            break;
          case 5:
            out[name] = {
              type: LONG_TAG,
              value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))
            };
            position += 8;
            break;
          case 6:
            const binaryLength = headers.getUint16(position, false);
            position += 2;
            out[name] = {
              type: BINARY_TAG,
              value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)
            };
            position += binaryLength;
            break;
          case 7:
            const stringLength = headers.getUint16(position, false);
            position += 2;
            out[name] = {
              type: STRING_TAG,
              value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))
            };
            position += stringLength;
            break;
          case 8:
            out[name] = {
              type: TIMESTAMP_TAG,
              value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())
            };
            position += 8;
            break;
          case 9:
            const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
            position += 16;
            out[name] = {
              type: UUID_TAG,
              value: `${toHex(uuidBytes.subarray(0, 4))}-${toHex(uuidBytes.subarray(4, 6))}-${toHex(uuidBytes.subarray(6, 8))}-${toHex(uuidBytes.subarray(8, 10))}-${toHex(uuidBytes.subarray(10))}`
            };
            break;
          default:
            throw new Error(`Unrecognized header type tag`);
        }
      }
      return out;
    }
  }
  var HEADER_VALUE_TYPE;
  (function (HEADER_VALUE_TYPE) {
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["boolTrue"] = 0] = "boolTrue";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["boolFalse"] = 1] = "boolFalse";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["byte"] = 2] = "byte";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["short"] = 3] = "short";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["integer"] = 4] = "integer";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["long"] = 5] = "long";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["byteArray"] = 6] = "byteArray";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["string"] = 7] = "string";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["timestamp"] = 8] = "timestamp";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["uuid"] = 9] = "uuid";
  })(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));
  const BOOLEAN_TAG = "boolean";
  const BYTE_TAG = "byte";
  const SHORT_TAG = "short";
  const INT_TAG = "integer";
  const LONG_TAG = "long";
  const BINARY_TAG = "binary";
  const STRING_TAG = "string";
  const TIMESTAMP_TAG = "timestamp";
  const UUID_TAG = "uuid";
  const UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;

  const PRELUDE_MEMBER_LENGTH = 4;
  const PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
  const CHECKSUM_LENGTH = 4;
  const MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
  function splitMessage({
    byteLength,
    byteOffset,
    buffer
  }) {
    if (byteLength < MINIMUM_MESSAGE_LENGTH) {
      throw new Error("Provided message too short to accommodate event stream message overhead");
    }
    const view = new DataView(buffer, byteOffset, byteLength);
    const messageLength = view.getUint32(0, false);
    if (byteLength !== messageLength) {
      throw new Error("Reported message length does not match received message length");
    }
    const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);
    const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);
    const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);
    const checksummer = new buildExports$1.Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));
    if (expectedPreludeChecksum !== checksummer.digest()) {
      throw new Error(`The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`);
    }
    checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));
    if (expectedMessageChecksum !== checksummer.digest()) {
      throw new Error(`The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`);
    }
    return {
      headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),
      body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))
    };
  }

  class EventStreamCodec {
    constructor(toUtf8, fromUtf8) {
      this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);
      this.messageBuffer = [];
      this.isEndOfStream = false;
    }
    feed(message) {
      this.messageBuffer.push(this.decode(message));
    }
    endOfStream() {
      this.isEndOfStream = true;
    }
    getMessage() {
      const message = this.messageBuffer.pop();
      const isEndOfStream = this.isEndOfStream;
      return {
        getMessage() {
          return message;
        },
        isEndOfStream() {
          return isEndOfStream;
        }
      };
    }
    getAvailableMessages() {
      const messages = this.messageBuffer;
      this.messageBuffer = [];
      const isEndOfStream = this.isEndOfStream;
      return {
        getMessages() {
          return messages;
        },
        isEndOfStream() {
          return isEndOfStream;
        }
      };
    }
    encode({
      headers: rawHeaders,
      body
    }) {
      const headers = this.headerMarshaller.format(rawHeaders);
      const length = headers.byteLength + body.byteLength + 16;
      const out = new Uint8Array(length);
      const view = new DataView(out.buffer, out.byteOffset, out.byteLength);
      const checksum = new buildExports$1.Crc32();
      view.setUint32(0, length, false);
      view.setUint32(4, headers.byteLength, false);
      view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
      out.set(headers, 12);
      out.set(body, headers.byteLength + 12);
      view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
      return out;
    }
    decode(message) {
      const {
        headers,
        body
      } = splitMessage(message);
      return {
        headers: this.headerMarshaller.parse(headers),
        body
      };
    }
    formatHeaders(rawHeaders) {
      return this.headerMarshaller.format(rawHeaders);
    }
  }

  class MessageDecoderStream {
    constructor(options) {
      this.options = options;
    }
    [Symbol.asyncIterator]() {
      return this.asyncIterator();
    }
    async *asyncIterator() {
      for await (const bytes of this.options.inputStream) {
        const decoded = this.options.decoder.decode(bytes);
        yield decoded;
      }
    }
  }

  class MessageEncoderStream {
    constructor(options) {
      this.options = options;
    }
    [Symbol.asyncIterator]() {
      return this.asyncIterator();
    }
    async *asyncIterator() {
      for await (const msg of this.options.messageStream) {
        const encoded = this.options.encoder.encode(msg);
        yield encoded;
      }
      if (this.options.includeEndFrame) {
        yield new Uint8Array(0);
      }
    }
  }

  class SmithyMessageDecoderStream {
    constructor(options) {
      this.options = options;
    }
    [Symbol.asyncIterator]() {
      return this.asyncIterator();
    }
    async *asyncIterator() {
      for await (const message of this.options.messageStream) {
        const deserialized = await this.options.deserializer(message);
        if (deserialized === undefined) continue;
        yield deserialized;
      }
    }
  }

  class SmithyMessageEncoderStream {
    constructor(options) {
      this.options = options;
    }
    [Symbol.asyncIterator]() {
      return this.asyncIterator();
    }
    async *asyncIterator() {
      for await (const chunk of this.options.inputStream) {
        const payloadBuf = this.options.serializer(chunk);
        yield payloadBuf;
      }
    }
  }

  const normalizeProvider = input => {
    if (typeof input === "function") return input;
    const promisified = Promise.resolve(input);
    return () => promisified;
  };

  const fromUtf8 = input => new TextEncoder().encode(input);

  const toUint8Array = data => {
    if (typeof data === "string") {
      return fromUtf8(data);
    }
    if (ArrayBuffer.isView(data)) {
      return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }
    return new Uint8Array(data);
  };

  const toUtf8 = input => new TextDecoder("utf-8").decode(input);

  const ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
  const CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
  const AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
  const SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
  const EXPIRES_QUERY_PARAM = "X-Amz-Expires";
  const SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
  const TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
  const AUTH_HEADER = "authorization";
  const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
  const DATE_HEADER = "date";
  const GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];
  const SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
  const SHA256_HEADER = "x-amz-content-sha256";
  const TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
  const ALWAYS_UNSIGNABLE_HEADERS = {
    authorization: true,
    "cache-control": true,
    connection: true,
    expect: true,
    from: true,
    "keep-alive": true,
    "max-forwards": true,
    pragma: true,
    referer: true,
    te: true,
    trailer: true,
    "transfer-encoding": true,
    upgrade: true,
    "user-agent": true,
    "x-amzn-trace-id": true
  };
  const PROXY_HEADER_PATTERN = /^proxy-/;
  const SEC_HEADER_PATTERN = /^sec-/;
  const ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
  const EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
  const UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
  const MAX_CACHE_SIZE = 50;
  const KEY_TYPE_IDENTIFIER = "aws4_request";
  const MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;

  const signingKeyCache = {};
  const cacheQueue = [];
  const createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`;
  const getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {
    const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
    const cacheKey = `${shortDate}:${region}:${service}:${toHex(credsHash)}:${credentials.sessionToken}`;
    if (cacheKey in signingKeyCache) {
      return signingKeyCache[cacheKey];
    }
    cacheQueue.push(cacheKey);
    while (cacheQueue.length > MAX_CACHE_SIZE) {
      delete signingKeyCache[cacheQueue.shift()];
    }
    let key = `AWS4${credentials.secretAccessKey}`;
    for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {
      key = await hmac(sha256Constructor, key, signable);
    }
    return signingKeyCache[cacheKey] = key;
  };
  const hmac = (ctor, secret, data) => {
    const hash = new ctor(secret);
    hash.update(toUint8Array(data));
    return hash.digest();
  };

  const getCanonicalHeaders = ({
    headers
  }, unsignableHeaders, signableHeaders) => {
    const canonical = {};
    for (const headerName of Object.keys(headers).sort()) {
      if (headers[headerName] == undefined) {
        continue;
      }
      const canonicalHeaderName = headerName.toLowerCase();
      if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS || unsignableHeaders?.has(canonicalHeaderName) || PROXY_HEADER_PATTERN.test(canonicalHeaderName) || SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
        if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
          continue;
        }
      }
      canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
    }
    return canonical;
  };

  const escapeUri = uri => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
  const hexEncode = c => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;

  const getCanonicalQuery = ({
    query = {}
  }) => {
    const keys = [];
    const serialized = {};
    for (const key of Object.keys(query).sort()) {
      if (key.toLowerCase() === SIGNATURE_HEADER) {
        continue;
      }
      keys.push(key);
      const value = query[key];
      if (typeof value === "string") {
        serialized[key] = `${escapeUri(key)}=${escapeUri(value)}`;
      } else if (Array.isArray(value)) {
        serialized[key] = value.slice(0).reduce((encoded, value) => encoded.concat([`${escapeUri(key)}=${escapeUri(value)}`]), []).sort().join("&");
      }
    }
    return keys.map(key => serialized[key]).filter(serialized => serialized).join("&");
  };

  const isArrayBuffer = arg => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";

  const getPayloadHash = async ({
    headers,
    body
  }, hashConstructor) => {
    for (const headerName of Object.keys(headers)) {
      if (headerName.toLowerCase() === SHA256_HEADER) {
        return headers[headerName];
      }
    }
    if (body == undefined) {
      return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
    } else if (typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {
      const hashCtor = new hashConstructor();
      hashCtor.update(toUint8Array(body));
      return toHex(await hashCtor.digest());
    }
    return UNSIGNED_PAYLOAD;
  };

  const hasHeader$1 = (soughtHeader, headers) => {
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)) {
      if (soughtHeader === headerName.toLowerCase()) {
        return true;
      }
    }
    return false;
  };

  const cloneRequest = ({
    headers,
    query,
    ...rest
  }) => ({
    ...rest,
    headers: {
      ...headers
    },
    query: query ? cloneQuery(query) : undefined
  });
  const cloneQuery = query => Object.keys(query).reduce((carry, paramName) => {
    const param = query[paramName];
    return {
      ...carry,
      [paramName]: Array.isArray(param) ? [...param] : param
    };
  }, {});

  const moveHeadersToQuery = (request, options = {}) => {
    const {
      headers,
      query = {}
    } = typeof request.clone === "function" ? request.clone() : cloneRequest(request);
    for (const name of Object.keys(headers)) {
      const lname = name.toLowerCase();
      if (lname.slice(0, 6) === "x-amz-" && !options.unhoistableHeaders?.has(lname)) {
        query[name] = headers[name];
        delete headers[name];
      }
    }
    return {
      ...request,
      headers,
      query
    };
  };

  const prepareRequest = request => {
    request = typeof request.clone === "function" ? request.clone() : cloneRequest(request);
    for (const headerName of Object.keys(request.headers)) {
      if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
        delete request.headers[headerName];
      }
    }
    return request;
  };

  const iso8601 = time => toDate(time).toISOString().replace(/\.\d{3}Z$/, "Z");
  const toDate = time => {
    if (typeof time === "number") {
      return new Date(time * 1000);
    }
    if (typeof time === "string") {
      if (Number(time)) {
        return new Date(Number(time) * 1000);
      }
      return new Date(time);
    }
    return time;
  };

  class SignatureV4 {
    constructor({
      applyChecksum,
      credentials,
      region,
      service,
      sha256,
      uriEscapePath = true
    }) {
      this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);
      this.service = service;
      this.sha256 = sha256;
      this.uriEscapePath = uriEscapePath;
      this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
      this.regionProvider = normalizeProvider(region);
      this.credentialProvider = normalizeProvider(credentials);
    }
    async presign(originalRequest, options = {}) {
      const {
        signingDate = new Date(),
        expiresIn = 3600,
        unsignableHeaders,
        unhoistableHeaders,
        signableHeaders,
        signingRegion,
        signingService
      } = options;
      const credentials = await this.credentialProvider();
      this.validateResolvedCredentials(credentials);
      const region = signingRegion ?? (await this.regionProvider());
      const {
        longDate,
        shortDate
      } = formatDate(signingDate);
      if (expiresIn > MAX_PRESIGNED_TTL) {
        return Promise.reject("Signature version 4 presigned URLs" + " must have an expiration date less than one week in" + " the future");
      }
      const scope = createScope(shortDate, region, signingService ?? this.service);
      const request = moveHeadersToQuery(prepareRequest(originalRequest), {
        unhoistableHeaders
      });
      if (credentials.sessionToken) {
        request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;
      }
      request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;
      request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
      request.query[AMZ_DATE_QUERY_PARAM] = longDate;
      request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
      const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
      request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
      request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256)));
      return request;
    }
    async sign(toSign, options) {
      if (typeof toSign === "string") {
        return this.signString(toSign, options);
      } else if (toSign.headers && toSign.payload) {
        return this.signEvent(toSign, options);
      } else if (toSign.message) {
        return this.signMessage(toSign, options);
      } else {
        return this.signRequest(toSign, options);
      }
    }
    async signEvent({
      headers,
      payload
    }, {
      signingDate = new Date(),
      priorSignature,
      signingRegion,
      signingService
    }) {
      const region = signingRegion ?? (await this.regionProvider());
      const {
        shortDate,
        longDate
      } = formatDate(signingDate);
      const scope = createScope(shortDate, region, signingService ?? this.service);
      const hashedPayload = await getPayloadHash({
        headers: {},
        body: payload
      }, this.sha256);
      const hash = new this.sha256();
      hash.update(headers);
      const hashedHeaders = toHex(await hash.digest());
      const stringToSign = [EVENT_ALGORITHM_IDENTIFIER, longDate, scope, priorSignature, hashedHeaders, hashedPayload].join("\n");
      return this.signString(stringToSign, {
        signingDate,
        signingRegion: region,
        signingService
      });
    }
    async signMessage(signableMessage, {
      signingDate = new Date(),
      signingRegion,
      signingService
    }) {
      const promise = this.signEvent({
        headers: this.headerMarshaller.format(signableMessage.message.headers),
        payload: signableMessage.message.body
      }, {
        signingDate,
        signingRegion,
        signingService,
        priorSignature: signableMessage.priorSignature
      });
      return promise.then(signature => {
        return {
          message: signableMessage.message,
          signature
        };
      });
    }
    async signString(stringToSign, {
      signingDate = new Date(),
      signingRegion,
      signingService
    } = {}) {
      const credentials = await this.credentialProvider();
      this.validateResolvedCredentials(credentials);
      const region = signingRegion ?? (await this.regionProvider());
      const {
        shortDate
      } = formatDate(signingDate);
      const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
      hash.update(toUint8Array(stringToSign));
      return toHex(await hash.digest());
    }
    async signRequest(requestToSign, {
      signingDate = new Date(),
      signableHeaders,
      unsignableHeaders,
      signingRegion,
      signingService
    } = {}) {
      const credentials = await this.credentialProvider();
      this.validateResolvedCredentials(credentials);
      const region = signingRegion ?? (await this.regionProvider());
      const request = prepareRequest(requestToSign);
      const {
        longDate,
        shortDate
      } = formatDate(signingDate);
      const scope = createScope(shortDate, region, signingService ?? this.service);
      request.headers[AMZ_DATE_HEADER] = longDate;
      if (credentials.sessionToken) {
        request.headers[TOKEN_HEADER] = credentials.sessionToken;
      }
      const payloadHash = await getPayloadHash(request, this.sha256);
      if (!hasHeader$1(SHA256_HEADER, request.headers) && this.applyChecksum) {
        request.headers[SHA256_HEADER] = payloadHash;
      }
      const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
      const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
      request.headers[AUTH_HEADER] = `${ALGORITHM_IDENTIFIER} ` + `Credential=${credentials.accessKeyId}/${scope}, ` + `SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, ` + `Signature=${signature}`;
      return request;
    }
    createCanonicalRequest(request, canonicalHeaders, payloadHash) {
      const sortedHeaders = Object.keys(canonicalHeaders).sort();
      return `${request.method}
${this.getCanonicalPath(request)}
${getCanonicalQuery(request)}
${sortedHeaders.map(name => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
    }
    async createStringToSign(longDate, credentialScope, canonicalRequest) {
      const hash = new this.sha256();
      hash.update(toUint8Array(canonicalRequest));
      const hashedRequest = await hash.digest();
      return `${ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${toHex(hashedRequest)}`;
    }
    getCanonicalPath({
      path
    }) {
      if (this.uriEscapePath) {
        const normalizedPathSegments = [];
        for (const pathSegment of path.split("/")) {
          if (pathSegment?.length === 0) continue;
          if (pathSegment === ".") continue;
          if (pathSegment === "..") {
            normalizedPathSegments.pop();
          } else {
            normalizedPathSegments.push(pathSegment);
          }
        }
        const normalizedPath = `${path?.startsWith("/") ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && path?.endsWith("/") ? "/" : ""}`;
        const doubleEncoded = encodeURIComponent(normalizedPath);
        return doubleEncoded.replace(/%2F/g, "/");
      }
      return path;
    }
    async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
      const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
      const hash = new this.sha256(await keyPromise);
      hash.update(toUint8Array(stringToSign));
      return toHex(await hash.digest());
    }
    getSigningKey(credentials, region, shortDate, service) {
      return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);
    }
    validateResolvedCredentials(credentials) {
      if (typeof credentials !== "object" || typeof credentials.accessKeyId !== "string" || typeof credentials.secretAccessKey !== "string") {
        throw new Error("Resolved credential object is not valid");
      }
    }
  }
  const formatDate = now => {
    const longDate = iso8601(now).replace(/[\-:]/g, "");
    return {
      longDate,
      shortDate: longDate.slice(0, 8)
    };
  };
  const getCanonicalHeaderList = headers => Object.keys(headers).sort().join(";");

  const CREDENTIAL_EXPIRE_WINDOW = 300000;
  const resolveAwsAuthConfig = input => {
    const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
    const {
      signingEscapePath = true,
      systemClockOffset = input.systemClockOffset || 0,
      sha256
    } = input;
    let signer;
    if (input.signer) {
      signer = normalizeProvider(input.signer);
    } else if (input.regionInfoProvider) {
      signer = () => normalizeProvider(input.region)().then(async region => [(await input.regionInfoProvider(region, {
        useFipsEndpoint: await input.useFipsEndpoint(),
        useDualstackEndpoint: await input.useDualstackEndpoint()
      })) || {}, region]).then(([regionInfo, region]) => {
        const {
          signingRegion,
          signingService
        } = regionInfo;
        input.signingRegion = input.signingRegion || signingRegion || region;
        input.signingName = input.signingName || signingService || input.serviceId;
        const params = {
          ...input,
          credentials: normalizedCreds,
          region: input.signingRegion,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        };
        const SignerCtor = input.signerConstructor || SignatureV4;
        return new SignerCtor(params);
      });
    } else {
      signer = async authScheme => {
        authScheme = Object.assign({}, {
          name: "sigv4",
          signingName: input.signingName || input.defaultSigningName,
          signingRegion: await normalizeProvider(input.region)(),
          properties: {}
        }, authScheme);
        const signingRegion = authScheme.signingRegion;
        const signingService = authScheme.signingName;
        input.signingRegion = input.signingRegion || signingRegion;
        input.signingName = input.signingName || signingService || input.serviceId;
        const params = {
          ...input,
          credentials: normalizedCreds,
          region: input.signingRegion,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        };
        const SignerCtor = input.signerConstructor || SignatureV4;
        return new SignerCtor(params);
      };
    }
    return {
      ...input,
      systemClockOffset,
      signingEscapePath,
      credentials: normalizedCreds,
      signer
    };
  };
  const normalizeCredentialProvider = credentials => {
    if (typeof credentials === "function") {
      return memoize(credentials, credentials => credentials.expiration !== undefined && credentials.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, credentials => credentials.expiration !== undefined);
    }
    return normalizeProvider(credentials);
  };

  const getSkewCorrectedDate = systemClockOffset => new Date(Date.now() + systemClockOffset);

  const isClockSkewed = (clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 300000;

  const getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
    const clockTimeInMs = Date.parse(clockTime);
    if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {
      return clockTimeInMs - Date.now();
    }
    return currentSystemClockOffset;
  };

  const awsAuthMiddleware = options => (next, context) => async function (args) {
    if (!HttpRequest.isInstance(args.request)) return next(args);
    const authScheme = context.endpointV2?.properties?.authSchemes?.[0];
    const multiRegionOverride = authScheme?.name === "sigv4a" ? authScheme?.signingRegionSet?.join(",") : undefined;
    const signer = await options.signer(authScheme);
    const output = await next({
      ...args,
      request: await signer.sign(args.request, {
        signingDate: getSkewCorrectedDate(options.systemClockOffset),
        signingRegion: multiRegionOverride || context["signing_region"],
        signingService: context["signing_service"]
      })
    }).catch(error => {
      const serverTime = error.ServerTime ?? getDateHeader(error.$response);
      if (serverTime) {
        options.systemClockOffset = getUpdatedSystemClockOffset(serverTime, options.systemClockOffset);
      }
      throw error;
    });
    const dateHeader = getDateHeader(output.response);
    if (dateHeader) {
      options.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, options.systemClockOffset);
    }
    return output;
  };
  const getDateHeader = response => HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : undefined;
  const awsAuthMiddlewareOptions = {
    name: "awsAuthMiddleware",
    tags: ["SIGNATURE", "AWSAUTH"],
    relation: "after",
    toMiddleware: "retryMiddleware",
    override: true
  };
  const getAwsAuthPlugin = options => ({
    applyToStack: clientStack => {
      clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);
    }
  });

  function resolveUserAgentConfig(input) {
    return {
      ...input,
      customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent
    };
  }

  var partitions = [
  	{
  		id: "aws",
  		outputs: {
  			dnsSuffix: "amazonaws.com",
  			dualStackDnsSuffix: "api.aws",
  			name: "aws",
  			supportsDualStack: true,
  			supportsFIPS: true
  		},
  		regionRegex: "^(us|eu|ap|sa|ca|me|af|il)\\-\\w+\\-\\d+$",
  		regions: {
  			"af-south-1": {
  				description: "Africa (Cape Town)"
  			},
  			"ap-east-1": {
  				description: "Asia Pacific (Hong Kong)"
  			},
  			"ap-northeast-1": {
  				description: "Asia Pacific (Tokyo)"
  			},
  			"ap-northeast-2": {
  				description: "Asia Pacific (Seoul)"
  			},
  			"ap-northeast-3": {
  				description: "Asia Pacific (Osaka)"
  			},
  			"ap-south-1": {
  				description: "Asia Pacific (Mumbai)"
  			},
  			"ap-south-2": {
  				description: "Asia Pacific (Hyderabad)"
  			},
  			"ap-southeast-1": {
  				description: "Asia Pacific (Singapore)"
  			},
  			"ap-southeast-2": {
  				description: "Asia Pacific (Sydney)"
  			},
  			"ap-southeast-3": {
  				description: "Asia Pacific (Jakarta)"
  			},
  			"ap-southeast-4": {
  				description: "Asia Pacific (Melbourne)"
  			},
  			"aws-global": {
  				description: "AWS Standard global region"
  			},
  			"ca-central-1": {
  				description: "Canada (Central)"
  			},
  			"eu-central-1": {
  				description: "Europe (Frankfurt)"
  			},
  			"eu-central-2": {
  				description: "Europe (Zurich)"
  			},
  			"eu-north-1": {
  				description: "Europe (Stockholm)"
  			},
  			"eu-south-1": {
  				description: "Europe (Milan)"
  			},
  			"eu-south-2": {
  				description: "Europe (Spain)"
  			},
  			"eu-west-1": {
  				description: "Europe (Ireland)"
  			},
  			"eu-west-2": {
  				description: "Europe (London)"
  			},
  			"eu-west-3": {
  				description: "Europe (Paris)"
  			},
  			"il-central-1": {
  				description: "Israel (Tel Aviv)"
  			},
  			"me-central-1": {
  				description: "Middle East (UAE)"
  			},
  			"me-south-1": {
  				description: "Middle East (Bahrain)"
  			},
  			"sa-east-1": {
  				description: "South America (Sao Paulo)"
  			},
  			"us-east-1": {
  				description: "US East (N. Virginia)"
  			},
  			"us-east-2": {
  				description: "US East (Ohio)"
  			},
  			"us-west-1": {
  				description: "US West (N. California)"
  			},
  			"us-west-2": {
  				description: "US West (Oregon)"
  			}
  		}
  	},
  	{
  		id: "aws-cn",
  		outputs: {
  			dnsSuffix: "amazonaws.com.cn",
  			dualStackDnsSuffix: "api.amazonwebservices.com.cn",
  			name: "aws-cn",
  			supportsDualStack: true,
  			supportsFIPS: true
  		},
  		regionRegex: "^cn\\-\\w+\\-\\d+$",
  		regions: {
  			"aws-cn-global": {
  				description: "AWS China global region"
  			},
  			"cn-north-1": {
  				description: "China (Beijing)"
  			},
  			"cn-northwest-1": {
  				description: "China (Ningxia)"
  			}
  		}
  	},
  	{
  		id: "aws-us-gov",
  		outputs: {
  			dnsSuffix: "amazonaws.com",
  			dualStackDnsSuffix: "api.aws",
  			name: "aws-us-gov",
  			supportsDualStack: true,
  			supportsFIPS: true
  		},
  		regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
  		regions: {
  			"aws-us-gov-global": {
  				description: "AWS GovCloud (US) global region"
  			},
  			"us-gov-east-1": {
  				description: "AWS GovCloud (US-East)"
  			},
  			"us-gov-west-1": {
  				description: "AWS GovCloud (US-West)"
  			}
  		}
  	},
  	{
  		id: "aws-iso",
  		outputs: {
  			dnsSuffix: "c2s.ic.gov",
  			dualStackDnsSuffix: "c2s.ic.gov",
  			name: "aws-iso",
  			supportsDualStack: false,
  			supportsFIPS: true
  		},
  		regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
  		regions: {
  			"aws-iso-global": {
  				description: "AWS ISO (US) global region"
  			},
  			"us-iso-east-1": {
  				description: "US ISO East"
  			},
  			"us-iso-west-1": {
  				description: "US ISO WEST"
  			}
  		}
  	},
  	{
  		id: "aws-iso-b",
  		outputs: {
  			dnsSuffix: "sc2s.sgov.gov",
  			dualStackDnsSuffix: "sc2s.sgov.gov",
  			name: "aws-iso-b",
  			supportsDualStack: false,
  			supportsFIPS: true
  		},
  		regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
  		regions: {
  			"aws-iso-b-global": {
  				description: "AWS ISOB (US) global region"
  			},
  			"us-isob-east-1": {
  				description: "US ISOB East (Ohio)"
  			}
  		}
  	},
  	{
  		id: "aws-iso-e",
  		outputs: {
  			dnsSuffix: "cloud.adc-e.uk",
  			dualStackDnsSuffix: "cloud.adc-e.uk",
  			name: "aws-iso-e",
  			supportsDualStack: false,
  			supportsFIPS: true
  		},
  		regionRegex: "^eu\\-isoe\\-\\w+\\-\\d+$",
  		regions: {
  		}
  	},
  	{
  		id: "aws-iso-f",
  		outputs: {
  			dnsSuffix: "csp.hci.ic.gov",
  			dualStackDnsSuffix: "csp.hci.ic.gov",
  			name: "aws-iso-f",
  			supportsDualStack: false,
  			supportsFIPS: true
  		},
  		regionRegex: "^us\\-isof\\-\\w+\\-\\d+$",
  		regions: {
  		}
  	}
  ];
  var version$1 = "1.1";
  var partitionsInfo = {
  	partitions: partitions,
  	version: version$1
  };

  let selectedPartitionsInfo = partitionsInfo;
  let selectedUserAgentPrefix = "";
  const partition = value => {
    const {
      partitions
    } = selectedPartitionsInfo;
    for (const partition of partitions) {
      const {
        regions,
        outputs
      } = partition;
      for (const [region, regionData] of Object.entries(regions)) {
        if (region === value) {
          return {
            ...outputs,
            ...regionData
          };
        }
      }
    }
    for (const partition of partitions) {
      const {
        regionRegex,
        outputs
      } = partition;
      if (new RegExp(regionRegex).test(value)) {
        return {
          ...outputs
        };
      }
    }
    const DEFAULT_PARTITION = partitions.find(partition => partition.id === "aws");
    if (!DEFAULT_PARTITION) {
      throw new Error("Provided region was not found in the partition array or regex," + " and default partition with id 'aws' doesn't exist.");
    }
    return {
      ...DEFAULT_PARTITION.outputs
    };
  };
  const setPartitionInfo = (partitionsInfo, userAgentPrefix = "") => {
    selectedPartitionsInfo = partitionsInfo;
    selectedUserAgentPrefix = userAgentPrefix;
  };
  const useDefaultPartitionInfo = () => {
    setPartitionInfo(partitionsInfo, "");
  };
  const getUserAgentPrefix = () => selectedUserAgentPrefix;

  const IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`);
  const isIpAddress = value => IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]");

  const debugId = "endpoints";

  function toDebugString(input) {
    if (typeof input !== "object" || input == null) {
      return input;
    }
    if ("ref" in input) {
      return `$${toDebugString(input.ref)}`;
    }
    if ("fn" in input) {
      return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
    }
    return JSON.stringify(input, null, 2);
  }

  class EndpointError extends Error {
    constructor(message) {
      super(message);
      this.name = "EndpointError";
    }
  }

  const VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
  const isValidHostLabel = (value, allowSubDomains = false) => {
    if (!allowSubDomains) {
      return VALID_HOST_LABEL_REGEX.test(value);
    }
    const labels = value.split(".");
    for (const label of labels) {
      if (!isValidHostLabel(label)) {
        return false;
      }
    }
    return true;
  };

  const isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {
    if (allowSubDomains) {
      for (const label of value.split(".")) {
        if (!isVirtualHostableS3Bucket(label)) {
          return false;
        }
      }
      return true;
    }
    if (!isValidHostLabel(value)) {
      return false;
    }
    if (value.length < 3 || value.length > 63) {
      return false;
    }
    if (value !== value.toLowerCase()) {
      return false;
    }
    if (isIpAddress(value)) {
      return false;
    }
    return true;
  };

  const parseArn = value => {
    const segments = value.split(":");
    if (segments.length < 6) return null;
    const [arn, partition, service, region, accountId, ...resourceId] = segments;
    if (arn !== "arn" || partition === "" || service === "" || resourceId[0] === "") return null;
    return {
      partition,
      service,
      region,
      accountId,
      resourceId: resourceId[0].includes("/") ? resourceId[0].split("/") : resourceId
    };
  };

  var index = /*#__PURE__*/Object.freeze({
    __proto__: null,
    getUserAgentPrefix: getUserAgentPrefix,
    isVirtualHostableS3Bucket: isVirtualHostableS3Bucket,
    parseArn: parseArn,
    partition: partition,
    setPartitionInfo: setPartitionInfo,
    useDefaultPartitionInfo: useDefaultPartitionInfo
  });

  const booleanEquals = (value1, value2) => value1 === value2;

  const getAttrPathList = path => {
    const parts = path.split(".");
    const pathList = [];
    for (const part of parts) {
      const squareBracketIndex = part.indexOf("[");
      if (squareBracketIndex !== -1) {
        if (part.indexOf("]") !== part.length - 1) {
          throw new EndpointError(`Path: '${path}' does not end with ']'`);
        }
        const arrayIndex = part.slice(squareBracketIndex + 1, -1);
        if (Number.isNaN(parseInt(arrayIndex))) {
          throw new EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
        }
        if (squareBracketIndex !== 0) {
          pathList.push(part.slice(0, squareBracketIndex));
        }
        pathList.push(arrayIndex);
      } else {
        pathList.push(part);
      }
    }
    return pathList;
  };

  const getAttr = (value, path) => getAttrPathList(path).reduce((acc, index) => {
    if (typeof acc !== "object") {
      throw new EndpointError(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
    } else if (Array.isArray(acc)) {
      return acc[parseInt(index)];
    }
    return acc[index];
  }, value);

  const isSet = value => value != null;

  const not = value => !value;

  var HostAddressType;
  (function (HostAddressType) {
    HostAddressType["AAAA"] = "AAAA";
    HostAddressType["A"] = "A";
  })(HostAddressType || (HostAddressType = {}));

  const DEFAULT_PORTS = {
    [EndpointURLScheme.HTTP]: 80,
    [EndpointURLScheme.HTTPS]: 443
  };
  const parseURL = value => {
    const whatwgURL = (() => {
      try {
        if (value instanceof URL) {
          return value;
        }
        if (typeof value === "object" && "hostname" in value) {
          const {
            hostname,
            port,
            protocol = "",
            path = "",
            query = {}
          } = value;
          const url = new URL(`${protocol}//${hostname}${port ? `:${port}` : ""}${path}`);
          url.search = Object.entries(query).map(([k, v]) => `${k}=${v}`).join("&");
          return url;
        }
        return new URL(value);
      } catch (error) {
        return null;
      }
    })();
    if (!whatwgURL) {
      console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
      return null;
    }
    const urlString = whatwgURL.href;
    const {
      host,
      hostname,
      pathname,
      protocol,
      search
    } = whatwgURL;
    if (search) {
      return null;
    }
    const scheme = protocol.slice(0, -1);
    if (!Object.values(EndpointURLScheme).includes(scheme)) {
      return null;
    }
    const isIp = isIpAddress(hostname);
    const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
    const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
    return {
      scheme,
      authority,
      path: pathname,
      normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
      isIp
    };
  };

  const stringEquals = (value1, value2) => value1 === value2;

  const substring = (input, start, stop, reverse) => {
    if (start >= stop || input.length < stop) {
      return null;
    }
    if (!reverse) {
      return input.substring(start, stop);
    }
    return input.substring(input.length - stop, input.length - start);
  };

  const uriEncode = value => encodeURIComponent(value).replace(/[!*'()]/g, c => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);

  var lib = /*#__PURE__*/Object.freeze({
    __proto__: null,
    aws: index,
    booleanEquals: booleanEquals,
    getAttr: getAttr,
    isSet: isSet,
    isValidHostLabel: isValidHostLabel,
    not: not,
    parseURL: parseURL,
    stringEquals: stringEquals,
    substring: substring,
    uriEncode: uriEncode
  });

  const evaluateTemplate = (template, options) => {
    const evaluatedTemplateArr = [];
    const templateContext = {
      ...options.endpointParams,
      ...options.referenceRecord
    };
    let currentIndex = 0;
    while (currentIndex < template.length) {
      const openingBraceIndex = template.indexOf("{", currentIndex);
      if (openingBraceIndex === -1) {
        evaluatedTemplateArr.push(template.slice(currentIndex));
        break;
      }
      evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
      const closingBraceIndex = template.indexOf("}", openingBraceIndex);
      if (closingBraceIndex === -1) {
        evaluatedTemplateArr.push(template.slice(openingBraceIndex));
        break;
      }
      if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
        evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
        currentIndex = closingBraceIndex + 2;
      }
      const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
      if (parameterName.includes("#")) {
        const [refName, attrName] = parameterName.split("#");
        evaluatedTemplateArr.push(getAttr(templateContext[refName], attrName));
      } else {
        evaluatedTemplateArr.push(templateContext[parameterName]);
      }
      currentIndex = closingBraceIndex + 1;
    }
    return evaluatedTemplateArr.join("");
  };

  const getReferenceValue = ({
    ref
  }, options) => {
    const referenceRecord = {
      ...options.endpointParams,
      ...options.referenceRecord
    };
    return referenceRecord[ref];
  };

  const evaluateExpression = (obj, keyName, options) => {
    if (typeof obj === "string") {
      return evaluateTemplate(obj, options);
    } else if (obj["fn"]) {
      return callFunction(obj, options);
    } else if (obj["ref"]) {
      return getReferenceValue(obj, options);
    }
    throw new EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
  };

  const callFunction = ({
    fn,
    argv
  }, options) => {
    const evaluatedArgs = argv.map(arg => ["boolean", "number"].includes(typeof arg) ? arg : evaluateExpression(arg, "arg", options));
    return fn.split(".").reduce((acc, key) => acc[key], lib)(...evaluatedArgs);
  };

  const evaluateCondition = ({
    assign,
    ...fnArgs
  }, options) => {
    if (assign && assign in options.referenceRecord) {
      throw new EndpointError(`'${assign}' is already defined in Reference Record.`);
    }
    const value = callFunction(fnArgs, options);
    options.logger?.debug?.(debugId, `evaluateCondition: ${toDebugString(fnArgs)} = ${toDebugString(value)}`);
    return {
      result: value === "" ? true : !!value,
      ...(assign != null && {
        toAssign: {
          name: assign,
          value
        }
      })
    };
  };

  const evaluateConditions = (conditions = [], options) => {
    const conditionsReferenceRecord = {};
    for (const condition of conditions) {
      const {
        result,
        toAssign
      } = evaluateCondition(condition, {
        ...options,
        referenceRecord: {
          ...options.referenceRecord,
          ...conditionsReferenceRecord
        }
      });
      if (!result) {
        return {
          result
        };
      }
      if (toAssign) {
        conditionsReferenceRecord[toAssign.name] = toAssign.value;
        options.logger?.debug?.(debugId, `assign: ${toAssign.name} := ${toDebugString(toAssign.value)}`);
      }
    }
    return {
      result: true,
      referenceRecord: conditionsReferenceRecord
    };
  };

  const getEndpointHeaders = (headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({
    ...acc,
    [headerKey]: headerVal.map(headerValEntry => {
      const processedExpr = evaluateExpression(headerValEntry, "Header value entry", options);
      if (typeof processedExpr !== "string") {
        throw new EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);
      }
      return processedExpr;
    })
  }), {});

  const getEndpointProperty = (property, options) => {
    if (Array.isArray(property)) {
      return property.map(propertyEntry => getEndpointProperty(propertyEntry, options));
    }
    switch (typeof property) {
      case "string":
        return evaluateTemplate(property, options);
      case "object":
        if (property === null) {
          throw new EndpointError(`Unexpected endpoint property: ${property}`);
        }
        return getEndpointProperties(property, options);
      case "boolean":
        return property;
      default:
        throw new EndpointError(`Unexpected endpoint property type: ${typeof property}`);
    }
  };

  const getEndpointProperties = (properties, options) => Object.entries(properties).reduce((acc, [propertyKey, propertyVal]) => ({
    ...acc,
    [propertyKey]: getEndpointProperty(propertyVal, options)
  }), {});

  const getEndpointUrl = (endpointUrl, options) => {
    const expression = evaluateExpression(endpointUrl, "Endpoint URL", options);
    if (typeof expression === "string") {
      try {
        return new URL(expression);
      } catch (error) {
        console.error(`Failed to construct URL with ${expression}`, error);
        throw error;
      }
    }
    throw new EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);
  };

  const evaluateEndpointRule = (endpointRule, options) => {
    const {
      conditions,
      endpoint
    } = endpointRule;
    const {
      result,
      referenceRecord
    } = evaluateConditions(conditions, options);
    if (!result) {
      return;
    }
    const endpointRuleOptions = {
      ...options,
      referenceRecord: {
        ...options.referenceRecord,
        ...referenceRecord
      }
    };
    const {
      url,
      properties,
      headers
    } = endpoint;
    options.logger?.debug?.(debugId, `Resolving endpoint from template: ${toDebugString(endpoint)}`);
    return {
      ...(headers != undefined && {
        headers: getEndpointHeaders(headers, endpointRuleOptions)
      }),
      ...(properties != undefined && {
        properties: getEndpointProperties(properties, endpointRuleOptions)
      }),
      url: getEndpointUrl(url, endpointRuleOptions)
    };
  };

  const evaluateErrorRule = (errorRule, options) => {
    const {
      conditions,
      error
    } = errorRule;
    const {
      result,
      referenceRecord
    } = evaluateConditions(conditions, options);
    if (!result) {
      return;
    }
    throw new EndpointError(evaluateExpression(error, "Error", {
      ...options,
      referenceRecord: {
        ...options.referenceRecord,
        ...referenceRecord
      }
    }));
  };

  const evaluateTreeRule = (treeRule, options) => {
    const {
      conditions,
      rules
    } = treeRule;
    const {
      result,
      referenceRecord
    } = evaluateConditions(conditions, options);
    if (!result) {
      return;
    }
    return evaluateRules(rules, {
      ...options,
      referenceRecord: {
        ...options.referenceRecord,
        ...referenceRecord
      }
    });
  };

  const evaluateRules = (rules, options) => {
    for (const rule of rules) {
      if (rule.type === "endpoint") {
        const endpointOrUndefined = evaluateEndpointRule(rule, options);
        if (endpointOrUndefined) {
          return endpointOrUndefined;
        }
      } else if (rule.type === "error") {
        evaluateErrorRule(rule, options);
      } else if (rule.type === "tree") {
        const endpointOrUndefined = evaluateTreeRule(rule, options);
        if (endpointOrUndefined) {
          return endpointOrUndefined;
        }
      } else {
        throw new EndpointError(`Unknown endpoint rule: ${rule}`);
      }
    }
    throw new EndpointError(`Rules evaluation failed`);
  };

  const resolveEndpoint = (ruleSetObject, options) => {
    const {
      endpointParams,
      logger
    } = options;
    const {
      parameters,
      rules
    } = ruleSetObject;
    options.logger?.debug?.(`${debugId} Initial EndpointParams: ${toDebugString(endpointParams)}`);
    const paramsWithDefault = Object.entries(parameters).filter(([, v]) => v.default != null).map(([k, v]) => [k, v.default]);
    if (paramsWithDefault.length > 0) {
      for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
        endpointParams[paramKey] = endpointParams[paramKey] ?? paramDefaultValue;
      }
    }
    const requiredParams = Object.entries(parameters).filter(([, v]) => v.required).map(([k]) => k);
    for (const requiredParam of requiredParams) {
      if (endpointParams[requiredParam] == null) {
        throw new EndpointError(`Missing required parameter: '${requiredParam}'`);
      }
    }
    const endpoint = evaluateRules(rules, {
      endpointParams,
      logger,
      referenceRecord: {}
    });
    if (options.endpointParams?.Endpoint) {
      try {
        const givenEndpoint = new URL(options.endpointParams.Endpoint);
        const {
          protocol,
          port
        } = givenEndpoint;
        endpoint.url.protocol = protocol;
        endpoint.url.port = port;
      } catch (e) {}
    }
    options.logger?.debug?.(`${debugId} Resolved endpoint: ${toDebugString(endpoint)}`);
    return endpoint;
  };

  const USER_AGENT = "user-agent";
  const X_AMZ_USER_AGENT = "x-amz-user-agent";
  const SPACE = " ";
  const UA_NAME_SEPARATOR = "/";
  const UA_NAME_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
  const UA_VALUE_ESCAPE_REGEX = /[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g;
  const UA_ESCAPE_CHAR = "-";

  const userAgentMiddleware = options => (next, context) => async args => {
    const {
      request
    } = args;
    if (!HttpRequest.isInstance(request)) return next(args);
    const {
      headers
    } = request;
    const userAgent = context?.userAgent?.map(escapeUserAgent) || [];
    const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
    const customUserAgent = options?.customUserAgent?.map(escapeUserAgent) || [];
    const prefix = getUserAgentPrefix();
    const sdkUserAgentValue = (prefix ? [prefix] : []).concat([...defaultUserAgent, ...userAgent, ...customUserAgent]).join(SPACE);
    const normalUAValue = [...defaultUserAgent.filter(section => section.startsWith("aws-sdk-")), ...customUserAgent].join(SPACE);
    if (options.runtime !== "browser") {
      if (normalUAValue) {
        headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT] ? `${headers[USER_AGENT]} ${normalUAValue}` : normalUAValue;
      }
      headers[USER_AGENT] = sdkUserAgentValue;
    } else {
      headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;
    }
    return next({
      ...args,
      request
    });
  };
  const escapeUserAgent = userAgentPair => {
    const name = userAgentPair[0].split(UA_NAME_SEPARATOR).map(part => part.replace(UA_NAME_ESCAPE_REGEX, UA_ESCAPE_CHAR)).join(UA_NAME_SEPARATOR);
    const version = userAgentPair[1]?.replace(UA_VALUE_ESCAPE_REGEX, UA_ESCAPE_CHAR);
    const prefixSeparatorIndex = name.indexOf(UA_NAME_SEPARATOR);
    const prefix = name.substring(0, prefixSeparatorIndex);
    let uaName = name.substring(prefixSeparatorIndex + 1);
    if (prefix === "api") {
      uaName = uaName.toLowerCase();
    }
    return [prefix, uaName, version].filter(item => item && item.length > 0).reduce((acc, item, index) => {
      switch (index) {
        case 0:
          return item;
        case 1:
          return `${acc}/${item}`;
        default:
          return `${acc}#${item}`;
      }
    }, "");
  };
  const getUserAgentMiddlewareOptions = {
    name: "getUserAgentMiddleware",
    step: "build",
    priority: "low",
    tags: ["SET_USER_AGENT", "USER_AGENT"],
    override: true
  };
  const getUserAgentPlugin = config => ({
    applyToStack: clientStack => {
      clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
    }
  });

  var SelectorType;
  (function (SelectorType) {
    SelectorType["ENV"] = "env";
    SelectorType["CONFIG"] = "shared config entry";
  })(SelectorType || (SelectorType = {}));

  const DEFAULT_USE_DUALSTACK_ENDPOINT = false;

  const DEFAULT_USE_FIPS_ENDPOINT = false;

  const isFipsRegion = region => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));

  const getRealRegion = region => isFipsRegion(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region;

  const resolveRegionConfig = input => {
    const {
      region,
      useFipsEndpoint
    } = input;
    if (!region) {
      throw new Error("Region is missing");
    }
    return {
      ...input,
      region: async () => {
        if (typeof region === "string") {
          return getRealRegion(region);
        }
        const providedRegion = await region();
        return getRealRegion(providedRegion);
      },
      useFipsEndpoint: async () => {
        const providedRegion = typeof region === "string" ? region : await region();
        if (isFipsRegion(providedRegion)) {
          return true;
        }
        return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
      }
    };
  };

  const resolveEventStreamSerdeConfig = input => ({
    ...input,
    eventStreamMarshaller: input.eventStreamSerdeProvider(input)
  });

  const CONTENT_LENGTH_HEADER = "content-length";
  function contentLengthMiddleware(bodyLengthChecker) {
    return next => async args => {
      const request = args.request;
      if (HttpRequest.isInstance(request)) {
        const {
          body,
          headers
        } = request;
        if (body && Object.keys(headers).map(str => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
          try {
            const length = bodyLengthChecker(body);
            request.headers = {
              ...request.headers,
              [CONTENT_LENGTH_HEADER]: String(length)
            };
          } catch (error) {}
        }
      }
      return next({
        ...args,
        request
      });
    };
  }
  const contentLengthMiddlewareOptions = {
    step: "build",
    tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
    name: "contentLengthMiddleware",
    override: true
  };
  const getContentLengthPlugin = options => ({
    applyToStack: clientStack => {
      clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
    }
  });

  const resolveParamsForS3 = async endpointParams => {
    const bucket = endpointParams?.Bucket || "";
    if (typeof endpointParams.Bucket === "string") {
      endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
    }
    if (isArnBucketName(bucket)) {
      if (endpointParams.ForcePathStyle === true) {
        throw new Error("Path-style addressing cannot be used with ARN buckets");
      }
    } else if (!isDnsCompatibleBucketName(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) {
      endpointParams.ForcePathStyle = true;
    }
    if (endpointParams.DisableMultiRegionAccessPoints) {
      endpointParams.disableMultiRegionAccessPoints = true;
      endpointParams.DisableMRAP = true;
    }
    return endpointParams;
  };
  const DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
  const IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
  const DOTS_PATTERN = /\.\./;
  const isDnsCompatibleBucketName = bucketName => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
  const isArnBucketName = bucketName => {
    const [arn, partition, service, region, account, typeOrId] = bucketName.split(":");
    const isArn = arn === "arn" && bucketName.split(":").length >= 6;
    const isValidArn = [arn, partition, service, account, typeOrId].filter(Boolean).length === 5;
    if (isArn && !isValidArn) {
      throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
    }
    return arn === "arn" && !!partition && !!service && !!account && !!typeOrId;
  };

  const createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {
    const configProvider = async () => {
      const configValue = config[configKey] ?? config[canonicalEndpointParamKey];
      if (typeof configValue === "function") {
        return configValue();
      }
      return configValue;
    };
    if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
      return async () => {
        const endpoint = await configProvider();
        if (endpoint && typeof endpoint === "object") {
          if ("url" in endpoint) {
            return endpoint.url.href;
          }
          if ("hostname" in endpoint) {
            const {
              protocol,
              hostname,
              port,
              path
            } = endpoint;
            return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
          }
        }
        return endpoint;
      };
    }
    return configProvider;
  };

  const getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {
    const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);
    if (typeof clientConfig.endpointProvider !== "function") {
      throw new Error("config.endpointProvider is not set.");
    }
    const endpoint = clientConfig.endpointProvider(endpointParams, context);
    return endpoint;
  };
  const resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {
    const endpointParams = {};
    const instructions = instructionsSupplier?.getEndpointParameterInstructions?.() || {};
    for (const [name, instruction] of Object.entries(instructions)) {
      switch (instruction.type) {
        case "staticContextParams":
          endpointParams[name] = instruction.value;
          break;
        case "contextParams":
          endpointParams[name] = commandInput[instruction.name];
          break;
        case "clientContextParams":
        case "builtInParams":
          endpointParams[name] = await createConfigValueProvider(instruction.name, name, clientConfig)();
          break;
        default:
          throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
      }
    }
    if (Object.keys(instructions).length === 0) {
      Object.assign(endpointParams, clientConfig);
    }
    if (String(clientConfig.serviceId).toLowerCase() === "s3") {
      await resolveParamsForS3(endpointParams);
    }
    return endpointParams;
  };

  function parseQueryString(querystring) {
    const query = {};
    querystring = querystring.replace(/^\?/, "");
    if (querystring) {
      for (const pair of querystring.split("&")) {
        let [key, value = null] = pair.split("=");
        key = decodeURIComponent(key);
        if (value) {
          value = decodeURIComponent(value);
        }
        if (!(key in query)) {
          query[key] = value;
        } else if (Array.isArray(query[key])) {
          query[key].push(value);
        } else {
          query[key] = [query[key], value];
        }
      }
    }
    return query;
  }

  const parseUrl = url => {
    if (typeof url === "string") {
      return parseUrl(new URL(url));
    }
    const {
      hostname,
      pathname,
      port,
      protocol,
      search
    } = url;
    let query;
    if (search) {
      query = parseQueryString(search);
    }
    return {
      hostname,
      port: port ? parseInt(port) : undefined,
      protocol,
      path: pathname,
      query
    };
  };

  const toEndpointV1 = endpoint => {
    if (typeof endpoint === "object") {
      if ("url" in endpoint) {
        return parseUrl(endpoint.url);
      }
      return endpoint;
    }
    return parseUrl(endpoint);
  };

  const endpointMiddleware = ({
    config,
    instructions
  }) => {
    return (next, context) => async args => {
      const endpoint = await getEndpointFromInstructions(args.input, {
        getEndpointParameterInstructions() {
          return instructions;
        }
      }, {
        ...config
      }, context);
      context.endpointV2 = endpoint;
      context.authSchemes = endpoint.properties?.authSchemes;
      const authScheme = context.authSchemes?.[0];
      if (authScheme) {
        context["signing_region"] = authScheme.signingRegion;
        context["signing_service"] = authScheme.signingName;
      }
      return next({
        ...args
      });
    };
  };

  const deserializerMiddleware = (options, deserializer) => (next, context) => async args => {
    const {
      response
    } = await next(args);
    try {
      const parsed = await deserializer(response, options);
      return {
        response,
        output: parsed
      };
    } catch (error) {
      Object.defineProperty(error, "$response", {
        value: response
      });
      if (!("$metadata" in error)) {
        const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;
        error.message += "\n  " + hint;
      }
      throw error;
    }
  };

  const serializerMiddleware = (options, serializer) => (next, context) => async args => {
    const endpoint = context.endpointV2?.url && options.urlParser ? async () => options.urlParser(context.endpointV2.url) : options.endpoint;
    if (!endpoint) {
      throw new Error("No valid endpoint provider available.");
    }
    const request = await serializer(args.input, {
      ...options,
      endpoint
    });
    return next({
      ...args,
      request
    });
  };

  const deserializerMiddlewareOption = {
    name: "deserializerMiddleware",
    step: "deserialize",
    tags: ["DESERIALIZER"],
    override: true
  };
  const serializerMiddlewareOption = {
    name: "serializerMiddleware",
    step: "serialize",
    tags: ["SERIALIZER"],
    override: true
  };
  function getSerdePlugin(config, serializer, deserializer) {
    return {
      applyToStack: commandStack => {
        commandStack.add(deserializerMiddleware(config, deserializer), deserializerMiddlewareOption);
        commandStack.add(serializerMiddleware(config, serializer), serializerMiddlewareOption);
      }
    };
  }

  const endpointMiddlewareOptions = {
    step: "serialize",
    tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
    name: "endpointV2Middleware",
    override: true,
    relation: "before",
    toMiddleware: serializerMiddlewareOption.name
  };
  const getEndpointPlugin = (config, instructions) => ({
    applyToStack: clientStack => {
      clientStack.addRelativeTo(endpointMiddleware({
        config,
        instructions
      }), endpointMiddlewareOptions);
    }
  });

  const resolveEndpointConfig = input => {
    const tls = input.tls ?? true;
    const {
      endpoint
    } = input;
    const customEndpointProvider = endpoint != null ? async () => toEndpointV1(await normalizeProvider(endpoint)()) : undefined;
    const isCustomEndpoint = !!endpoint;
    return {
      ...input,
      endpoint: customEndpointProvider,
      tls,
      isCustomEndpoint,
      useDualstackEndpoint: normalizeProvider(input.useDualstackEndpoint ?? false),
      useFipsEndpoint: normalizeProvider(input.useFipsEndpoint ?? false)
    };
  };

  var RETRY_MODES;
  (function (RETRY_MODES) {
    RETRY_MODES["STANDARD"] = "standard";
    RETRY_MODES["ADAPTIVE"] = "adaptive";
  })(RETRY_MODES || (RETRY_MODES = {}));
  const DEFAULT_MAX_ATTEMPTS = 3;
  const DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;

  const THROTTLING_ERROR_CODES = ["BandwidthLimitExceeded", "EC2ThrottledException", "LimitExceededException", "PriorRequestNotComplete", "ProvisionedThroughputExceededException", "RequestLimitExceeded", "RequestThrottled", "RequestThrottledException", "SlowDown", "ThrottledException", "Throttling", "ThrottlingException", "TooManyRequestsException", "TransactionInProgressException"];
  const TRANSIENT_ERROR_CODES = ["TimeoutError", "RequestTimeout", "RequestTimeoutException"];
  const TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
  const NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "ECONNREFUSED", "EPIPE", "ETIMEDOUT"];

  const isThrottlingError = error => error.$metadata?.httpStatusCode === 429 || THROTTLING_ERROR_CODES.includes(error.name) || error.$retryable?.throttling == true;
  const isTransientError = error => TRANSIENT_ERROR_CODES.includes(error.name) || NODEJS_TIMEOUT_ERROR_CODES.includes(error?.code || "") || TRANSIENT_ERROR_STATUS_CODES.includes(error.$metadata?.httpStatusCode || 0);
  const isServerError = error => {
    if (error.$metadata?.httpStatusCode !== undefined) {
      const statusCode = error.$metadata.httpStatusCode;
      if (500 <= statusCode && statusCode <= 599 && !isTransientError(error)) {
        return true;
      }
      return false;
    }
    return false;
  };

  class DefaultRateLimiter {
    constructor(options) {
      this.currentCapacity = 0;
      this.enabled = false;
      this.lastMaxRate = 0;
      this.measuredTxRate = 0;
      this.requestCount = 0;
      this.lastTimestamp = 0;
      this.timeWindow = 0;
      this.beta = options?.beta ?? 0.7;
      this.minCapacity = options?.minCapacity ?? 1;
      this.minFillRate = options?.minFillRate ?? 0.5;
      this.scaleConstant = options?.scaleConstant ?? 0.4;
      this.smooth = options?.smooth ?? 0.8;
      const currentTimeInSeconds = this.getCurrentTimeInSeconds();
      this.lastThrottleTime = currentTimeInSeconds;
      this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
      this.fillRate = this.minFillRate;
      this.maxCapacity = this.minCapacity;
    }
    getCurrentTimeInSeconds() {
      return Date.now() / 1000;
    }
    async getSendToken() {
      return this.acquireTokenBucket(1);
    }
    async acquireTokenBucket(amount) {
      if (!this.enabled) {
        return;
      }
      this.refillTokenBucket();
      if (amount > this.currentCapacity) {
        const delay = (amount - this.currentCapacity) / this.fillRate * 1000;
        await new Promise(resolve => setTimeout(resolve, delay));
      }
      this.currentCapacity = this.currentCapacity - amount;
    }
    refillTokenBucket() {
      const timestamp = this.getCurrentTimeInSeconds();
      if (!this.lastTimestamp) {
        this.lastTimestamp = timestamp;
        return;
      }
      const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
      this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
      this.lastTimestamp = timestamp;
    }
    updateClientSendingRate(response) {
      let calculatedRate;
      this.updateMeasuredRate();
      if (isThrottlingError(response)) {
        const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
        this.lastMaxRate = rateToUse;
        this.calculateTimeWindow();
        this.lastThrottleTime = this.getCurrentTimeInSeconds();
        calculatedRate = this.cubicThrottle(rateToUse);
        this.enableTokenBucket();
      } else {
        this.calculateTimeWindow();
        calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
      }
      const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
      this.updateTokenBucketRate(newRate);
    }
    calculateTimeWindow() {
      this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
    }
    cubicThrottle(rateToUse) {
      return this.getPrecise(rateToUse * this.beta);
    }
    cubicSuccess(timestamp) {
      return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
    }
    enableTokenBucket() {
      this.enabled = true;
    }
    updateTokenBucketRate(newRate) {
      this.refillTokenBucket();
      this.fillRate = Math.max(newRate, this.minFillRate);
      this.maxCapacity = Math.max(newRate, this.minCapacity);
      this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
    }
    updateMeasuredRate() {
      const t = this.getCurrentTimeInSeconds();
      const timeBucket = Math.floor(t * 2) / 2;
      this.requestCount++;
      if (timeBucket > this.lastTxRateBucket) {
        const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
        this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
        this.requestCount = 0;
        this.lastTxRateBucket = timeBucket;
      }
    }
    getPrecise(num) {
      return parseFloat(num.toFixed(8));
    }
  }

  const DEFAULT_RETRY_DELAY_BASE = 100;
  const MAXIMUM_RETRY_DELAY = 20 * 1000;
  const THROTTLING_RETRY_DELAY_BASE = 500;
  const INITIAL_RETRY_TOKENS = 500;
  const RETRY_COST = 5;
  const TIMEOUT_RETRY_COST = 10;
  const NO_RETRY_INCREMENT = 1;
  const INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
  const REQUEST_HEADER = "amz-sdk-request";

  const getDefaultRetryBackoffStrategy = () => {
    let delayBase = DEFAULT_RETRY_DELAY_BASE;
    const computeNextBackoffDelay = attempts => {
      return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
    };
    const setDelayBase = delay => {
      delayBase = delay;
    };
    return {
      computeNextBackoffDelay,
      setDelayBase
    };
  };

  const createDefaultRetryToken = ({
    retryDelay,
    retryCount,
    retryCost
  }) => {
    const getRetryCount = () => retryCount;
    const getRetryDelay = () => Math.min(MAXIMUM_RETRY_DELAY, retryDelay);
    const getRetryCost = () => retryCost;
    return {
      getRetryCount,
      getRetryDelay,
      getRetryCost
    };
  };

  class StandardRetryStrategy {
    constructor(maxAttempts) {
      this.maxAttempts = maxAttempts;
      this.mode = RETRY_MODES.STANDARD;
      this.capacity = INITIAL_RETRY_TOKENS;
      this.retryBackoffStrategy = getDefaultRetryBackoffStrategy();
      this.maxAttemptsProvider = typeof maxAttempts === "function" ? maxAttempts : async () => maxAttempts;
    }
    async acquireInitialRetryToken(retryTokenScope) {
      return createDefaultRetryToken({
        retryDelay: DEFAULT_RETRY_DELAY_BASE,
        retryCount: 0
      });
    }
    async refreshRetryTokenForRetry(token, errorInfo) {
      const maxAttempts = await this.getMaxAttempts();
      if (this.shouldRetry(token, errorInfo, maxAttempts)) {
        const errorType = errorInfo.errorType;
        this.retryBackoffStrategy.setDelayBase(errorType === "THROTTLING" ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE);
        const delayFromErrorType = this.retryBackoffStrategy.computeNextBackoffDelay(token.getRetryCount());
        const retryDelay = errorInfo.retryAfterHint ? Math.max(errorInfo.retryAfterHint.getTime() - Date.now() || 0, delayFromErrorType) : delayFromErrorType;
        const capacityCost = this.getCapacityCost(errorType);
        this.capacity -= capacityCost;
        return createDefaultRetryToken({
          retryDelay,
          retryCount: token.getRetryCount() + 1,
          retryCost: capacityCost
        });
      }
      throw new Error("No retry token available");
    }
    recordSuccess(token) {
      this.capacity = Math.max(INITIAL_RETRY_TOKENS, this.capacity + (token.getRetryCost() ?? NO_RETRY_INCREMENT));
    }
    getCapacity() {
      return this.capacity;
    }
    async getMaxAttempts() {
      try {
        return await this.maxAttemptsProvider();
      } catch (error) {
        console.warn(`Max attempts provider could not resolve. Using default of ${DEFAULT_MAX_ATTEMPTS}`);
        return DEFAULT_MAX_ATTEMPTS;
      }
    }
    shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
      const attempts = tokenToRenew.getRetryCount() + 1;
      return attempts < maxAttempts && this.capacity >= this.getCapacityCost(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
    }
    getCapacityCost(errorType) {
      return errorType === "TRANSIENT" ? TIMEOUT_RETRY_COST : RETRY_COST;
    }
    isRetryableError(errorType) {
      return errorType === "THROTTLING" || errorType === "TRANSIENT";
    }
  }

  class AdaptiveRetryStrategy {
    constructor(maxAttemptsProvider, options) {
      this.maxAttemptsProvider = maxAttemptsProvider;
      this.mode = RETRY_MODES.ADAPTIVE;
      const {
        rateLimiter
      } = options ?? {};
      this.rateLimiter = rateLimiter ?? new DefaultRateLimiter();
      this.standardRetryStrategy = new StandardRetryStrategy(maxAttemptsProvider);
    }
    async acquireInitialRetryToken(retryTokenScope) {
      await this.rateLimiter.getSendToken();
      return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
    }
    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
      this.rateLimiter.updateClientSendingRate(errorInfo);
      return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
    }
    recordSuccess(token) {
      this.rateLimiter.updateClientSendingRate({});
      this.standardRetryStrategy.recordSuccess(token);
    }
  }

  // Unique ID creation requires a high quality random # generator. In the browser we therefore
  // require the crypto API and do not support built-in fallback to lower quality random number
  // generators (like Math.random()).
  var getRandomValues;
  var rnds8 = new Uint8Array(16);
  function rng() {
    // lazy load so that environments that need to polyfill have a chance to do so
    if (!getRandomValues) {
      // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
      // find the complete implementation of crypto (msCrypto) on IE11.
      getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);
      if (!getRandomValues) {
        throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
      }
    }
    return getRandomValues(rnds8);
  }

  var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

  function validate(uuid) {
    return typeof uuid === 'string' && REGEX.test(uuid);
  }

  /**
   * Convert array of 16 byte values to UUID string format of the form:
   * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
   */

  var byteToHex = [];
  for (var i$1 = 0; i$1 < 256; ++i$1) {
    byteToHex.push((i$1 + 0x100).toString(16).substr(1));
  }
  function stringify(arr) {
    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    // Note: Be careful editing this code!  It's been tuned for performance
    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
    var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
    // of the following:
    // - One or more input array values don't map to a hex octet (leading to
    // "undefined" in the uuid)
    // - Invalid input values for the RFC `version` or `variant` fields

    if (!validate(uuid)) {
      throw TypeError('Stringified UUID is invalid');
    }
    return uuid;
  }

  function v4(options, buf, offset) {
    options = options || {};
    var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

    if (buf) {
      offset = offset || 0;
      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = rnds[i];
      }
      return buf;
    }
    return stringify(rnds);
  }

  const asSdkError = error => {
    if (error instanceof Error) return error;
    if (error instanceof Object) return Object.assign(new Error(), error);
    if (typeof error === "string") return new Error(error);
    return new Error(`AWS SDK error wrapper for ${error}`);
  };

  const resolveRetryConfig = input => {
    const {
      retryStrategy
    } = input;
    const maxAttempts = normalizeProvider(input.maxAttempts ?? DEFAULT_MAX_ATTEMPTS);
    return {
      ...input,
      maxAttempts,
      retryStrategy: async () => {
        if (retryStrategy) {
          return retryStrategy;
        }
        const retryMode = await normalizeProvider(input.retryMode)();
        if (retryMode === RETRY_MODES.ADAPTIVE) {
          return new AdaptiveRetryStrategy(maxAttempts);
        }
        return new StandardRetryStrategy(maxAttempts);
      }
    };
  };

  const retryMiddleware = options => (next, context) => async args => {
    let retryStrategy = await options.retryStrategy();
    const maxAttempts = await options.maxAttempts();
    if (isRetryStrategyV2(retryStrategy)) {
      retryStrategy = retryStrategy;
      let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
      let lastError = new Error();
      let attempts = 0;
      let totalRetryDelay = 0;
      const {
        request
      } = args;
      if (HttpRequest.isInstance(request)) {
        request.headers[INVOCATION_ID_HEADER] = v4();
      }
      while (true) {
        try {
          if (HttpRequest.isInstance(request)) {
            request.headers[REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
          }
          const {
            response,
            output
          } = await next(args);
          retryStrategy.recordSuccess(retryToken);
          output.$metadata.attempts = attempts + 1;
          output.$metadata.totalRetryDelay = totalRetryDelay;
          return {
            response,
            output
          };
        } catch (e) {
          const retryErrorInfo = getRetryErrorInfo(e);
          lastError = asSdkError(e);
          try {
            retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
          } catch (refreshError) {
            if (!lastError.$metadata) {
              lastError.$metadata = {};
            }
            lastError.$metadata.attempts = attempts + 1;
            lastError.$metadata.totalRetryDelay = totalRetryDelay;
            throw lastError;
          }
          attempts = retryToken.getRetryCount();
          const delay = retryToken.getRetryDelay();
          totalRetryDelay += delay;
          await new Promise(resolve => setTimeout(resolve, delay));
        }
      }
    } else {
      retryStrategy = retryStrategy;
      if (retryStrategy?.mode) context.userAgent = [...(context.userAgent || []), ["cfg/retry-mode", retryStrategy.mode]];
      return retryStrategy.retry(next, args);
    }
  };
  const isRetryStrategyV2 = retryStrategy => typeof retryStrategy.acquireInitialRetryToken !== "undefined" && typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" && typeof retryStrategy.recordSuccess !== "undefined";
  const getRetryErrorInfo = error => {
    const errorInfo = {
      errorType: getRetryErrorType(error)
    };
    const retryAfterHint = getRetryAfterHint(error.$response);
    if (retryAfterHint) {
      errorInfo.retryAfterHint = retryAfterHint;
    }
    return errorInfo;
  };
  const getRetryErrorType = error => {
    if (isThrottlingError(error)) return "THROTTLING";
    if (isTransientError(error)) return "TRANSIENT";
    if (isServerError(error)) return "SERVER_ERROR";
    return "CLIENT_ERROR";
  };
  const retryMiddlewareOptions = {
    name: "retryMiddleware",
    tags: ["RETRY"],
    step: "finalizeRequest",
    priority: "high",
    override: true
  };
  const getRetryPlugin = options => ({
    applyToStack: clientStack => {
      clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
    }
  });
  const getRetryAfterHint = response => {
    if (!HttpResponse.isInstance(response)) return;
    const retryAfterHeaderName = Object.keys(response.headers).find(key => key.toLowerCase() === "retry-after");
    if (!retryAfterHeaderName) return;
    const retryAfter = response.headers[retryAfterHeaderName];
    const retryAfterSeconds = Number(retryAfter);
    if (!Number.isNaN(retryAfterSeconds)) return new Date(retryAfterSeconds * 1000);
    const retryAfterDate = new Date(retryAfter);
    return retryAfterDate;
  };

  class NoOpLogger {
    trace() {}
    debug() {}
    info() {}
    warn() {}
    error() {}
  }

  const constructStack = () => {
    let absoluteEntries = [];
    let relativeEntries = [];
    const entriesNameSet = new Set();
    const sort = entries => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]);
    const removeByName = toRemove => {
      let isRemoved = false;
      const filterCb = entry => {
        if (entry.name && entry.name === toRemove) {
          isRemoved = true;
          entriesNameSet.delete(toRemove);
          return false;
        }
        return true;
      };
      absoluteEntries = absoluteEntries.filter(filterCb);
      relativeEntries = relativeEntries.filter(filterCb);
      return isRemoved;
    };
    const removeByReference = toRemove => {
      let isRemoved = false;
      const filterCb = entry => {
        if (entry.middleware === toRemove) {
          isRemoved = true;
          if (entry.name) entriesNameSet.delete(entry.name);
          return false;
        }
        return true;
      };
      absoluteEntries = absoluteEntries.filter(filterCb);
      relativeEntries = relativeEntries.filter(filterCb);
      return isRemoved;
    };
    const cloneTo = toStack => {
      absoluteEntries.forEach(entry => {
        toStack.add(entry.middleware, {
          ...entry
        });
      });
      relativeEntries.forEach(entry => {
        toStack.addRelativeTo(entry.middleware, {
          ...entry
        });
      });
      return toStack;
    };
    const expandRelativeMiddlewareList = from => {
      const expandedMiddlewareList = [];
      from.before.forEach(entry => {
        if (entry.before.length === 0 && entry.after.length === 0) {
          expandedMiddlewareList.push(entry);
        } else {
          expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
        }
      });
      expandedMiddlewareList.push(from);
      from.after.reverse().forEach(entry => {
        if (entry.before.length === 0 && entry.after.length === 0) {
          expandedMiddlewareList.push(entry);
        } else {
          expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
        }
      });
      return expandedMiddlewareList;
    };
    const getMiddlewareList = (debug = false) => {
      const normalizedAbsoluteEntries = [];
      const normalizedRelativeEntries = [];
      const normalizedEntriesNameMap = {};
      absoluteEntries.forEach(entry => {
        const normalizedEntry = {
          ...entry,
          before: [],
          after: []
        };
        if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
        normalizedAbsoluteEntries.push(normalizedEntry);
      });
      relativeEntries.forEach(entry => {
        const normalizedEntry = {
          ...entry,
          before: [],
          after: []
        };
        if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
        normalizedRelativeEntries.push(normalizedEntry);
      });
      normalizedRelativeEntries.forEach(entry => {
        if (entry.toMiddleware) {
          const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
          if (toMiddleware === undefined) {
            if (debug) {
              return;
            }
            throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || "anonymous"} middleware ${entry.relation} ${entry.toMiddleware}`);
          }
          if (entry.relation === "after") {
            toMiddleware.after.push(entry);
          }
          if (entry.relation === "before") {
            toMiddleware.before.push(entry);
          }
        }
      });
      const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expandedMiddlewareList) => {
        wholeList.push(...expandedMiddlewareList);
        return wholeList;
      }, []);
      return mainChain;
    };
    const stack = {
      add: (middleware, options = {}) => {
        const {
          name,
          override
        } = options;
        const entry = {
          step: "initialize",
          priority: "normal",
          middleware,
          ...options
        };
        if (name) {
          if (entriesNameSet.has(name)) {
            if (!override) throw new Error(`Duplicate middleware name '${name}'`);
            const toOverrideIndex = absoluteEntries.findIndex(entry => entry.name === name);
            const toOverride = absoluteEntries[toOverrideIndex];
            if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
              throw new Error(`"${name}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be ` + `overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);
            }
            absoluteEntries.splice(toOverrideIndex, 1);
          }
          entriesNameSet.add(name);
        }
        absoluteEntries.push(entry);
      },
      addRelativeTo: (middleware, options) => {
        const {
          name,
          override
        } = options;
        const entry = {
          middleware,
          ...options
        };
        if (name) {
          if (entriesNameSet.has(name)) {
            if (!override) throw new Error(`Duplicate middleware name '${name}'`);
            const toOverrideIndex = relativeEntries.findIndex(entry => entry.name === name);
            const toOverride = relativeEntries[toOverrideIndex];
            if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
              throw new Error(`"${name}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden ` + `by same-name middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
            }
            relativeEntries.splice(toOverrideIndex, 1);
          }
          entriesNameSet.add(name);
        }
        relativeEntries.push(entry);
      },
      clone: () => cloneTo(constructStack()),
      use: plugin => {
        plugin.applyToStack(stack);
      },
      remove: toRemove => {
        if (typeof toRemove === "string") return removeByName(toRemove);else return removeByReference(toRemove);
      },
      removeByTag: toRemove => {
        let isRemoved = false;
        const filterCb = entry => {
          const {
            tags,
            name
          } = entry;
          if (tags && tags.includes(toRemove)) {
            if (name) entriesNameSet.delete(name);
            isRemoved = true;
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      },
      concat: from => {
        const cloned = cloneTo(constructStack());
        cloned.use(from);
        return cloned;
      },
      applyToStack: cloneTo,
      identify: () => {
        return getMiddlewareList(true).map(mw => {
          return mw.name + ": " + (mw.tags || []).join(",");
        });
      },
      resolve: (handler, context) => {
        for (const middleware of getMiddlewareList().map(entry => entry.middleware).reverse()) {
          handler = middleware(handler, context);
        }
        return handler;
      }
    };
    return stack;
  };
  const stepWeights = {
    initialize: 5,
    serialize: 4,
    build: 3,
    finalizeRequest: 2,
    deserialize: 1
  };
  const priorityWeights = {
    high: 3,
    normal: 2,
    low: 1
  };

  class Client {
    constructor(config) {
      this.middlewareStack = constructStack();
      this.config = config;
    }
    send(command, optionsOrCb, cb) {
      const options = typeof optionsOrCb !== "function" ? optionsOrCb : undefined;
      const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
      const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
      if (callback) {
        handler(command).then(result => callback(null, result.output), err => callback(err)).catch(() => {});
      } else {
        return handler(command).then(result => result.output);
      }
    }
    destroy() {
      if (this.config.requestHandler.destroy) this.config.requestHandler.destroy();
    }
  }

  const alphabetByEncoding = {};
  const alphabetByValue = new Array(64);
  for (let i = 0, start = "A".charCodeAt(0), limit = "Z".charCodeAt(0); i + start <= limit; i++) {
    const char = String.fromCharCode(i + start);
    alphabetByEncoding[char] = i;
    alphabetByValue[i] = char;
  }
  for (let i = 0, start = "a".charCodeAt(0), limit = "z".charCodeAt(0); i + start <= limit; i++) {
    const char = String.fromCharCode(i + start);
    const index = i + 26;
    alphabetByEncoding[char] = index;
    alphabetByValue[index] = char;
  }
  for (let i = 0; i < 10; i++) {
    alphabetByEncoding[i.toString(10)] = i + 52;
    const char = i.toString(10);
    const index = i + 52;
    alphabetByEncoding[char] = index;
    alphabetByValue[index] = char;
  }
  alphabetByEncoding["+"] = 62;
  alphabetByValue[62] = "+";
  alphabetByEncoding["/"] = 63;
  alphabetByValue[63] = "/";
  const bitsPerLetter = 6;
  const bitsPerByte = 8;
  const maxLetterValue = 0b111111;

  const fromBase64 = input => {
    let totalByteLength = input.length / 4 * 3;
    if (input.slice(-2) === "==") {
      totalByteLength -= 2;
    } else if (input.slice(-1) === "=") {
      totalByteLength--;
    }
    const out = new ArrayBuffer(totalByteLength);
    const dataView = new DataView(out);
    for (let i = 0; i < input.length; i += 4) {
      let bits = 0;
      let bitLength = 0;
      for (let j = i, limit = i + 3; j <= limit; j++) {
        if (input[j] !== "=") {
          if (!(input[j] in alphabetByEncoding)) {
            throw new TypeError(`Invalid character ${input[j]} in base64 string.`);
          }
          bits |= alphabetByEncoding[input[j]] << (limit - j) * bitsPerLetter;
          bitLength += bitsPerLetter;
        } else {
          bits >>= bitsPerLetter;
        }
      }
      const chunkOffset = i / 4 * 3;
      bits >>= bitLength % bitsPerByte;
      const byteLength = Math.floor(bitLength / bitsPerByte);
      for (let k = 0; k < byteLength; k++) {
        const offset = (byteLength - k - 1) * bitsPerByte;
        dataView.setUint8(chunkOffset + k, (bits & 255 << offset) >> offset);
      }
    }
    return new Uint8Array(out);
  };

  function toBase64(input) {
    let str = "";
    for (let i = 0; i < input.length; i += 3) {
      let bits = 0;
      let bitLength = 0;
      for (let j = i, limit = Math.min(i + 3, input.length); j < limit; j++) {
        bits |= input[j] << (limit - j - 1) * bitsPerByte;
        bitLength += bitsPerByte;
      }
      const bitClusterCount = Math.ceil(bitLength / bitsPerLetter);
      bits <<= bitClusterCount * bitsPerLetter - bitLength;
      for (let k = 1; k <= bitClusterCount; k++) {
        const offset = (bitClusterCount - k) * bitsPerLetter;
        str += alphabetByValue[(bits & maxLetterValue << offset) >> offset];
      }
      str += "==".slice(0, 4 - bitClusterCount);
    }
    return str;
  }

  function transformToString(payload, encoding = "utf-8") {
    if (encoding === "base64") {
      return toBase64(payload);
    }
    return toUtf8(payload);
  }
  function transformFromString(str, encoding) {
    if (encoding === "base64") {
      return Uint8ArrayBlobAdapter.mutate(fromBase64(str));
    }
    return Uint8ArrayBlobAdapter.mutate(fromUtf8(str));
  }

  class Uint8ArrayBlobAdapter extends Uint8Array {
    static fromString(source, encoding = "utf-8") {
      switch (typeof source) {
        case "string":
          return transformFromString(source, encoding);
        default:
          throw new Error(`Unsupported conversion from ${typeof source} to Uint8ArrayBlobAdapter.`);
      }
    }
    static mutate(source) {
      Object.setPrototypeOf(source, Uint8ArrayBlobAdapter.prototype);
      return source;
    }
    transformToString(encoding = "utf-8") {
      return transformToString(this, encoding);
    }
  }

  const getAwsChunkedEncodingStream = (readableStream, options) => {
    const {
      base64Encoder,
      bodyLengthChecker,
      checksumAlgorithmFn,
      checksumLocationName,
      streamHasher
    } = options;
    const checksumRequired = base64Encoder !== undefined && bodyLengthChecker !== undefined && checksumAlgorithmFn !== undefined && checksumLocationName !== undefined && streamHasher !== undefined;
    const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : undefined;
    const reader = readableStream.getReader();
    return new ReadableStream({
      async pull(controller) {
        const {
          value,
          done
        } = await reader.read();
        if (done) {
          controller.enqueue(`0\r\n`);
          if (checksumRequired) {
            const checksum = base64Encoder(await digest);
            controller.enqueue(`${checksumLocationName}:${checksum}\r\n`);
            controller.enqueue(`\r\n`);
          }
          controller.close();
        } else {
          controller.enqueue(`${(bodyLengthChecker(value) || 0).toString(16)}\r\n${value}\r\n`);
        }
      }
    });
  };

  function buildQueryString(query) {
    const parts = [];
    for (let key of Object.keys(query).sort()) {
      const value = query[key];
      key = escapeUri(key);
      if (Array.isArray(value)) {
        for (let i = 0, iLen = value.length; i < iLen; i++) {
          parts.push(`${key}=${escapeUri(value[i])}`);
        }
      } else {
        let qsEntry = key;
        if (value || typeof value === "string") {
          qsEntry += `=${escapeUri(value)}`;
        }
        parts.push(qsEntry);
      }
    }
    return parts.join("&");
  }

  function requestTimeout(timeoutInMs = 0) {
    return new Promise((resolve, reject) => {
      if (timeoutInMs) {
        setTimeout(() => {
          const timeoutError = new Error(`Request did not complete within ${timeoutInMs} ms`);
          timeoutError.name = "TimeoutError";
          reject(timeoutError);
        }, timeoutInMs);
      }
    });
  }

  class FetchHttpHandler {
    constructor(options) {
      if (typeof options === "function") {
        this.configProvider = options().then(opts => opts || {});
      } else {
        this.config = options ?? {};
        this.configProvider = Promise.resolve(this.config);
      }
    }
    destroy() {}
    async handle(request, {
      abortSignal
    } = {}) {
      if (!this.config) {
        this.config = await this.configProvider;
      }
      const requestTimeoutInMs = this.config.requestTimeout;
      if (abortSignal?.aborted) {
        const abortError = new Error("Request aborted");
        abortError.name = "AbortError";
        return Promise.reject(abortError);
      }
      let path = request.path;
      const queryString = buildQueryString(request.query || {});
      if (queryString) {
        path += `?${queryString}`;
      }
      if (request.fragment) {
        path += `#${request.fragment}`;
      }
      let auth = "";
      if (request.username != null || request.password != null) {
        const username = request.username ?? "";
        const password = request.password ?? "";
        auth = `${username}:${password}@`;
      }
      const {
        port,
        method
      } = request;
      const url = `${request.protocol}//${auth}${request.hostname}${port ? `:${port}` : ""}${path}`;
      const body = method === "GET" || method === "HEAD" ? undefined : request.body;
      const requestOptions = {
        body,
        headers: new Headers(request.headers),
        method: method
      };
      if (typeof AbortController !== "undefined") {
        requestOptions["signal"] = abortSignal;
      }
      const fetchRequest = new Request(url, requestOptions);
      const raceOfPromises = [fetch(fetchRequest).then(response => {
        const fetchHeaders = response.headers;
        const transformedHeaders = {};
        for (const pair of fetchHeaders.entries()) {
          transformedHeaders[pair[0]] = pair[1];
        }
        const hasReadableStream = response.body != undefined;
        if (!hasReadableStream) {
          return response.blob().then(body => ({
            response: new HttpResponse({
              headers: transformedHeaders,
              reason: response.statusText,
              statusCode: response.status,
              body
            })
          }));
        }
        return {
          response: new HttpResponse({
            headers: transformedHeaders,
            reason: response.statusText,
            statusCode: response.status,
            body: response.body
          })
        };
      }), requestTimeout(requestTimeoutInMs)];
      if (abortSignal) {
        raceOfPromises.push(new Promise((resolve, reject) => {
          abortSignal.onabort = () => {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
          };
        }));
      }
      return Promise.race(raceOfPromises);
    }
  }

  const streamCollector = stream => {
    if (typeof Blob === "function" && stream instanceof Blob) {
      return collectBlob(stream);
    }
    return collectStream(stream);
  };
  async function collectBlob(blob) {
    const base64 = await readToBase64(blob);
    const arrayBuffer = fromBase64(base64);
    return new Uint8Array(arrayBuffer);
  }
  async function collectStream(stream) {
    let res = new Uint8Array(0);
    const reader = stream.getReader();
    let isDone = false;
    while (!isDone) {
      const {
        done,
        value
      } = await reader.read();
      if (value) {
        const prior = res;
        res = new Uint8Array(prior.length + value.length);
        res.set(prior);
        res.set(value, prior.length);
      }
      isDone = done;
    }
    return res;
  }
  function readToBase64(blob) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => {
        if (reader.readyState !== 2) {
          return reject(new Error("Reader aborted too early"));
        }
        const result = reader.result ?? "";
        const commaIndex = result.indexOf(",");
        const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
        resolve(result.substring(dataOffset));
      };
      reader.onabort = () => reject(new Error("Read aborted"));
      reader.onerror = () => reject(reader.error);
      reader.readAsDataURL(blob);
    });
  }

  const ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
  const sdkStreamMixin = stream => {
    if (!isBlobInstance(stream) && !isReadableStreamInstance(stream)) {
      const name = stream?.__proto__?.constructor?.name || stream;
      throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${name}`);
    }
    let transformed = false;
    const transformToByteArray = async () => {
      if (transformed) {
        throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
      }
      transformed = true;
      return await streamCollector(stream);
    };
    const blobToWebStream = blob => {
      if (typeof blob.stream !== "function") {
        throw new Error("Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\n" + "If you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body");
      }
      return blob.stream();
    };
    return Object.assign(stream, {
      transformToByteArray: transformToByteArray,
      transformToString: async encoding => {
        const buf = await transformToByteArray();
        if (encoding === "base64") {
          return toBase64(buf);
        } else if (encoding === "hex") {
          return toHex(buf);
        } else if (encoding === undefined || encoding === "utf8" || encoding === "utf-8") {
          return toUtf8(buf);
        } else if (typeof TextDecoder === "function") {
          return new TextDecoder(encoding).decode(buf);
        } else {
          throw new Error("TextDecoder is not available, please make sure polyfill is provided.");
        }
      },
      transformToWebStream: () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        if (isBlobInstance(stream)) {
          return blobToWebStream(stream);
        } else if (isReadableStreamInstance(stream)) {
          return stream;
        } else {
          throw new Error(`Cannot transform payload to web stream, got ${stream}`);
        }
      }
    });
  };
  const isBlobInstance = stream => typeof Blob === "function" && stream instanceof Blob;
  const isReadableStreamInstance = stream => typeof ReadableStream === "function" && stream instanceof ReadableStream;

  const collectBody = async (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
      return Uint8ArrayBlobAdapter.mutate(streamBody);
    }
    if (!streamBody) {
      return Uint8ArrayBlobAdapter.mutate(new Uint8Array());
    }
    const fromContext = context.streamCollector(streamBody);
    return Uint8ArrayBlobAdapter.mutate(await fromContext);
  };

  class Command {
    constructor() {
      this.middlewareStack = constructStack();
    }
  }

  const SENSITIVE_STRING = "***SensitiveInformation***";

  const createAggregatedClient = (commands, Client) => {
    for (const command of Object.keys(commands)) {
      const CommandCtor = commands[command];
      const methodImpl = async function (args, optionsOrCb, cb) {
        const command = new CommandCtor(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object") throw new Error(`Expected http options but got ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      };
      const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, "");
      Client.prototype[methodName] = methodImpl;
    }
  };

  const parseBoolean = value => {
    switch (value) {
      case "true":
        return true;
      case "false":
        return false;
      default:
        throw new Error(`Unable to parse boolean value "${value}"`);
    }
  };
  const expectNumber = value => {
    if (value === null || value === undefined) {
      return undefined;
    }
    if (typeof value === "string") {
      const parsed = parseFloat(value);
      if (!Number.isNaN(parsed)) {
        if (String(parsed) !== String(value)) {
          logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
        }
        return parsed;
      }
    }
    if (typeof value === "number") {
      return value;
    }
    throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
  };
  const MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
  const expectFloat32 = value => {
    const expected = expectNumber(value);
    if (expected !== undefined && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
      if (Math.abs(expected) > MAX_FLOAT) {
        throw new TypeError(`Expected 32-bit float, got ${value}`);
      }
    }
    return expected;
  };
  const expectLong = value => {
    if (value === null || value === undefined) {
      return undefined;
    }
    if (Number.isInteger(value) && !Number.isNaN(value)) {
      return value;
    }
    throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
  };
  const expectInt32 = value => expectSizedInt(value, 32);
  const expectShort = value => expectSizedInt(value, 16);
  const expectByte = value => expectSizedInt(value, 8);
  const expectSizedInt = (value, size) => {
    const expected = expectLong(value);
    if (expected !== undefined && castInt(expected, size) !== expected) {
      throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
    }
    return expected;
  };
  const castInt = (value, size) => {
    switch (size) {
      case 32:
        return Int32Array.of(value)[0];
      case 16:
        return Int16Array.of(value)[0];
      case 8:
        return Int8Array.of(value)[0];
    }
  };
  const expectNonNull = (value, location) => {
    if (value === null || value === undefined) {
      if (location) {
        throw new TypeError(`Expected a non-null value for ${location}`);
      }
      throw new TypeError("Expected a non-null value");
    }
    return value;
  };
  const expectObject = value => {
    if (value === null || value === undefined) {
      return undefined;
    }
    if (typeof value === "object" && !Array.isArray(value)) {
      return value;
    }
    const receivedType = Array.isArray(value) ? "array" : typeof value;
    throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
  };
  const expectString = value => {
    if (value === null || value === undefined) {
      return undefined;
    }
    if (typeof value === "string") {
      return value;
    }
    if (["boolean", "number", "bigint"].includes(typeof value)) {
      logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
      return String(value);
    }
    throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
  };
  const expectUnion = value => {
    if (value === null || value === undefined) {
      return undefined;
    }
    const asObject = expectObject(value);
    const setKeys = Object.entries(asObject).filter(([, v]) => v != null).map(([k]) => k);
    if (setKeys.length === 0) {
      throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
    }
    if (setKeys.length > 1) {
      throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
    }
    return asObject;
  };
  const strictParseFloat32 = value => {
    if (typeof value == "string") {
      return expectFloat32(parseNumber(value));
    }
    return expectFloat32(value);
  };
  const NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
  const parseNumber = value => {
    const matches = value.match(NUMBER_REGEX);
    if (matches === null || matches[0].length !== value.length) {
      throw new TypeError(`Expected real number, got implicit NaN`);
    }
    return parseFloat(value);
  };
  const strictParseLong = value => {
    if (typeof value === "string") {
      return expectLong(parseNumber(value));
    }
    return expectLong(value);
  };
  const strictParseInt32 = value => {
    if (typeof value === "string") {
      return expectInt32(parseNumber(value));
    }
    return expectInt32(value);
  };
  const strictParseShort = value => {
    if (typeof value === "string") {
      return expectShort(parseNumber(value));
    }
    return expectShort(value);
  };
  const strictParseByte = value => {
    if (typeof value === "string") {
      return expectByte(parseNumber(value));
    }
    return expectByte(value);
  };
  const stackTraceWarning = message => {
    return String(new TypeError(message).stack || message).split("\n").slice(0, 5).filter(s => !s.includes("stackTraceWarning")).join("\n");
  };
  const logger = {
    warn: console.warn
  };

  const DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  const MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
  function dateToUtcString(date) {
    const year = date.getUTCFullYear();
    const month = date.getUTCMonth();
    const dayOfWeek = date.getUTCDay();
    const dayOfMonthInt = date.getUTCDate();
    const hoursInt = date.getUTCHours();
    const minutesInt = date.getUTCMinutes();
    const secondsInt = date.getUTCSeconds();
    const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
    const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
    const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
    const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
    return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
  }
  const RFC3339_WITH_OFFSET = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/);
  const parseRfc3339DateTimeWithOffset = value => {
    if (value === null || value === undefined) {
      return undefined;
    }
    if (typeof value !== "string") {
      throw new TypeError("RFC-3339 date-times must be expressed as strings");
    }
    const match = RFC3339_WITH_OFFSET.exec(value);
    if (!match) {
      throw new TypeError("Invalid RFC-3339 date-time value");
    }
    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;
    const year = strictParseShort(stripLeadingZeroes(yearStr));
    const month = parseDateValue(monthStr, "month", 1, 12);
    const day = parseDateValue(dayStr, "day", 1, 31);
    const date = buildDate(year, month, day, {
      hours,
      minutes,
      seconds,
      fractionalMilliseconds
    });
    if (offsetStr.toUpperCase() != "Z") {
      date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));
    }
    return date;
  };
  const IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
  const RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
  const ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
  const parseRfc7231DateTime = value => {
    if (value === null || value === undefined) {
      return undefined;
    }
    if (typeof value !== "string") {
      throw new TypeError("RFC-7231 date-times must be expressed as strings");
    }
    let match = IMF_FIXDATE.exec(value);
    if (match) {
      const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
        hours,
        minutes,
        seconds,
        fractionalMilliseconds
      });
    }
    match = RFC_850_DATE.exec(value);
    if (match) {
      const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
        hours,
        minutes,
        seconds,
        fractionalMilliseconds
      }));
    }
    match = ASC_TIME.exec(value);
    if (match) {
      const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
      return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), {
        hours,
        minutes,
        seconds,
        fractionalMilliseconds
      });
    }
    throw new TypeError("Invalid RFC-7231 date-time value");
  };
  const buildDate = (year, month, day, time) => {
    const adjustedMonth = month - 1;
    validateDayOfMonth(year, adjustedMonth, day);
    return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
  };
  const parseTwoDigitYear = value => {
    const thisYear = new Date().getUTCFullYear();
    const valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));
    if (valueInThisCentury < thisYear) {
      return valueInThisCentury + 100;
    }
    return valueInThisCentury;
  };
  const FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1000;
  const adjustRfc850Year = input => {
    if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {
      return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
    }
    return input;
  };
  const parseMonthByShortName = value => {
    const monthIdx = MONTHS.indexOf(value);
    if (monthIdx < 0) {
      throw new TypeError(`Invalid month: ${value}`);
    }
    return monthIdx + 1;
  };
  const DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  const validateDayOfMonth = (year, month, day) => {
    let maxDays = DAYS_IN_MONTH[month];
    if (month === 1 && isLeapYear(year)) {
      maxDays = 29;
    }
    if (day > maxDays) {
      throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
    }
  };
  const isLeapYear = year => {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
  };
  const parseDateValue = (value, type, lower, upper) => {
    const dateVal = strictParseByte(stripLeadingZeroes(value));
    if (dateVal < lower || dateVal > upper) {
      throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
    }
    return dateVal;
  };
  const parseMilliseconds = value => {
    if (value === null || value === undefined) {
      return 0;
    }
    return strictParseFloat32("0." + value) * 1000;
  };
  const parseOffsetToMilliseconds = value => {
    const directionStr = value[0];
    let direction = 1;
    if (directionStr == "+") {
      direction = 1;
    } else if (directionStr == "-") {
      direction = -1;
    } else {
      throw new TypeError(`Offset direction, ${directionStr}, must be "+" or "-"`);
    }
    const hour = Number(value.substring(1, 3));
    const minute = Number(value.substring(4, 6));
    return direction * (hour * 60 + minute) * 60 * 1000;
  };
  const stripLeadingZeroes = value => {
    let idx = 0;
    while (idx < value.length - 1 && value.charAt(idx) === "0") {
      idx++;
    }
    if (idx === 0) {
      return value;
    }
    return value.slice(idx);
  };

  class ServiceException extends Error {
    constructor(options) {
      super(options.message);
      Object.setPrototypeOf(this, ServiceException.prototype);
      this.name = options.name;
      this.$fault = options.$fault;
      this.$metadata = options.$metadata;
    }
  }
  const decorateServiceException = (exception, additions = {}) => {
    Object.entries(additions).filter(([, v]) => v !== undefined).forEach(([k, v]) => {
      if (exception[k] == undefined || exception[k] === "") {
        exception[k] = v;
      }
    });
    const message = exception.message || exception.Message || "UnknownError";
    exception.message = message;
    delete exception.Message;
    return exception;
  };

  const throwDefaultError$1 = ({
    output,
    parsedBody,
    exceptionCtor,
    errorCode
  }) => {
    const $metadata = deserializeMetadata$1(output);
    const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
    const response = new exceptionCtor({
      name: parsedBody?.code || parsedBody?.Code || errorCode || statusCode || "UnknownError",
      $fault: "client",
      $metadata
    });
    throw decorateServiceException(response, parsedBody);
  };
  const withBaseException = ExceptionCtor => {
    return ({
      output,
      parsedBody,
      errorCode
    }) => {
      throwDefaultError$1({
        output,
        parsedBody,
        exceptionCtor: ExceptionCtor,
        errorCode
      });
    };
  };
  const deserializeMetadata$1 = output => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  });

  const loadConfigsForDefaultMode = mode => {
    switch (mode) {
      case "standard":
        return {
          retryMode: "standard",
          connectionTimeout: 3100
        };
      case "in-region":
        return {
          retryMode: "standard",
          connectionTimeout: 1100
        };
      case "cross-region":
        return {
          retryMode: "standard",
          connectionTimeout: 3100
        };
      case "mobile":
        return {
          retryMode: "standard",
          connectionTimeout: 30000
        };
      default:
        return {};
    }
  };

  function extendedEncodeURIComponent(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
      return "%" + c.charCodeAt(0).toString(16).toUpperCase();
    });
  }

  const getArrayIfSingleItem = mayBeArray => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];

  const getValueFromTextNode = obj => {
    const textNodeName = "#text";
    for (const key in obj) {
      if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== undefined) {
        obj[key] = obj[key][textNodeName];
      } else if (typeof obj[key] === "object" && obj[key] !== null) {
        obj[key] = getValueFromTextNode(obj[key]);
      }
    }
    return obj;
  };

  const StringWrapper = function () {
    const Class = Object.getPrototypeOf(this).constructor;
    const Constructor = Function.bind.apply(String, [null, ...arguments]);
    const instance = new Constructor();
    Object.setPrototypeOf(instance, Class.prototype);
    return instance;
  };
  StringWrapper.prototype = Object.create(String.prototype, {
    constructor: {
      value: StringWrapper,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  Object.setPrototypeOf(StringWrapper, String);

  function map(arg0, arg1, arg2) {
    let target;
    let filter;
    let instructions;
    if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
      target = {};
      instructions = arg0;
    } else {
      target = arg0;
      if (typeof arg1 === "function") {
        filter = arg1;
        instructions = arg2;
        return mapWithFilter(target, filter, instructions);
      } else {
        instructions = arg1;
      }
    }
    for (const key of Object.keys(instructions)) {
      if (!Array.isArray(instructions[key])) {
        target[key] = instructions[key];
        continue;
      }
      applyInstruction(target, null, instructions, key);
    }
    return target;
  }
  const mapWithFilter = (target, filter, instructions) => {
    return map(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {
      if (Array.isArray(value)) {
        _instructions[key] = value;
      } else {
        if (typeof value === "function") {
          _instructions[key] = [filter, value()];
        } else {
          _instructions[key] = [filter, value];
        }
      }
      return _instructions;
    }, {}));
  };
  const applyInstruction = (target, source, instructions, targetKey) => {
    if (source !== null) {
      let instruction = instructions[targetKey];
      if (typeof instruction === "function") {
        instruction = [, instruction];
      }
      const [filter = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;
      if (typeof filter === "function" && filter(source[sourceKey]) || typeof filter !== "function" && !!filter) {
        target[targetKey] = valueFn(source[sourceKey]);
      }
      return;
    }
    let [filter, value] = instructions[targetKey];
    if (typeof value === "function") {
      let _value;
      const defaultFilterPassed = filter === undefined && (_value = value()) != null;
      const customFilterPassed = typeof filter === "function" && !!filter(void 0) || typeof filter !== "function" && !!filter;
      if (defaultFilterPassed) {
        target[targetKey] = _value;
      } else if (customFilterPassed) {
        target[targetKey] = value();
      }
    } else {
      const defaultFilterPassed = filter === undefined && value != null;
      const customFilterPassed = typeof filter === "function" && !!filter(value) || typeof filter !== "function" && !!filter;
      if (defaultFilterPassed || customFilterPassed) {
        target[targetKey] = value;
      }
    }
  };
  const nonNullish = _ => _ != null;
  const pass = _ => _;

  const resolvedPath = (resolvedPath, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
    if (input != null && input[memberName] !== undefined) {
      const labelValue = labelValueProvider();
      if (labelValue.length <= 0) {
        throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
      }
      resolvedPath = resolvedPath.replace(uriLabel, isGreedyLabel ? labelValue.split("/").map(segment => extendedEncodeURIComponent(segment)).join("/") : extendedEncodeURIComponent(labelValue));
    } else {
      throw new Error("No value provided for input HTTP label: " + memberName + ".");
    }
    return resolvedPath;
  };

  const resolveClientEndpointParameters = options => {
    return {
      ...options,
      useFipsEndpoint: options.useFipsEndpoint ?? false,
      useDualstackEndpoint: options.useDualstackEndpoint ?? false,
      forcePathStyle: options.forcePathStyle ?? false,
      useAccelerateEndpoint: options.useAccelerateEndpoint ?? false,
      useGlobalEndpoint: options.useGlobalEndpoint ?? false,
      disableMultiregionAccessPoints: options.disableMultiregionAccessPoints ?? false,
      defaultSigningName: "s3"
    };
  };

  var name = "@aws-sdk/client-s3";
  var description = "AWS SDK for JavaScript S3 Client for Node.js, Browser and React Native";
  var version = "3.391.0";
  var scripts = {
  	build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
  	"build:cjs": "tsc -p tsconfig.cjs.json",
  	"build:docs": "typedoc",
  	"build:es": "tsc -p tsconfig.es.json",
  	"build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
  	"build:types": "tsc -p tsconfig.types.json",
  	"build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
  	clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
  	"extract:docs": "api-extractor run --local",
  	"generate:client": "node ../../scripts/generate-clients/single-service --solo s3",
  	test: "yarn test:unit",
  	"test:e2e": "ts-mocha test/**/*.ispec.ts && karma start karma.conf.js",
  	"test:unit": "ts-mocha test/**/*.spec.ts"
  };
  var main = "./dist-cjs/index.js";
  var types = "./dist-types/index.d.ts";
  var module = "./dist-es/index.js";
  var sideEffects = false;
  var dependencies = {
  	"@aws-crypto/sha1-browser": "3.0.0",
  	"@aws-crypto/sha256-browser": "3.0.0",
  	"@aws-crypto/sha256-js": "3.0.0",
  	"@aws-sdk/client-sts": "3.391.0",
  	"@aws-sdk/credential-provider-node": "3.391.0",
  	"@aws-sdk/middleware-bucket-endpoint": "3.391.0",
  	"@aws-sdk/middleware-expect-continue": "3.391.0",
  	"@aws-sdk/middleware-flexible-checksums": "3.391.0",
  	"@aws-sdk/middleware-host-header": "3.391.0",
  	"@aws-sdk/middleware-location-constraint": "3.391.0",
  	"@aws-sdk/middleware-logger": "3.391.0",
  	"@aws-sdk/middleware-recursion-detection": "3.391.0",
  	"@aws-sdk/middleware-sdk-s3": "3.391.0",
  	"@aws-sdk/middleware-signing": "3.391.0",
  	"@aws-sdk/middleware-ssec": "3.391.0",
  	"@aws-sdk/middleware-user-agent": "3.391.0",
  	"@aws-sdk/signature-v4-multi-region": "3.391.0",
  	"@aws-sdk/types": "3.391.0",
  	"@aws-sdk/util-endpoints": "3.391.0",
  	"@aws-sdk/util-user-agent-browser": "3.391.0",
  	"@aws-sdk/util-user-agent-node": "3.391.0",
  	"@aws-sdk/xml-builder": "3.310.0",
  	"@smithy/config-resolver": "^2.0.3",
  	"@smithy/eventstream-serde-browser": "^2.0.3",
  	"@smithy/eventstream-serde-config-resolver": "^2.0.3",
  	"@smithy/eventstream-serde-node": "^2.0.3",
  	"@smithy/fetch-http-handler": "^2.0.3",
  	"@smithy/hash-blob-browser": "^2.0.3",
  	"@smithy/hash-node": "^2.0.3",
  	"@smithy/hash-stream-node": "^2.0.3",
  	"@smithy/invalid-dependency": "^2.0.3",
  	"@smithy/md5-js": "^2.0.3",
  	"@smithy/middleware-content-length": "^2.0.3",
  	"@smithy/middleware-endpoint": "^2.0.3",
  	"@smithy/middleware-retry": "^2.0.3",
  	"@smithy/middleware-serde": "^2.0.3",
  	"@smithy/middleware-stack": "^2.0.0",
  	"@smithy/node-config-provider": "^2.0.3",
  	"@smithy/node-http-handler": "^2.0.3",
  	"@smithy/protocol-http": "^2.0.3",
  	"@smithy/smithy-client": "^2.0.3",
  	"@smithy/types": "^2.2.0",
  	"@smithy/url-parser": "^2.0.3",
  	"@smithy/util-base64": "^2.0.0",
  	"@smithy/util-body-length-browser": "^2.0.0",
  	"@smithy/util-body-length-node": "^2.0.0",
  	"@smithy/util-defaults-mode-browser": "^2.0.3",
  	"@smithy/util-defaults-mode-node": "^2.0.3",
  	"@smithy/util-retry": "^2.0.0",
  	"@smithy/util-stream": "^2.0.3",
  	"@smithy/util-utf8": "^2.0.0",
  	"@smithy/util-waiter": "^2.0.3",
  	"fast-xml-parser": "4.2.5",
  	tslib: "^2.5.0"
  };
  var devDependencies = {
  	"@smithy/service-client-documentation-generator": "^2.0.0",
  	"@tsconfig/node14": "1.0.3",
  	"@types/chai": "^4.2.11",
  	"@types/mocha": "^8.0.4",
  	"@types/node": "^14.14.31",
  	concurrently: "7.0.0",
  	"downlevel-dts": "0.10.1",
  	rimraf: "3.0.2",
  	typedoc: "0.23.23",
  	typescript: "~4.9.5"
  };
  var engines = {
  	node: ">=14.0.0"
  };
  var typesVersions = {
  	"<4.0": {
  		"dist-types/*": [
  			"dist-types/ts3.4/*"
  		]
  	}
  };
  var files = [
  	"dist-*/**"
  ];
  var author = {
  	name: "AWS SDK for JavaScript Team",
  	url: "https://aws.amazon.com/javascript/"
  };
  var license = "Apache-2.0";
  var browser = {
  	"./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
  };
  var homepage = "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-s3";
  var repository = {
  	type: "git",
  	url: "https://github.com/aws/aws-sdk-js-v3.git",
  	directory: "clients/client-s3"
  };
  var packageInfo = {
  	name: name,
  	description: description,
  	version: version,
  	scripts: scripts,
  	main: main,
  	types: types,
  	module: module,
  	sideEffects: sideEffects,
  	dependencies: dependencies,
  	devDependencies: devDependencies,
  	engines: engines,
  	typesVersions: typesVersions,
  	files: files,
  	author: author,
  	license: license,
  	browser: browser,
  	"react-native": {
  	"./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
  },
  	homepage: homepage,
  	repository: repository
  };

  var build$5 = {};

  var crossPlatformSha1 = {};

  var ie11Sha1 = {};

  var isEmptyData$2 = {};

  var hasRequiredIsEmptyData$1;
  function requireIsEmptyData$1() {
    if (hasRequiredIsEmptyData$1) return isEmptyData$2;
    hasRequiredIsEmptyData$1 = 1;
    Object.defineProperty(isEmptyData$2, "__esModule", {
      value: true
    });
    isEmptyData$2.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    isEmptyData$2.isEmptyData = isEmptyData;
    return isEmptyData$2;
  }

  var constants$2 = {};

  var hasRequiredConstants$2;
  function requireConstants$2() {
    if (hasRequiredConstants$2) return constants$2;
    hasRequiredConstants$2 = 1;
    (function (exports) {

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.EMPTY_DATA_SHA_1 = exports.SHA_1_HMAC_ALGO = exports.SHA_1_HASH = void 0;
      exports.SHA_1_HASH = {
        name: "SHA-1"
      };
      exports.SHA_1_HMAC_ALGO = {
        name: "HMAC",
        hash: exports.SHA_1_HASH
      };
      exports.EMPTY_DATA_SHA_1 = new Uint8Array([218, 57, 163, 238, 94, 107, 75, 13, 50, 85, 191, 239, 149, 96, 24, 144, 175, 216, 7, 9]);
    })(constants$2);
    return constants$2;
  }

  const fallbackWindow = {};
  function locateWindow() {
    if (typeof window !== "undefined") {
      return window;
    } else if (typeof self !== "undefined") {
      return self;
    }
    return fallbackWindow;
  }

  var distEs = /*#__PURE__*/Object.freeze({
    __proto__: null,
    locateWindow: locateWindow
  });

  var require$$5 = /*@__PURE__*/getAugmentedNamespace(distEs);

  var hasRequiredIe11Sha1;
  function requireIe11Sha1() {
    if (hasRequiredIe11Sha1) return ie11Sha1;
    hasRequiredIe11Sha1 = 1;
    Object.defineProperty(ie11Sha1, "__esModule", {
      value: true
    });
    ie11Sha1.Sha1 = void 0;
    var isEmptyData_1 = requireIsEmptyData$1();
    var constants_1 = requireConstants$2();
    var util_utf8_browser_1 = require$$2;
    var util_locate_window_1 = require$$5;
    var Sha1 = /** @class */function () {
      function Sha1(secret) {
        this.secret = secret;
        this.reset();
      }
      Sha1.prototype.update = function (toHash) {
        var _this = this;
        if ((0, isEmptyData_1.isEmptyData)(toHash)) {
          return;
        }
        this.operation = this.operation.then(function (operation) {
          operation.onerror = function () {
            _this.operation = Promise.reject(new Error("Error encountered updating hash"));
          };
          operation.process(toArrayBufferView(toHash));
          return operation;
        });
        this.operation.catch(function () {});
      };
      Sha1.prototype.digest = function () {
        return this.operation.then(function (operation) {
          return new Promise(function (resolve, reject) {
            operation.onerror = function () {
              reject(new Error("Error encountered finalizing hash"));
            };
            operation.oncomplete = function () {
              if (operation.result) {
                resolve(new Uint8Array(operation.result));
              }
              reject(new Error("Error encountered finalizing hash"));
            };
            operation.finish();
          });
        });
      };
      Sha1.prototype.reset = function () {
        if (this.secret) {
          this.operation = getKeyPromise(this.secret).then(function (keyData) {
            return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_1_HMAC_ALGO, keyData);
          });
          this.operation.catch(function () {});
        } else {
          this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest("SHA-1"));
        }
      };
      return Sha1;
    }();
    ie11Sha1.Sha1 = Sha1;
    function getKeyPromise(secret) {
      return new Promise(function (resolve, reject) {
        var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey("raw", toArrayBufferView(secret), constants_1.SHA_1_HMAC_ALGO, false, ["sign"]);
        keyOperation.oncomplete = function () {
          if (keyOperation.result) {
            resolve(keyOperation.result);
          }
          reject(new Error("ImportKey completed without importing key."));
        };
        keyOperation.onerror = function () {
          reject(new Error("ImportKey failed to import key."));
        };
      });
    }
    function toArrayBufferView(data) {
      if (typeof data === "string") {
        return (0, util_utf8_browser_1.fromUtf8)(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
    return ie11Sha1;
  }

  var webCryptoSha1 = {};

  var hasRequiredWebCryptoSha1;
  function requireWebCryptoSha1() {
    if (hasRequiredWebCryptoSha1) return webCryptoSha1;
    hasRequiredWebCryptoSha1 = 1;
    Object.defineProperty(webCryptoSha1, "__esModule", {
      value: true
    });
    webCryptoSha1.Sha1 = void 0;
    var util_utf8_browser_1 = require$$2;
    var isEmptyData_1 = requireIsEmptyData$1();
    var constants_1 = requireConstants$2();
    var util_locate_window_1 = require$$5;
    var Sha1 = /** @class */function () {
      function Sha1(secret) {
        this.toHash = new Uint8Array(0);
        if (secret !== void 0) {
          this.key = new Promise(function (resolve, reject) {
            (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey("raw", convertToBuffer(secret), constants_1.SHA_1_HMAC_ALGO, false, ["sign"]).then(resolve, reject);
          });
          this.key.catch(function () {});
        }
      }
      Sha1.prototype.update = function (data) {
        if ((0, isEmptyData_1.isEmptyData)(data)) {
          return;
        }
        var update = convertToBuffer(data);
        var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);
        typedArray.set(this.toHash, 0);
        typedArray.set(update, this.toHash.byteLength);
        this.toHash = typedArray;
      };
      Sha1.prototype.digest = function () {
        var _this = this;
        if (this.key) {
          return this.key.then(function (key) {
            return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_1_HMAC_ALGO, key, _this.toHash).then(function (data) {
              return new Uint8Array(data);
            });
          });
        }
        if ((0, isEmptyData_1.isEmptyData)(this.toHash)) {
          return Promise.resolve(constants_1.EMPTY_DATA_SHA_1);
        }
        return Promise.resolve().then(function () {
          return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_1_HASH, _this.toHash);
        }).then(function (data) {
          return Promise.resolve(new Uint8Array(data));
        });
      };
      Sha1.prototype.reset = function () {
        this.toHash = new Uint8Array(0);
      };
      return Sha1;
    }();
    webCryptoSha1.Sha1 = Sha1;
    function convertToBuffer(data) {
      if (typeof data === "string") {
        return (0, util_utf8_browser_1.fromUtf8)(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
    return webCryptoSha1;
  }

  var build$4 = {};

  var supportsWebCrypto = {};

  var hasRequiredSupportsWebCrypto;
  function requireSupportsWebCrypto() {
    if (hasRequiredSupportsWebCrypto) return supportsWebCrypto;
    hasRequiredSupportsWebCrypto = 1;
    Object.defineProperty(supportsWebCrypto, "__esModule", {
      value: true
    });
    supportsWebCrypto.supportsZeroByteGCM = supportsWebCrypto.supportsSubtleCrypto = supportsWebCrypto.supportsSecureRandom = supportsWebCrypto.supportsWebCrypto = void 0;
    var tslib_1 = require$$0;
    var subtleCryptoMethods = ["decrypt", "digest", "encrypt", "exportKey", "generateKey", "importKey", "sign", "verify"];
    function supportsWebCrypto$1(window) {
      if (supportsSecureRandom(window) && typeof window.crypto.subtle === "object") {
        var subtle = window.crypto.subtle;
        return supportsSubtleCrypto(subtle);
      }
      return false;
    }
    supportsWebCrypto.supportsWebCrypto = supportsWebCrypto$1;
    function supportsSecureRandom(window) {
      if (typeof window === "object" && typeof window.crypto === "object") {
        var getRandomValues = window.crypto.getRandomValues;
        return typeof getRandomValues === "function";
      }
      return false;
    }
    supportsWebCrypto.supportsSecureRandom = supportsSecureRandom;
    function supportsSubtleCrypto(subtle) {
      return subtle && subtleCryptoMethods.every(function (methodName) {
        return typeof subtle[methodName] === "function";
      });
    }
    supportsWebCrypto.supportsSubtleCrypto = supportsSubtleCrypto;
    function supportsZeroByteGCM(subtle) {
      return tslib_1.__awaiter(this, void 0, void 0, function () {
        var key, zeroByteAuthTag;
        return tslib_1.__generator(this, function (_b) {
          switch (_b.label) {
            case 0:
              if (!supportsSubtleCrypto(subtle)) return [2 /*return*/, false];
              _b.label = 1;
            case 1:
              _b.trys.push([1, 4,, 5]);
              return [4 /*yield*/, subtle.generateKey({
                name: "AES-GCM",
                length: 128
              }, false, ["encrypt"])];
            case 2:
              key = _b.sent();
              return [4 /*yield*/, subtle.encrypt({
                name: "AES-GCM",
                iv: new Uint8Array(Array(12)),
                additionalData: new Uint8Array(Array(16)),
                tagLength: 128
              }, key, new Uint8Array(0))];
            case 3:
              zeroByteAuthTag = _b.sent();
              return [2 /*return*/, zeroByteAuthTag.byteLength === 16];
            case 4:
              _b.sent();
              return [2 /*return*/, false];
            case 5:
              return [2 /*return*/];
          }
        });
      });
    }

    supportsWebCrypto.supportsZeroByteGCM = supportsZeroByteGCM;
    return supportsWebCrypto;
  }

  var hasRequiredBuild$3;
  function requireBuild$3() {
    if (hasRequiredBuild$3) return build$4;
    hasRequiredBuild$3 = 1;
    (function (exports) {

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var tslib_1 = require$$0;
      tslib_1.__exportStar(requireSupportsWebCrypto(), exports);
    })(build$4);
    return build$4;
  }

  var build$3 = {};

  var CryptoOperation = {};

  var hasRequiredCryptoOperation;
  function requireCryptoOperation() {
    if (hasRequiredCryptoOperation) return CryptoOperation;
    hasRequiredCryptoOperation = 1;
    Object.defineProperty(CryptoOperation, "__esModule", {
      value: true
    });
    return CryptoOperation;
  }

  var Key = {};

  var hasRequiredKey;
  function requireKey() {
    if (hasRequiredKey) return Key;
    hasRequiredKey = 1;
    Object.defineProperty(Key, "__esModule", {
      value: true
    });
    return Key;
  }

  var KeyOperation = {};

  var hasRequiredKeyOperation;
  function requireKeyOperation() {
    if (hasRequiredKeyOperation) return KeyOperation;
    hasRequiredKeyOperation = 1;
    Object.defineProperty(KeyOperation, "__esModule", {
      value: true
    });
    return KeyOperation;
  }

  var MsSubtleCrypto = {};

  var hasRequiredMsSubtleCrypto;
  function requireMsSubtleCrypto() {
    if (hasRequiredMsSubtleCrypto) return MsSubtleCrypto;
    hasRequiredMsSubtleCrypto = 1;
    Object.defineProperty(MsSubtleCrypto, "__esModule", {
      value: true
    });
    return MsSubtleCrypto;
  }

  var MsWindow = {};

  var hasRequiredMsWindow;
  function requireMsWindow() {
    if (hasRequiredMsWindow) return MsWindow;
    hasRequiredMsWindow = 1;
    Object.defineProperty(MsWindow, "__esModule", {
      value: true
    });
    MsWindow.isMsWindow = void 0;
    var msSubtleCryptoMethods = ["decrypt", "digest", "encrypt", "exportKey", "generateKey", "importKey", "sign", "verify"];
    function quacksLikeAnMsWindow(window) {
      return "MSInputMethodContext" in window && "msCrypto" in window;
    }
    /**
     * Determines if the provided window is (or is like) the window object one would
     * expect to encounter in Internet Explorer 11.
     */
    function isMsWindow(window) {
      if (quacksLikeAnMsWindow(window) && window.msCrypto.subtle !== undefined) {
        var _a = window.msCrypto,
          getRandomValues = _a.getRandomValues,
          subtle_1 = _a.subtle;
        return msSubtleCryptoMethods.map(function (methodName) {
          return subtle_1[methodName];
        }).concat(getRandomValues).every(function (method) {
          return typeof method === "function";
        });
      }
      return false;
    }
    MsWindow.isMsWindow = isMsWindow;
    return MsWindow;
  }

  var hasRequiredBuild$2;
  function requireBuild$2() {
    if (hasRequiredBuild$2) return build$3;
    hasRequiredBuild$2 = 1;
    (function (exports) {

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var tslib_1 = require$$0;
      tslib_1.__exportStar(requireCryptoOperation(), exports);
      tslib_1.__exportStar(requireKey(), exports);
      tslib_1.__exportStar(requireKeyOperation(), exports);
      tslib_1.__exportStar(requireMsSubtleCrypto(), exports);
      tslib_1.__exportStar(requireMsWindow(), exports);
    })(build$3);
    return build$3;
  }

  var hasRequiredCrossPlatformSha1;
  function requireCrossPlatformSha1() {
    if (hasRequiredCrossPlatformSha1) return crossPlatformSha1;
    hasRequiredCrossPlatformSha1 = 1;
    Object.defineProperty(crossPlatformSha1, "__esModule", {
      value: true
    });
    crossPlatformSha1.Sha1 = void 0;
    var ie11Sha1_1 = requireIe11Sha1();
    var webCryptoSha1_1 = requireWebCryptoSha1();
    var supports_web_crypto_1 = requireBuild$3();
    var ie11_detection_1 = requireBuild$2();
    var util_locate_window_1 = require$$5;
    var util_1 = requireBuild$5();
    var Sha1 = /** @class */function () {
      function Sha1(secret) {
        if ((0, supports_web_crypto_1.supportsWebCrypto)((0, util_locate_window_1.locateWindow)())) {
          this.hash = new webCryptoSha1_1.Sha1(secret);
        } else if ((0, ie11_detection_1.isMsWindow)((0, util_locate_window_1.locateWindow)())) {
          this.hash = new ie11Sha1_1.Sha1(secret);
        } else {
          throw new Error("SHA1 not supported");
        }
      }
      Sha1.prototype.update = function (data, encoding) {
        this.hash.update((0, util_1.convertToBuffer)(data));
      };
      Sha1.prototype.digest = function () {
        return this.hash.digest();
      };
      Sha1.prototype.reset = function () {
        this.hash.reset();
      };
      return Sha1;
    }();
    crossPlatformSha1.Sha1 = Sha1;
    return crossPlatformSha1;
  }

  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WebCryptoSha1 = exports.Ie11Sha1 = void 0;
    var tslib_1 = require$$0;
    tslib_1.__exportStar(requireCrossPlatformSha1(), exports);
    var ie11Sha1_1 = requireIe11Sha1();
    Object.defineProperty(exports, "Ie11Sha1", {
      enumerable: true,
      get: function () {
        return ie11Sha1_1.Sha1;
      }
    });
    var webCryptoSha1_1 = requireWebCryptoSha1();
    Object.defineProperty(exports, "WebCryptoSha1", {
      enumerable: true,
      get: function () {
        return webCryptoSha1_1.Sha1;
      }
    });
  })(build$5);

  var build$2 = {};

  var crossPlatformSha256 = {};

  var ie11Sha256 = {};

  var isEmptyData$1 = {};

  var hasRequiredIsEmptyData;
  function requireIsEmptyData() {
    if (hasRequiredIsEmptyData) return isEmptyData$1;
    hasRequiredIsEmptyData = 1;
    Object.defineProperty(isEmptyData$1, "__esModule", {
      value: true
    });
    isEmptyData$1.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    isEmptyData$1.isEmptyData = isEmptyData;
    return isEmptyData$1;
  }

  var constants$1 = {};

  var hasRequiredConstants$1;
  function requireConstants$1() {
    if (hasRequiredConstants$1) return constants$1;
    hasRequiredConstants$1 = 1;
    (function (exports) {

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.EMPTY_DATA_SHA_256 = exports.SHA_256_HMAC_ALGO = exports.SHA_256_HASH = void 0;
      exports.SHA_256_HASH = {
        name: "SHA-256"
      };
      exports.SHA_256_HMAC_ALGO = {
        name: "HMAC",
        hash: exports.SHA_256_HASH
      };
      exports.EMPTY_DATA_SHA_256 = new Uint8Array([227, 176, 196, 66, 152, 252, 28, 20, 154, 251, 244, 200, 153, 111, 185, 36, 39, 174, 65, 228, 100, 155, 147, 76, 164, 149, 153, 27, 120, 82, 184, 85]);
    })(constants$1);
    return constants$1;
  }

  var hasRequiredIe11Sha256;
  function requireIe11Sha256() {
    if (hasRequiredIe11Sha256) return ie11Sha256;
    hasRequiredIe11Sha256 = 1;
    Object.defineProperty(ie11Sha256, "__esModule", {
      value: true
    });
    ie11Sha256.Sha256 = void 0;
    var isEmptyData_1 = requireIsEmptyData();
    var constants_1 = requireConstants$1();
    var util_utf8_browser_1 = require$$2;
    var util_locate_window_1 = require$$5;
    var Sha256 = /** @class */function () {
      function Sha256(secret) {
        this.secret = secret;
        this.reset();
      }
      Sha256.prototype.update = function (toHash) {
        var _this = this;
        if ((0, isEmptyData_1.isEmptyData)(toHash)) {
          return;
        }
        this.operation = this.operation.then(function (operation) {
          operation.onerror = function () {
            _this.operation = Promise.reject(new Error("Error encountered updating hash"));
          };
          operation.process(toArrayBufferView(toHash));
          return operation;
        });
        this.operation.catch(function () {});
      };
      Sha256.prototype.digest = function () {
        return this.operation.then(function (operation) {
          return new Promise(function (resolve, reject) {
            operation.onerror = function () {
              reject(new Error("Error encountered finalizing hash"));
            };
            operation.oncomplete = function () {
              if (operation.result) {
                resolve(new Uint8Array(operation.result));
              }
              reject(new Error("Error encountered finalizing hash"));
            };
            operation.finish();
          });
        });
      };
      Sha256.prototype.reset = function () {
        if (this.secret) {
          this.operation = getKeyPromise(this.secret).then(function (keyData) {
            return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);
          });
          this.operation.catch(function () {});
        } else {
          this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest("SHA-256"));
        }
      };
      return Sha256;
    }();
    ie11Sha256.Sha256 = Sha256;
    function getKeyPromise(secret) {
      return new Promise(function (resolve, reject) {
        var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey("raw", toArrayBufferView(secret), constants_1.SHA_256_HMAC_ALGO, false, ["sign"]);
        keyOperation.oncomplete = function () {
          if (keyOperation.result) {
            resolve(keyOperation.result);
          }
          reject(new Error("ImportKey completed without importing key."));
        };
        keyOperation.onerror = function () {
          reject(new Error("ImportKey failed to import key."));
        };
      });
    }
    function toArrayBufferView(data) {
      if (typeof data === "string") {
        return (0, util_utf8_browser_1.fromUtf8)(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
    return ie11Sha256;
  }

  var webCryptoSha256 = {};

  var hasRequiredWebCryptoSha256;
  function requireWebCryptoSha256() {
    if (hasRequiredWebCryptoSha256) return webCryptoSha256;
    hasRequiredWebCryptoSha256 = 1;
    Object.defineProperty(webCryptoSha256, "__esModule", {
      value: true
    });
    webCryptoSha256.Sha256 = void 0;
    var util_1 = requireBuild$5();
    var constants_1 = requireConstants$1();
    var util_locate_window_1 = require$$5;
    var Sha256 = /** @class */function () {
      function Sha256(secret) {
        this.toHash = new Uint8Array(0);
        this.secret = secret;
        this.reset();
      }
      Sha256.prototype.update = function (data) {
        if ((0, util_1.isEmptyData)(data)) {
          return;
        }
        var update = (0, util_1.convertToBuffer)(data);
        var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);
        typedArray.set(this.toHash, 0);
        typedArray.set(update, this.toHash.byteLength);
        this.toHash = typedArray;
      };
      Sha256.prototype.digest = function () {
        var _this = this;
        if (this.key) {
          return this.key.then(function (key) {
            return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, key, _this.toHash).then(function (data) {
              return new Uint8Array(data);
            });
          });
        }
        if ((0, util_1.isEmptyData)(this.toHash)) {
          return Promise.resolve(constants_1.EMPTY_DATA_SHA_256);
        }
        return Promise.resolve().then(function () {
          return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_256_HASH, _this.toHash);
        }).then(function (data) {
          return Promise.resolve(new Uint8Array(data));
        });
      };
      Sha256.prototype.reset = function () {
        var _this = this;
        this.toHash = new Uint8Array(0);
        if (this.secret && this.secret !== void 0) {
          this.key = new Promise(function (resolve, reject) {
            (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey("raw", (0, util_1.convertToBuffer)(_this.secret), constants_1.SHA_256_HMAC_ALGO, false, ["sign"]).then(resolve, reject);
          });
          this.key.catch(function () {});
        }
      };
      return Sha256;
    }();
    webCryptoSha256.Sha256 = Sha256;
    return webCryptoSha256;
  }

  var build$1 = {};

  var jsSha256 = {};

  var constants = {};

  var hasRequiredConstants;
  function requireConstants() {
    if (hasRequiredConstants) return constants;
    hasRequiredConstants = 1;
    Object.defineProperty(constants, "__esModule", {
      value: true
    });
    constants.MAX_HASHABLE_LENGTH = constants.INIT = constants.KEY = constants.DIGEST_LENGTH = constants.BLOCK_SIZE = void 0;
    /**
     * @internal
     */
    constants.BLOCK_SIZE = 64;
    /**
     * @internal
     */
    constants.DIGEST_LENGTH = 32;
    /**
     * @internal
     */
    constants.KEY = new Uint32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]);
    /**
     * @internal
     */
    constants.INIT = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];
    /**
     * @internal
     */
    constants.MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;
    return constants;
  }

  var RawSha256 = {};

  var hasRequiredRawSha256;
  function requireRawSha256() {
    if (hasRequiredRawSha256) return RawSha256;
    hasRequiredRawSha256 = 1;
    Object.defineProperty(RawSha256, "__esModule", {
      value: true
    });
    RawSha256.RawSha256 = void 0;
    var constants_1 = requireConstants();
    /**
     * @internal
     */
    var RawSha256$1 = /** @class */function () {
      function RawSha256() {
        this.state = Int32Array.from(constants_1.INIT);
        this.temp = new Int32Array(64);
        this.buffer = new Uint8Array(64);
        this.bufferLength = 0;
        this.bytesHashed = 0;
        /**
         * @internal
         */
        this.finished = false;
      }
      RawSha256.prototype.update = function (data) {
        if (this.finished) {
          throw new Error("Attempted to update an already finished hash.");
        }
        var position = 0;
        var byteLength = data.byteLength;
        this.bytesHashed += byteLength;
        if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) {
          throw new Error("Cannot hash more than 2^53 - 1 bits");
        }
        while (byteLength > 0) {
          this.buffer[this.bufferLength++] = data[position++];
          byteLength--;
          if (this.bufferLength === constants_1.BLOCK_SIZE) {
            this.hashBuffer();
            this.bufferLength = 0;
          }
        }
      };
      RawSha256.prototype.digest = function () {
        if (!this.finished) {
          var bitsHashed = this.bytesHashed * 8;
          var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
          var undecoratedLength = this.bufferLength;
          bufferView.setUint8(this.bufferLength++, 0x80);
          // Ensure the final block has enough room for the hashed length
          if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {
            for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE; i++) {
              bufferView.setUint8(i, 0);
            }
            this.hashBuffer();
            this.bufferLength = 0;
          }
          for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE - 8; i++) {
            bufferView.setUint8(i, 0);
          }
          bufferView.setUint32(constants_1.BLOCK_SIZE - 8, Math.floor(bitsHashed / 0x100000000), true);
          bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);
          this.hashBuffer();
          this.finished = true;
        }
        // The value in state is little-endian rather than big-endian, so flip
        // each word into a new Uint8Array
        var out = new Uint8Array(constants_1.DIGEST_LENGTH);
        for (var i = 0; i < 8; i++) {
          out[i * 4] = this.state[i] >>> 24 & 0xff;
          out[i * 4 + 1] = this.state[i] >>> 16 & 0xff;
          out[i * 4 + 2] = this.state[i] >>> 8 & 0xff;
          out[i * 4 + 3] = this.state[i] >>> 0 & 0xff;
        }
        return out;
      };
      RawSha256.prototype.hashBuffer = function () {
        var _a = this,
          buffer = _a.buffer,
          state = _a.state;
        var state0 = state[0],
          state1 = state[1],
          state2 = state[2],
          state3 = state[3],
          state4 = state[4],
          state5 = state[5],
          state6 = state[6],
          state7 = state[7];
        for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {
          if (i < 16) {
            this.temp[i] = (buffer[i * 4] & 0xff) << 24 | (buffer[i * 4 + 1] & 0xff) << 16 | (buffer[i * 4 + 2] & 0xff) << 8 | buffer[i * 4 + 3] & 0xff;
          } else {
            var u = this.temp[i - 2];
            var t1_1 = (u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10;
            u = this.temp[i - 15];
            var t2_1 = (u >>> 7 | u << 25) ^ (u >>> 18 | u << 14) ^ u >>> 3;
            this.temp[i] = (t1_1 + this.temp[i - 7] | 0) + (t2_1 + this.temp[i - 16] | 0);
          }
          var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (constants_1.KEY[i] + this.temp[i] | 0) | 0) | 0;
          var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;
          state7 = state6;
          state6 = state5;
          state5 = state4;
          state4 = state3 + t1 | 0;
          state3 = state2;
          state2 = state1;
          state1 = state0;
          state0 = t1 + t2 | 0;
        }
        state[0] += state0;
        state[1] += state1;
        state[2] += state2;
        state[3] += state3;
        state[4] += state4;
        state[5] += state5;
        state[6] += state6;
        state[7] += state7;
      };
      return RawSha256;
    }();
    RawSha256.RawSha256 = RawSha256$1;
    return RawSha256;
  }

  var hasRequiredJsSha256;
  function requireJsSha256() {
    if (hasRequiredJsSha256) return jsSha256;
    hasRequiredJsSha256 = 1;
    Object.defineProperty(jsSha256, "__esModule", {
      value: true
    });
    jsSha256.Sha256 = void 0;
    var tslib_1 = require$$0;
    var constants_1 = requireConstants();
    var RawSha256_1 = requireRawSha256();
    var util_1 = requireBuild$5();
    var Sha256 = /** @class */function () {
      function Sha256(secret) {
        this.secret = secret;
        this.hash = new RawSha256_1.RawSha256();
        this.reset();
      }
      Sha256.prototype.update = function (toHash) {
        if ((0, util_1.isEmptyData)(toHash) || this.error) {
          return;
        }
        try {
          this.hash.update((0, util_1.convertToBuffer)(toHash));
        } catch (e) {
          this.error = e;
        }
      };
      /* This synchronous method keeps compatibility
       * with the v2 aws-sdk.
       */
      Sha256.prototype.digestSync = function () {
        if (this.error) {
          throw this.error;
        }
        if (this.outer) {
          if (!this.outer.finished) {
            this.outer.update(this.hash.digest());
          }
          return this.outer.digest();
        }
        return this.hash.digest();
      };
      /* The underlying digest method here is synchronous.
       * To keep the same interface with the other hash functions
       * the default is to expose this as an async method.
       * However, it can sometimes be useful to have a sync method.
       */
      Sha256.prototype.digest = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
          return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, this.digestSync()];
          });
        });
      };
      Sha256.prototype.reset = function () {
        this.hash = new RawSha256_1.RawSha256();
        if (this.secret) {
          this.outer = new RawSha256_1.RawSha256();
          var inner = bufferFromSecret(this.secret);
          var outer = new Uint8Array(constants_1.BLOCK_SIZE);
          outer.set(inner);
          for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {
            inner[i] ^= 0x36;
            outer[i] ^= 0x5c;
          }
          this.hash.update(inner);
          this.outer.update(outer);
          // overwrite the copied key in memory
          for (var i = 0; i < inner.byteLength; i++) {
            inner[i] = 0;
          }
        }
      };
      return Sha256;
    }();
    jsSha256.Sha256 = Sha256;
    function bufferFromSecret(secret) {
      var input = (0, util_1.convertToBuffer)(secret);
      if (input.byteLength > constants_1.BLOCK_SIZE) {
        var bufferHash = new RawSha256_1.RawSha256();
        bufferHash.update(input);
        input = bufferHash.digest();
      }
      var buffer = new Uint8Array(constants_1.BLOCK_SIZE);
      buffer.set(input);
      return buffer;
    }
    return jsSha256;
  }

  var hasRequiredBuild$1;
  function requireBuild$1() {
    if (hasRequiredBuild$1) return build$1;
    hasRequiredBuild$1 = 1;
    (function (exports) {

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var tslib_1 = require$$0;
      tslib_1.__exportStar(requireJsSha256(), exports);
    })(build$1);
    return build$1;
  }

  var hasRequiredCrossPlatformSha256;
  function requireCrossPlatformSha256() {
    if (hasRequiredCrossPlatformSha256) return crossPlatformSha256;
    hasRequiredCrossPlatformSha256 = 1;
    Object.defineProperty(crossPlatformSha256, "__esModule", {
      value: true
    });
    crossPlatformSha256.Sha256 = void 0;
    var ie11Sha256_1 = requireIe11Sha256();
    var webCryptoSha256_1 = requireWebCryptoSha256();
    var sha256_js_1 = requireBuild$1();
    var supports_web_crypto_1 = requireBuild$3();
    var ie11_detection_1 = requireBuild$2();
    var util_locate_window_1 = require$$5;
    var util_1 = requireBuild$5();
    var Sha256 = /** @class */function () {
      function Sha256(secret) {
        if ((0, supports_web_crypto_1.supportsWebCrypto)((0, util_locate_window_1.locateWindow)())) {
          this.hash = new webCryptoSha256_1.Sha256(secret);
        } else if ((0, ie11_detection_1.isMsWindow)((0, util_locate_window_1.locateWindow)())) {
          this.hash = new ie11Sha256_1.Sha256(secret);
        } else {
          this.hash = new sha256_js_1.Sha256(secret);
        }
      }
      Sha256.prototype.update = function (data, encoding) {
        this.hash.update((0, util_1.convertToBuffer)(data));
      };
      Sha256.prototype.digest = function () {
        return this.hash.digest();
      };
      Sha256.prototype.reset = function () {
        this.hash.reset();
      };
      return Sha256;
    }();
    crossPlatformSha256.Sha256 = Sha256;
    return crossPlatformSha256;
  }

  (function (exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.WebCryptoSha256 = exports.Ie11Sha256 = void 0;
    var tslib_1 = require$$0;
    tslib_1.__exportStar(requireCrossPlatformSha256(), exports);
    var ie11Sha256_1 = requireIe11Sha256();
    Object.defineProperty(exports, "Ie11Sha256", {
      enumerable: true,
      get: function () {
        return ie11Sha256_1.Sha256;
      }
    });
    var webCryptoSha256_1 = requireWebCryptoSha256();
    Object.defineProperty(exports, "WebCryptoSha256", {
      enumerable: true,
      get: function () {
        return webCryptoSha256_1.Sha256;
      }
    });
  })(build$2);

  var es5 = {exports: {}};

  (function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {
      return function (e) {
        var t = {};
        function r(n) {
          if (t[n]) return t[n].exports;
          var i = t[n] = {
            i: n,
            l: !1,
            exports: {}
          };
          return e[n].call(i.exports, i, i.exports, r), i.l = !0, i.exports;
        }
        return r.m = e, r.c = t, r.d = function (e, t, n) {
          r.o(e, t) || Object.defineProperty(e, t, {
            enumerable: !0,
            get: n
          });
        }, r.r = function (e) {
          "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
            value: "Module"
          }), Object.defineProperty(e, "__esModule", {
            value: !0
          });
        }, r.t = function (e, t) {
          if (1 & t && (e = r(e)), 8 & t) return e;
          if (4 & t && "object" == typeof e && e && e.__esModule) return e;
          var n = Object.create(null);
          if (r.r(n), Object.defineProperty(n, "default", {
            enumerable: !0,
            value: e
          }), 2 & t && "string" != typeof e) for (var i in e) r.d(n, i, function (t) {
            return e[t];
          }.bind(null, i));
          return n;
        }, r.n = function (e) {
          var t = e && e.__esModule ? function () {
            return e.default;
          } : function () {
            return e;
          };
          return r.d(t, "a", t), t;
        }, r.o = function (e, t) {
          return Object.prototype.hasOwnProperty.call(e, t);
        }, r.p = "", r(r.s = 90);
      }({
        17: function (e, t, r) {

          t.__esModule = !0, t.default = void 0;
          var n = r(18),
            i = function () {
              function e() {}
              return e.getFirstMatch = function (e, t) {
                var r = t.match(e);
                return r && r.length > 0 && r[1] || "";
              }, e.getSecondMatch = function (e, t) {
                var r = t.match(e);
                return r && r.length > 1 && r[2] || "";
              }, e.matchAndReturnConst = function (e, t, r) {
                if (e.test(t)) return r;
              }, e.getWindowsVersionName = function (e) {
                switch (e) {
                  case "NT":
                    return "NT";
                  case "XP":
                    return "XP";
                  case "NT 5.0":
                    return "2000";
                  case "NT 5.1":
                    return "XP";
                  case "NT 5.2":
                    return "2003";
                  case "NT 6.0":
                    return "Vista";
                  case "NT 6.1":
                    return "7";
                  case "NT 6.2":
                    return "8";
                  case "NT 6.3":
                    return "8.1";
                  case "NT 10.0":
                    return "10";
                  default:
                    return;
                }
              }, e.getMacOSVersionName = function (e) {
                var t = e.split(".").splice(0, 2).map(function (e) {
                  return parseInt(e, 10) || 0;
                });
                if (t.push(0), 10 === t[0]) switch (t[1]) {
                  case 5:
                    return "Leopard";
                  case 6:
                    return "Snow Leopard";
                  case 7:
                    return "Lion";
                  case 8:
                    return "Mountain Lion";
                  case 9:
                    return "Mavericks";
                  case 10:
                    return "Yosemite";
                  case 11:
                    return "El Capitan";
                  case 12:
                    return "Sierra";
                  case 13:
                    return "High Sierra";
                  case 14:
                    return "Mojave";
                  case 15:
                    return "Catalina";
                  default:
                    return;
                }
              }, e.getAndroidVersionName = function (e) {
                var t = e.split(".").splice(0, 2).map(function (e) {
                  return parseInt(e, 10) || 0;
                });
                if (t.push(0), !(1 === t[0] && t[1] < 5)) return 1 === t[0] && t[1] < 6 ? "Cupcake" : 1 === t[0] && t[1] >= 6 ? "Donut" : 2 === t[0] && t[1] < 2 ? "Eclair" : 2 === t[0] && 2 === t[1] ? "Froyo" : 2 === t[0] && t[1] > 2 ? "Gingerbread" : 3 === t[0] ? "Honeycomb" : 4 === t[0] && t[1] < 1 ? "Ice Cream Sandwich" : 4 === t[0] && t[1] < 4 ? "Jelly Bean" : 4 === t[0] && t[1] >= 4 ? "KitKat" : 5 === t[0] ? "Lollipop" : 6 === t[0] ? "Marshmallow" : 7 === t[0] ? "Nougat" : 8 === t[0] ? "Oreo" : 9 === t[0] ? "Pie" : void 0;
              }, e.getVersionPrecision = function (e) {
                return e.split(".").length;
              }, e.compareVersions = function (t, r, n) {
                void 0 === n && (n = !1);
                var i = e.getVersionPrecision(t),
                  s = e.getVersionPrecision(r),
                  a = Math.max(i, s),
                  o = 0,
                  u = e.map([t, r], function (t) {
                    var r = a - e.getVersionPrecision(t),
                      n = t + new Array(r + 1).join(".0");
                    return e.map(n.split("."), function (e) {
                      return new Array(20 - e.length).join("0") + e;
                    }).reverse();
                  });
                for (n && (o = a - Math.min(i, s)), a -= 1; a >= o;) {
                  if (u[0][a] > u[1][a]) return 1;
                  if (u[0][a] === u[1][a]) {
                    if (a === o) return 0;
                    a -= 1;
                  } else if (u[0][a] < u[1][a]) return -1;
                }
              }, e.map = function (e, t) {
                var r,
                  n = [];
                if (Array.prototype.map) return Array.prototype.map.call(e, t);
                for (r = 0; r < e.length; r += 1) n.push(t(e[r]));
                return n;
              }, e.find = function (e, t) {
                var r, n;
                if (Array.prototype.find) return Array.prototype.find.call(e, t);
                for (r = 0, n = e.length; r < n; r += 1) {
                  var i = e[r];
                  if (t(i, r)) return i;
                }
              }, e.assign = function (e) {
                for (var t, r, n = e, i = arguments.length, s = new Array(i > 1 ? i - 1 : 0), a = 1; a < i; a++) s[a - 1] = arguments[a];
                if (Object.assign) return Object.assign.apply(Object, [e].concat(s));
                var o = function () {
                  var e = s[t];
                  "object" == typeof e && null !== e && Object.keys(e).forEach(function (t) {
                    n[t] = e[t];
                  });
                };
                for (t = 0, r = s.length; t < r; t += 1) o();
                return e;
              }, e.getBrowserAlias = function (e) {
                return n.BROWSER_ALIASES_MAP[e];
              }, e.getBrowserTypeByAlias = function (e) {
                return n.BROWSER_MAP[e] || "";
              }, e;
            }();
          t.default = i, e.exports = t.default;
        },
        18: function (e, t, r) {

          t.__esModule = !0, t.ENGINE_MAP = t.OS_MAP = t.PLATFORMS_MAP = t.BROWSER_MAP = t.BROWSER_ALIASES_MAP = void 0;
          t.BROWSER_ALIASES_MAP = {
            "Amazon Silk": "amazon_silk",
            "Android Browser": "android",
            Bada: "bada",
            BlackBerry: "blackberry",
            Chrome: "chrome",
            Chromium: "chromium",
            Electron: "electron",
            Epiphany: "epiphany",
            Firefox: "firefox",
            Focus: "focus",
            Generic: "generic",
            "Google Search": "google_search",
            Googlebot: "googlebot",
            "Internet Explorer": "ie",
            "K-Meleon": "k_meleon",
            Maxthon: "maxthon",
            "Microsoft Edge": "edge",
            "MZ Browser": "mz",
            "NAVER Whale Browser": "naver",
            Opera: "opera",
            "Opera Coast": "opera_coast",
            PhantomJS: "phantomjs",
            Puffin: "puffin",
            QupZilla: "qupzilla",
            QQ: "qq",
            QQLite: "qqlite",
            Safari: "safari",
            Sailfish: "sailfish",
            "Samsung Internet for Android": "samsung_internet",
            SeaMonkey: "seamonkey",
            Sleipnir: "sleipnir",
            Swing: "swing",
            Tizen: "tizen",
            "UC Browser": "uc",
            Vivaldi: "vivaldi",
            "WebOS Browser": "webos",
            WeChat: "wechat",
            "Yandex Browser": "yandex",
            Roku: "roku"
          };
          t.BROWSER_MAP = {
            amazon_silk: "Amazon Silk",
            android: "Android Browser",
            bada: "Bada",
            blackberry: "BlackBerry",
            chrome: "Chrome",
            chromium: "Chromium",
            electron: "Electron",
            epiphany: "Epiphany",
            firefox: "Firefox",
            focus: "Focus",
            generic: "Generic",
            googlebot: "Googlebot",
            google_search: "Google Search",
            ie: "Internet Explorer",
            k_meleon: "K-Meleon",
            maxthon: "Maxthon",
            edge: "Microsoft Edge",
            mz: "MZ Browser",
            naver: "NAVER Whale Browser",
            opera: "Opera",
            opera_coast: "Opera Coast",
            phantomjs: "PhantomJS",
            puffin: "Puffin",
            qupzilla: "QupZilla",
            qq: "QQ Browser",
            qqlite: "QQ Browser Lite",
            safari: "Safari",
            sailfish: "Sailfish",
            samsung_internet: "Samsung Internet for Android",
            seamonkey: "SeaMonkey",
            sleipnir: "Sleipnir",
            swing: "Swing",
            tizen: "Tizen",
            uc: "UC Browser",
            vivaldi: "Vivaldi",
            webos: "WebOS Browser",
            wechat: "WeChat",
            yandex: "Yandex Browser"
          };
          t.PLATFORMS_MAP = {
            tablet: "tablet",
            mobile: "mobile",
            desktop: "desktop",
            tv: "tv"
          };
          t.OS_MAP = {
            WindowsPhone: "Windows Phone",
            Windows: "Windows",
            MacOS: "macOS",
            iOS: "iOS",
            Android: "Android",
            WebOS: "WebOS",
            BlackBerry: "BlackBerry",
            Bada: "Bada",
            Tizen: "Tizen",
            Linux: "Linux",
            ChromeOS: "Chrome OS",
            PlayStation4: "PlayStation 4",
            Roku: "Roku"
          };
          t.ENGINE_MAP = {
            EdgeHTML: "EdgeHTML",
            Blink: "Blink",
            Trident: "Trident",
            Presto: "Presto",
            Gecko: "Gecko",
            WebKit: "WebKit"
          };
        },
        90: function (e, t, r) {

          t.__esModule = !0, t.default = void 0;
          var n,
            i = (n = r(91)) && n.__esModule ? n : {
              default: n
            },
            s = r(18);
          function a(e, t) {
            for (var r = 0; r < t.length; r++) {
              var n = t[r];
              n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
            }
          }
          var o = function () {
            function e() {}
            var t, r, n;
            return e.getParser = function (e, t) {
              if (void 0 === t && (t = !1), "string" != typeof e) throw new Error("UserAgent should be a string");
              return new i.default(e, t);
            }, e.parse = function (e) {
              return new i.default(e).getResult();
            }, t = e, n = [{
              key: "BROWSER_MAP",
              get: function () {
                return s.BROWSER_MAP;
              }
            }, {
              key: "ENGINE_MAP",
              get: function () {
                return s.ENGINE_MAP;
              }
            }, {
              key: "OS_MAP",
              get: function () {
                return s.OS_MAP;
              }
            }, {
              key: "PLATFORMS_MAP",
              get: function () {
                return s.PLATFORMS_MAP;
              }
            }], (r = null) && a(t.prototype, r), n && a(t, n), e;
          }();
          t.default = o, e.exports = t.default;
        },
        91: function (e, t, r) {

          t.__esModule = !0, t.default = void 0;
          var n = u(r(92)),
            i = u(r(93)),
            s = u(r(94)),
            a = u(r(95)),
            o = u(r(17));
          function u(e) {
            return e && e.__esModule ? e : {
              default: e
            };
          }
          var d = function () {
            function e(e, t) {
              if (void 0 === t && (t = !1), null == e || "" === e) throw new Error("UserAgent parameter can't be empty");
              this._ua = e, this.parsedResult = {}, !0 !== t && this.parse();
            }
            var t = e.prototype;
            return t.getUA = function () {
              return this._ua;
            }, t.test = function (e) {
              return e.test(this._ua);
            }, t.parseBrowser = function () {
              var e = this;
              this.parsedResult.browser = {};
              var t = o.default.find(n.default, function (t) {
                if ("function" == typeof t.test) return t.test(e);
                if (t.test instanceof Array) return t.test.some(function (t) {
                  return e.test(t);
                });
                throw new Error("Browser's test function is not valid");
              });
              return t && (this.parsedResult.browser = t.describe(this.getUA())), this.parsedResult.browser;
            }, t.getBrowser = function () {
              return this.parsedResult.browser ? this.parsedResult.browser : this.parseBrowser();
            }, t.getBrowserName = function (e) {
              return e ? String(this.getBrowser().name).toLowerCase() || "" : this.getBrowser().name || "";
            }, t.getBrowserVersion = function () {
              return this.getBrowser().version;
            }, t.getOS = function () {
              return this.parsedResult.os ? this.parsedResult.os : this.parseOS();
            }, t.parseOS = function () {
              var e = this;
              this.parsedResult.os = {};
              var t = o.default.find(i.default, function (t) {
                if ("function" == typeof t.test) return t.test(e);
                if (t.test instanceof Array) return t.test.some(function (t) {
                  return e.test(t);
                });
                throw new Error("Browser's test function is not valid");
              });
              return t && (this.parsedResult.os = t.describe(this.getUA())), this.parsedResult.os;
            }, t.getOSName = function (e) {
              var t = this.getOS().name;
              return e ? String(t).toLowerCase() || "" : t || "";
            }, t.getOSVersion = function () {
              return this.getOS().version;
            }, t.getPlatform = function () {
              return this.parsedResult.platform ? this.parsedResult.platform : this.parsePlatform();
            }, t.getPlatformType = function (e) {
              void 0 === e && (e = !1);
              var t = this.getPlatform().type;
              return e ? String(t).toLowerCase() || "" : t || "";
            }, t.parsePlatform = function () {
              var e = this;
              this.parsedResult.platform = {};
              var t = o.default.find(s.default, function (t) {
                if ("function" == typeof t.test) return t.test(e);
                if (t.test instanceof Array) return t.test.some(function (t) {
                  return e.test(t);
                });
                throw new Error("Browser's test function is not valid");
              });
              return t && (this.parsedResult.platform = t.describe(this.getUA())), this.parsedResult.platform;
            }, t.getEngine = function () {
              return this.parsedResult.engine ? this.parsedResult.engine : this.parseEngine();
            }, t.getEngineName = function (e) {
              return e ? String(this.getEngine().name).toLowerCase() || "" : this.getEngine().name || "";
            }, t.parseEngine = function () {
              var e = this;
              this.parsedResult.engine = {};
              var t = o.default.find(a.default, function (t) {
                if ("function" == typeof t.test) return t.test(e);
                if (t.test instanceof Array) return t.test.some(function (t) {
                  return e.test(t);
                });
                throw new Error("Browser's test function is not valid");
              });
              return t && (this.parsedResult.engine = t.describe(this.getUA())), this.parsedResult.engine;
            }, t.parse = function () {
              return this.parseBrowser(), this.parseOS(), this.parsePlatform(), this.parseEngine(), this;
            }, t.getResult = function () {
              return o.default.assign({}, this.parsedResult);
            }, t.satisfies = function (e) {
              var t = this,
                r = {},
                n = 0,
                i = {},
                s = 0;
              if (Object.keys(e).forEach(function (t) {
                var a = e[t];
                "string" == typeof a ? (i[t] = a, s += 1) : "object" == typeof a && (r[t] = a, n += 1);
              }), n > 0) {
                var a = Object.keys(r),
                  u = o.default.find(a, function (e) {
                    return t.isOS(e);
                  });
                if (u) {
                  var d = this.satisfies(r[u]);
                  if (void 0 !== d) return d;
                }
                var c = o.default.find(a, function (e) {
                  return t.isPlatform(e);
                });
                if (c) {
                  var f = this.satisfies(r[c]);
                  if (void 0 !== f) return f;
                }
              }
              if (s > 0) {
                var l = Object.keys(i),
                  h = o.default.find(l, function (e) {
                    return t.isBrowser(e, !0);
                  });
                if (void 0 !== h) return this.compareVersion(i[h]);
              }
            }, t.isBrowser = function (e, t) {
              void 0 === t && (t = !1);
              var r = this.getBrowserName().toLowerCase(),
                n = e.toLowerCase(),
                i = o.default.getBrowserTypeByAlias(n);
              return t && i && (n = i.toLowerCase()), n === r;
            }, t.compareVersion = function (e) {
              var t = [0],
                r = e,
                n = !1,
                i = this.getBrowserVersion();
              if ("string" == typeof i) return ">" === e[0] || "<" === e[0] ? (r = e.substr(1), "=" === e[1] ? (n = !0, r = e.substr(2)) : t = [], ">" === e[0] ? t.push(1) : t.push(-1)) : "=" === e[0] ? r = e.substr(1) : "~" === e[0] && (n = !0, r = e.substr(1)), t.indexOf(o.default.compareVersions(i, r, n)) > -1;
            }, t.isOS = function (e) {
              return this.getOSName(!0) === String(e).toLowerCase();
            }, t.isPlatform = function (e) {
              return this.getPlatformType(!0) === String(e).toLowerCase();
            }, t.isEngine = function (e) {
              return this.getEngineName(!0) === String(e).toLowerCase();
            }, t.is = function (e, t) {
              return void 0 === t && (t = !1), this.isBrowser(e, t) || this.isOS(e) || this.isPlatform(e);
            }, t.some = function (e) {
              var t = this;
              return void 0 === e && (e = []), e.some(function (e) {
                return t.is(e);
              });
            }, e;
          }();
          t.default = d, e.exports = t.default;
        },
        92: function (e, t, r) {

          t.__esModule = !0, t.default = void 0;
          var n,
            i = (n = r(17)) && n.__esModule ? n : {
              default: n
            };
          var s = /version\/(\d+(\.?_?\d+)+)/i,
            a = [{
              test: [/googlebot/i],
              describe: function (e) {
                var t = {
                    name: "Googlebot"
                  },
                  r = i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/opera/i],
              describe: function (e) {
                var t = {
                    name: "Opera"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/opr\/|opios/i],
              describe: function (e) {
                var t = {
                    name: "Opera"
                  },
                  r = i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/SamsungBrowser/i],
              describe: function (e) {
                var t = {
                    name: "Samsung Internet for Android"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/Whale/i],
              describe: function (e) {
                var t = {
                    name: "NAVER Whale Browser"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/MZBrowser/i],
              describe: function (e) {
                var t = {
                    name: "MZ Browser"
                  },
                  r = i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/focus/i],
              describe: function (e) {
                var t = {
                    name: "Focus"
                  },
                  r = i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/swing/i],
              describe: function (e) {
                var t = {
                    name: "Swing"
                  },
                  r = i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/coast/i],
              describe: function (e) {
                var t = {
                    name: "Opera Coast"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/opt\/\d+(?:.?_?\d+)+/i],
              describe: function (e) {
                var t = {
                    name: "Opera Touch"
                  },
                  r = i.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/yabrowser/i],
              describe: function (e) {
                var t = {
                    name: "Yandex Browser"
                  },
                  r = i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/ucbrowser/i],
              describe: function (e) {
                var t = {
                    name: "UC Browser"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/Maxthon|mxios/i],
              describe: function (e) {
                var t = {
                    name: "Maxthon"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/epiphany/i],
              describe: function (e) {
                var t = {
                    name: "Epiphany"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/puffin/i],
              describe: function (e) {
                var t = {
                    name: "Puffin"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/sleipnir/i],
              describe: function (e) {
                var t = {
                    name: "Sleipnir"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/k-meleon/i],
              describe: function (e) {
                var t = {
                    name: "K-Meleon"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/micromessenger/i],
              describe: function (e) {
                var t = {
                    name: "WeChat"
                  },
                  r = i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/qqbrowser/i],
              describe: function (e) {
                var t = {
                    name: /qqbrowserlite/i.test(e) ? "QQ Browser Lite" : "QQ Browser"
                  },
                  r = i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/msie|trident/i],
              describe: function (e) {
                var t = {
                    name: "Internet Explorer"
                  },
                  r = i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/\sedg\//i],
              describe: function (e) {
                var t = {
                    name: "Microsoft Edge"
                  },
                  r = i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/edg([ea]|ios)/i],
              describe: function (e) {
                var t = {
                    name: "Microsoft Edge"
                  },
                  r = i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/vivaldi/i],
              describe: function (e) {
                var t = {
                    name: "Vivaldi"
                  },
                  r = i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/seamonkey/i],
              describe: function (e) {
                var t = {
                    name: "SeaMonkey"
                  },
                  r = i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/sailfish/i],
              describe: function (e) {
                var t = {
                    name: "Sailfish"
                  },
                  r = i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/silk/i],
              describe: function (e) {
                var t = {
                    name: "Amazon Silk"
                  },
                  r = i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/phantom/i],
              describe: function (e) {
                var t = {
                    name: "PhantomJS"
                  },
                  r = i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/slimerjs/i],
              describe: function (e) {
                var t = {
                    name: "SlimerJS"
                  },
                  r = i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
              describe: function (e) {
                var t = {
                    name: "BlackBerry"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/(web|hpw)[o0]s/i],
              describe: function (e) {
                var t = {
                    name: "WebOS Browser"
                  },
                  r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/bada/i],
              describe: function (e) {
                var t = {
                    name: "Bada"
                  },
                  r = i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/tizen/i],
              describe: function (e) {
                var t = {
                    name: "Tizen"
                  },
                  r = i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/qupzilla/i],
              describe: function (e) {
                var t = {
                    name: "QupZilla"
                  },
                  r = i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/firefox|iceweasel|fxios/i],
              describe: function (e) {
                var t = {
                    name: "Firefox"
                  },
                  r = i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/electron/i],
              describe: function (e) {
                var t = {
                    name: "Electron"
                  },
                  r = i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/MiuiBrowser/i],
              describe: function (e) {
                var t = {
                    name: "Miui"
                  },
                  r = i.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/chromium/i],
              describe: function (e) {
                var t = {
                    name: "Chromium"
                  },
                  r = i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/chrome|crios|crmo/i],
              describe: function (e) {
                var t = {
                    name: "Chrome"
                  },
                  r = i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/GSA/i],
              describe: function (e) {
                var t = {
                    name: "Google Search"
                  },
                  r = i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, e);
                return r && (t.version = r), t;
              }
            }, {
              test: function (e) {
                var t = !e.test(/like android/i),
                  r = e.test(/android/i);
                return t && r;
              },
              describe: function (e) {
                var t = {
                    name: "Android Browser"
                  },
                  r = i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/playstation 4/i],
              describe: function (e) {
                var t = {
                    name: "PlayStation 4"
                  },
                  r = i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/safari|applewebkit/i],
              describe: function (e) {
                var t = {
                    name: "Safari"
                  },
                  r = i.default.getFirstMatch(s, e);
                return r && (t.version = r), t;
              }
            }, {
              test: [/.*/i],
              describe: function (e) {
                var t = -1 !== e.search("\\(") ? /^(.*)\/(.*)[ \t]\((.*)/ : /^(.*)\/(.*) /;
                return {
                  name: i.default.getFirstMatch(t, e),
                  version: i.default.getSecondMatch(t, e)
                };
              }
            }];
          t.default = a, e.exports = t.default;
        },
        93: function (e, t, r) {

          t.__esModule = !0, t.default = void 0;
          var n,
            i = (n = r(17)) && n.__esModule ? n : {
              default: n
            },
            s = r(18);
          var a = [{
            test: [/Roku\/DVP/],
            describe: function (e) {
              var t = i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, e);
              return {
                name: s.OS_MAP.Roku,
                version: t
              };
            }
          }, {
            test: [/windows phone/i],
            describe: function (e) {
              var t = i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, e);
              return {
                name: s.OS_MAP.WindowsPhone,
                version: t
              };
            }
          }, {
            test: [/windows /i],
            describe: function (e) {
              var t = i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, e),
                r = i.default.getWindowsVersionName(t);
              return {
                name: s.OS_MAP.Windows,
                version: t,
                versionName: r
              };
            }
          }, {
            test: [/Macintosh(.*?) FxiOS(.*?)\//],
            describe: function (e) {
              var t = {
                  name: s.OS_MAP.iOS
                },
                r = i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/macintosh/i],
            describe: function (e) {
              var t = i.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e).replace(/[_\s]/g, "."),
                r = i.default.getMacOSVersionName(t),
                n = {
                  name: s.OS_MAP.MacOS,
                  version: t
                };
              return r && (n.versionName = r), n;
            }
          }, {
            test: [/(ipod|iphone|ipad)/i],
            describe: function (e) {
              var t = i.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e).replace(/[_\s]/g, ".");
              return {
                name: s.OS_MAP.iOS,
                version: t
              };
            }
          }, {
            test: function (e) {
              var t = !e.test(/like android/i),
                r = e.test(/android/i);
              return t && r;
            },
            describe: function (e) {
              var t = i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, e),
                r = i.default.getAndroidVersionName(t),
                n = {
                  name: s.OS_MAP.Android,
                  version: t
                };
              return r && (n.versionName = r), n;
            }
          }, {
            test: [/(web|hpw)[o0]s/i],
            describe: function (e) {
              var t = i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, e),
                r = {
                  name: s.OS_MAP.WebOS
                };
              return t && t.length && (r.version = t), r;
            }
          }, {
            test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
            describe: function (e) {
              var t = i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, e) || i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, e) || i.default.getFirstMatch(/\bbb(\d+)/i, e);
              return {
                name: s.OS_MAP.BlackBerry,
                version: t
              };
            }
          }, {
            test: [/bada/i],
            describe: function (e) {
              var t = i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, e);
              return {
                name: s.OS_MAP.Bada,
                version: t
              };
            }
          }, {
            test: [/tizen/i],
            describe: function (e) {
              var t = i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, e);
              return {
                name: s.OS_MAP.Tizen,
                version: t
              };
            }
          }, {
            test: [/linux/i],
            describe: function () {
              return {
                name: s.OS_MAP.Linux
              };
            }
          }, {
            test: [/CrOS/],
            describe: function () {
              return {
                name: s.OS_MAP.ChromeOS
              };
            }
          }, {
            test: [/PlayStation 4/],
            describe: function (e) {
              var t = i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, e);
              return {
                name: s.OS_MAP.PlayStation4,
                version: t
              };
            }
          }];
          t.default = a, e.exports = t.default;
        },
        94: function (e, t, r) {

          t.__esModule = !0, t.default = void 0;
          var n,
            i = (n = r(17)) && n.__esModule ? n : {
              default: n
            },
            s = r(18);
          var a = [{
            test: [/googlebot/i],
            describe: function () {
              return {
                type: "bot",
                vendor: "Google"
              };
            }
          }, {
            test: [/huawei/i],
            describe: function (e) {
              var t = i.default.getFirstMatch(/(can-l01)/i, e) && "Nova",
                r = {
                  type: s.PLATFORMS_MAP.mobile,
                  vendor: "Huawei"
                };
              return t && (r.model = t), r;
            }
          }, {
            test: [/nexus\s*(?:7|8|9|10).*/i],
            describe: function () {
              return {
                type: s.PLATFORMS_MAP.tablet,
                vendor: "Nexus"
              };
            }
          }, {
            test: [/ipad/i],
            describe: function () {
              return {
                type: s.PLATFORMS_MAP.tablet,
                vendor: "Apple",
                model: "iPad"
              };
            }
          }, {
            test: [/Macintosh(.*?) FxiOS(.*?)\//],
            describe: function () {
              return {
                type: s.PLATFORMS_MAP.tablet,
                vendor: "Apple",
                model: "iPad"
              };
            }
          }, {
            test: [/kftt build/i],
            describe: function () {
              return {
                type: s.PLATFORMS_MAP.tablet,
                vendor: "Amazon",
                model: "Kindle Fire HD 7"
              };
            }
          }, {
            test: [/silk/i],
            describe: function () {
              return {
                type: s.PLATFORMS_MAP.tablet,
                vendor: "Amazon"
              };
            }
          }, {
            test: [/tablet(?! pc)/i],
            describe: function () {
              return {
                type: s.PLATFORMS_MAP.tablet
              };
            }
          }, {
            test: function (e) {
              var t = e.test(/ipod|iphone/i),
                r = e.test(/like (ipod|iphone)/i);
              return t && !r;
            },
            describe: function (e) {
              var t = i.default.getFirstMatch(/(ipod|iphone)/i, e);
              return {
                type: s.PLATFORMS_MAP.mobile,
                vendor: "Apple",
                model: t
              };
            }
          }, {
            test: [/nexus\s*[0-6].*/i, /galaxy nexus/i],
            describe: function () {
              return {
                type: s.PLATFORMS_MAP.mobile,
                vendor: "Nexus"
              };
            }
          }, {
            test: [/[^-]mobi/i],
            describe: function () {
              return {
                type: s.PLATFORMS_MAP.mobile
              };
            }
          }, {
            test: function (e) {
              return "blackberry" === e.getBrowserName(!0);
            },
            describe: function () {
              return {
                type: s.PLATFORMS_MAP.mobile,
                vendor: "BlackBerry"
              };
            }
          }, {
            test: function (e) {
              return "bada" === e.getBrowserName(!0);
            },
            describe: function () {
              return {
                type: s.PLATFORMS_MAP.mobile
              };
            }
          }, {
            test: function (e) {
              return "windows phone" === e.getBrowserName();
            },
            describe: function () {
              return {
                type: s.PLATFORMS_MAP.mobile,
                vendor: "Microsoft"
              };
            }
          }, {
            test: function (e) {
              var t = Number(String(e.getOSVersion()).split(".")[0]);
              return "android" === e.getOSName(!0) && t >= 3;
            },
            describe: function () {
              return {
                type: s.PLATFORMS_MAP.tablet
              };
            }
          }, {
            test: function (e) {
              return "android" === e.getOSName(!0);
            },
            describe: function () {
              return {
                type: s.PLATFORMS_MAP.mobile
              };
            }
          }, {
            test: function (e) {
              return "macos" === e.getOSName(!0);
            },
            describe: function () {
              return {
                type: s.PLATFORMS_MAP.desktop,
                vendor: "Apple"
              };
            }
          }, {
            test: function (e) {
              return "windows" === e.getOSName(!0);
            },
            describe: function () {
              return {
                type: s.PLATFORMS_MAP.desktop
              };
            }
          }, {
            test: function (e) {
              return "linux" === e.getOSName(!0);
            },
            describe: function () {
              return {
                type: s.PLATFORMS_MAP.desktop
              };
            }
          }, {
            test: function (e) {
              return "playstation 4" === e.getOSName(!0);
            },
            describe: function () {
              return {
                type: s.PLATFORMS_MAP.tv
              };
            }
          }, {
            test: function (e) {
              return "roku" === e.getOSName(!0);
            },
            describe: function () {
              return {
                type: s.PLATFORMS_MAP.tv
              };
            }
          }];
          t.default = a, e.exports = t.default;
        },
        95: function (e, t, r) {

          t.__esModule = !0, t.default = void 0;
          var n,
            i = (n = r(17)) && n.__esModule ? n : {
              default: n
            },
            s = r(18);
          var a = [{
            test: function (e) {
              return "microsoft edge" === e.getBrowserName(!0);
            },
            describe: function (e) {
              if (/\sedg\//i.test(e)) return {
                name: s.ENGINE_MAP.Blink
              };
              var t = i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, e);
              return {
                name: s.ENGINE_MAP.EdgeHTML,
                version: t
              };
            }
          }, {
            test: [/trident/i],
            describe: function (e) {
              var t = {
                  name: s.ENGINE_MAP.Trident
                },
                r = i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: function (e) {
              return e.test(/presto/i);
            },
            describe: function (e) {
              var t = {
                  name: s.ENGINE_MAP.Presto
                },
                r = i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: function (e) {
              var t = e.test(/gecko/i),
                r = e.test(/like gecko/i);
              return t && !r;
            },
            describe: function (e) {
              var t = {
                  name: s.ENGINE_MAP.Gecko
                },
                r = i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }, {
            test: [/(apple)?webkit\/537\.36/i],
            describe: function () {
              return {
                name: s.ENGINE_MAP.Blink
              };
            }
          }, {
            test: [/(apple)?webkit/i],
            describe: function (e) {
              var t = {
                  name: s.ENGINE_MAP.WebKit
                },
                r = i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, e);
              return r && (t.version = r), t;
            }
          }];
          t.default = a, e.exports = t.default;
        }
      });
    });
  })(es5);
  var es5Exports = es5.exports;
  var bowser = /*@__PURE__*/getDefaultExportFromCjs(es5Exports);

  const defaultUserAgent = ({
    serviceId,
    clientVersion
  }) => async () => {
    const parsedUA = typeof window !== "undefined" && window?.navigator?.userAgent ? bowser.parse(window.navigator.userAgent) : undefined;
    const sections = [["aws-sdk-js", clientVersion], ["ua", "2.0"], [`os/${parsedUA?.os?.name || "other"}`, parsedUA?.os?.version], ["lang/js"], ["md/browser", `${parsedUA?.browser?.name ?? "unknown"}_${parsedUA?.browser?.version ?? "unknown"}`]];
    if (serviceId) {
      sections.push([`api/${serviceId}`, clientVersion]);
    }
    return sections;
  };

  function getChunkedStream(source) {
    let currentMessageTotalLength = 0;
    let currentMessagePendingLength = 0;
    let currentMessage = null;
    let messageLengthBuffer = null;
    const allocateMessage = size => {
      if (typeof size !== "number") {
        throw new Error("Attempted to allocate an event message where size was not a number: " + size);
      }
      currentMessageTotalLength = size;
      currentMessagePendingLength = 4;
      currentMessage = new Uint8Array(size);
      const currentMessageView = new DataView(currentMessage.buffer);
      currentMessageView.setUint32(0, size, false);
    };
    const iterator = async function* () {
      const sourceIterator = source[Symbol.asyncIterator]();
      while (true) {
        const {
          value,
          done
        } = await sourceIterator.next();
        if (done) {
          if (!currentMessageTotalLength) {
            return;
          } else if (currentMessageTotalLength === currentMessagePendingLength) {
            yield currentMessage;
          } else {
            throw new Error("Truncated event message received.");
          }
          return;
        }
        const chunkLength = value.length;
        let currentOffset = 0;
        while (currentOffset < chunkLength) {
          if (!currentMessage) {
            const bytesRemaining = chunkLength - currentOffset;
            if (!messageLengthBuffer) {
              messageLengthBuffer = new Uint8Array(4);
            }
            const numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining);
            messageLengthBuffer.set(value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);
            currentMessagePendingLength += numBytesForTotal;
            currentOffset += numBytesForTotal;
            if (currentMessagePendingLength < 4) {
              break;
            }
            allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));
            messageLengthBuffer = null;
          }
          const numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, chunkLength - currentOffset);
          currentMessage.set(value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);
          currentMessagePendingLength += numBytesToWrite;
          currentOffset += numBytesToWrite;
          if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {
            yield currentMessage;
            currentMessage = null;
            currentMessageTotalLength = 0;
            currentMessagePendingLength = 0;
          }
        }
      }
    };
    return {
      [Symbol.asyncIterator]: iterator
    };
  }

  function getMessageUnmarshaller(deserializer, toUtf8) {
    return async function (message) {
      const {
        value: messageType
      } = message.headers[":message-type"];
      if (messageType === "error") {
        const unmodeledError = new Error(message.headers[":error-message"].value || "UnknownError");
        unmodeledError.name = message.headers[":error-code"].value;
        throw unmodeledError;
      } else if (messageType === "exception") {
        const code = message.headers[":exception-type"].value;
        const exception = {
          [code]: message
        };
        const deserializedException = await deserializer(exception);
        if (deserializedException.$unknown) {
          const error = new Error(toUtf8(message.body));
          error.name = code;
          throw error;
        }
        throw deserializedException[code];
      } else if (messageType === "event") {
        const event = {
          [message.headers[":event-type"].value]: message
        };
        const deserialized = await deserializer(event);
        if (deserialized.$unknown) return;
        return deserialized;
      } else {
        throw Error(`Unrecognizable event type: ${message.headers[":event-type"].value}`);
      }
    };
  }

  let EventStreamMarshaller$1 = class EventStreamMarshaller {
    constructor({
      utf8Encoder,
      utf8Decoder
    }) {
      this.eventStreamCodec = new EventStreamCodec(utf8Encoder, utf8Decoder);
      this.utfEncoder = utf8Encoder;
    }
    deserialize(body, deserializer) {
      const inputStream = getChunkedStream(body);
      return new SmithyMessageDecoderStream({
        messageStream: new MessageDecoderStream({
          inputStream,
          decoder: this.eventStreamCodec
        }),
        deserializer: getMessageUnmarshaller(deserializer, this.utfEncoder)
      });
    }
    serialize(inputStream, serializer) {
      return new MessageEncoderStream({
        messageStream: new SmithyMessageEncoderStream({
          inputStream,
          serializer
        }),
        encoder: this.eventStreamCodec,
        includeEndFrame: true
      });
    }
  };

  const readableStreamtoIterable = readableStream => ({
    [Symbol.asyncIterator]: async function* () {
      const reader = readableStream.getReader();
      try {
        while (true) {
          const {
            done,
            value
          } = await reader.read();
          if (done) return;
          yield value;
        }
      } finally {
        reader.releaseLock();
      }
    }
  });
  const iterableToReadableStream = asyncIterable => {
    const iterator = asyncIterable[Symbol.asyncIterator]();
    return new ReadableStream({
      async pull(controller) {
        const {
          done,
          value
        } = await iterator.next();
        if (done) {
          return controller.close();
        }
        controller.enqueue(value);
      }
    });
  };

  class EventStreamMarshaller {
    constructor({
      utf8Encoder,
      utf8Decoder
    }) {
      this.universalMarshaller = new EventStreamMarshaller$1({
        utf8Decoder,
        utf8Encoder
      });
    }
    deserialize(body, deserializer) {
      const bodyIterable = isReadableStream(body) ? readableStreamtoIterable(body) : body;
      return this.universalMarshaller.deserialize(bodyIterable, deserializer);
    }
    serialize(input, serializer) {
      const serialziedIterable = this.universalMarshaller.serialize(input, serializer);
      return typeof ReadableStream === "function" ? iterableToReadableStream(serialziedIterable) : serialziedIterable;
    }
  }
  const isReadableStream = body => typeof ReadableStream === "function" && body instanceof ReadableStream;

  const eventStreamSerdeProvider = options => new EventStreamMarshaller(options);

  function blobReader(blob, onChunk, chunkSize = 1024 * 1024) {
    return new Promise((resolve, reject) => {
      const fileReader = new FileReader();
      fileReader.addEventListener("error", reject);
      fileReader.addEventListener("abort", reject);
      const size = blob.size;
      let totalBytesRead = 0;
      function read() {
        if (totalBytesRead >= size) {
          resolve();
          return;
        }
        fileReader.readAsArrayBuffer(blob.slice(totalBytesRead, Math.min(size, totalBytesRead + chunkSize)));
      }
      fileReader.addEventListener("load", event => {
        const result = event.target.result;
        onChunk(new Uint8Array(result));
        totalBytesRead += result.byteLength;
        read();
      });
      read();
    });
  }

  const blobHasher = async function blobHasher(hashCtor, blob) {
    const hash = new hashCtor();
    await blobReader(blob, chunk => {
      hash.update(chunk);
    });
    return hash.digest();
  };

  const invalidProvider = message => () => Promise.reject(message);

  const BLOCK_SIZE = 64;
  const DIGEST_LENGTH = 16;
  const INIT = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476];

  class Md5 {
    constructor() {
      this.reset();
    }
    update(sourceData) {
      if (isEmptyData(sourceData)) {
        return;
      } else if (this.finished) {
        throw new Error("Attempted to update an already finished hash.");
      }
      const data = convertToBuffer(sourceData);
      let position = 0;
      let {
        byteLength
      } = data;
      this.bytesHashed += byteLength;
      while (byteLength > 0) {
        this.buffer.setUint8(this.bufferLength++, data[position++]);
        byteLength--;
        if (this.bufferLength === BLOCK_SIZE) {
          this.hashBuffer();
          this.bufferLength = 0;
        }
      }
    }
    async digest() {
      if (!this.finished) {
        const {
          buffer,
          bufferLength: undecoratedLength,
          bytesHashed
        } = this;
        const bitsHashed = bytesHashed * 8;
        buffer.setUint8(this.bufferLength++, 0b10000000);
        if (undecoratedLength % BLOCK_SIZE >= BLOCK_SIZE - 8) {
          for (let i = this.bufferLength; i < BLOCK_SIZE; i++) {
            buffer.setUint8(i, 0);
          }
          this.hashBuffer();
          this.bufferLength = 0;
        }
        for (let i = this.bufferLength; i < BLOCK_SIZE - 8; i++) {
          buffer.setUint8(i, 0);
        }
        buffer.setUint32(BLOCK_SIZE - 8, bitsHashed >>> 0, true);
        buffer.setUint32(BLOCK_SIZE - 4, Math.floor(bitsHashed / 0x100000000), true);
        this.hashBuffer();
        this.finished = true;
      }
      const out = new DataView(new ArrayBuffer(DIGEST_LENGTH));
      for (let i = 0; i < 4; i++) {
        out.setUint32(i * 4, this.state[i], true);
      }
      return new Uint8Array(out.buffer, out.byteOffset, out.byteLength);
    }
    hashBuffer() {
      const {
        buffer,
        state
      } = this;
      let a = state[0],
        b = state[1],
        c = state[2],
        d = state[3];
      a = ff(a, b, c, d, buffer.getUint32(0, true), 7, 0xd76aa478);
      d = ff(d, a, b, c, buffer.getUint32(4, true), 12, 0xe8c7b756);
      c = ff(c, d, a, b, buffer.getUint32(8, true), 17, 0x242070db);
      b = ff(b, c, d, a, buffer.getUint32(12, true), 22, 0xc1bdceee);
      a = ff(a, b, c, d, buffer.getUint32(16, true), 7, 0xf57c0faf);
      d = ff(d, a, b, c, buffer.getUint32(20, true), 12, 0x4787c62a);
      c = ff(c, d, a, b, buffer.getUint32(24, true), 17, 0xa8304613);
      b = ff(b, c, d, a, buffer.getUint32(28, true), 22, 0xfd469501);
      a = ff(a, b, c, d, buffer.getUint32(32, true), 7, 0x698098d8);
      d = ff(d, a, b, c, buffer.getUint32(36, true), 12, 0x8b44f7af);
      c = ff(c, d, a, b, buffer.getUint32(40, true), 17, 0xffff5bb1);
      b = ff(b, c, d, a, buffer.getUint32(44, true), 22, 0x895cd7be);
      a = ff(a, b, c, d, buffer.getUint32(48, true), 7, 0x6b901122);
      d = ff(d, a, b, c, buffer.getUint32(52, true), 12, 0xfd987193);
      c = ff(c, d, a, b, buffer.getUint32(56, true), 17, 0xa679438e);
      b = ff(b, c, d, a, buffer.getUint32(60, true), 22, 0x49b40821);
      a = gg(a, b, c, d, buffer.getUint32(4, true), 5, 0xf61e2562);
      d = gg(d, a, b, c, buffer.getUint32(24, true), 9, 0xc040b340);
      c = gg(c, d, a, b, buffer.getUint32(44, true), 14, 0x265e5a51);
      b = gg(b, c, d, a, buffer.getUint32(0, true), 20, 0xe9b6c7aa);
      a = gg(a, b, c, d, buffer.getUint32(20, true), 5, 0xd62f105d);
      d = gg(d, a, b, c, buffer.getUint32(40, true), 9, 0x02441453);
      c = gg(c, d, a, b, buffer.getUint32(60, true), 14, 0xd8a1e681);
      b = gg(b, c, d, a, buffer.getUint32(16, true), 20, 0xe7d3fbc8);
      a = gg(a, b, c, d, buffer.getUint32(36, true), 5, 0x21e1cde6);
      d = gg(d, a, b, c, buffer.getUint32(56, true), 9, 0xc33707d6);
      c = gg(c, d, a, b, buffer.getUint32(12, true), 14, 0xf4d50d87);
      b = gg(b, c, d, a, buffer.getUint32(32, true), 20, 0x455a14ed);
      a = gg(a, b, c, d, buffer.getUint32(52, true), 5, 0xa9e3e905);
      d = gg(d, a, b, c, buffer.getUint32(8, true), 9, 0xfcefa3f8);
      c = gg(c, d, a, b, buffer.getUint32(28, true), 14, 0x676f02d9);
      b = gg(b, c, d, a, buffer.getUint32(48, true), 20, 0x8d2a4c8a);
      a = hh(a, b, c, d, buffer.getUint32(20, true), 4, 0xfffa3942);
      d = hh(d, a, b, c, buffer.getUint32(32, true), 11, 0x8771f681);
      c = hh(c, d, a, b, buffer.getUint32(44, true), 16, 0x6d9d6122);
      b = hh(b, c, d, a, buffer.getUint32(56, true), 23, 0xfde5380c);
      a = hh(a, b, c, d, buffer.getUint32(4, true), 4, 0xa4beea44);
      d = hh(d, a, b, c, buffer.getUint32(16, true), 11, 0x4bdecfa9);
      c = hh(c, d, a, b, buffer.getUint32(28, true), 16, 0xf6bb4b60);
      b = hh(b, c, d, a, buffer.getUint32(40, true), 23, 0xbebfbc70);
      a = hh(a, b, c, d, buffer.getUint32(52, true), 4, 0x289b7ec6);
      d = hh(d, a, b, c, buffer.getUint32(0, true), 11, 0xeaa127fa);
      c = hh(c, d, a, b, buffer.getUint32(12, true), 16, 0xd4ef3085);
      b = hh(b, c, d, a, buffer.getUint32(24, true), 23, 0x04881d05);
      a = hh(a, b, c, d, buffer.getUint32(36, true), 4, 0xd9d4d039);
      d = hh(d, a, b, c, buffer.getUint32(48, true), 11, 0xe6db99e5);
      c = hh(c, d, a, b, buffer.getUint32(60, true), 16, 0x1fa27cf8);
      b = hh(b, c, d, a, buffer.getUint32(8, true), 23, 0xc4ac5665);
      a = ii(a, b, c, d, buffer.getUint32(0, true), 6, 0xf4292244);
      d = ii(d, a, b, c, buffer.getUint32(28, true), 10, 0x432aff97);
      c = ii(c, d, a, b, buffer.getUint32(56, true), 15, 0xab9423a7);
      b = ii(b, c, d, a, buffer.getUint32(20, true), 21, 0xfc93a039);
      a = ii(a, b, c, d, buffer.getUint32(48, true), 6, 0x655b59c3);
      d = ii(d, a, b, c, buffer.getUint32(12, true), 10, 0x8f0ccc92);
      c = ii(c, d, a, b, buffer.getUint32(40, true), 15, 0xffeff47d);
      b = ii(b, c, d, a, buffer.getUint32(4, true), 21, 0x85845dd1);
      a = ii(a, b, c, d, buffer.getUint32(32, true), 6, 0x6fa87e4f);
      d = ii(d, a, b, c, buffer.getUint32(60, true), 10, 0xfe2ce6e0);
      c = ii(c, d, a, b, buffer.getUint32(24, true), 15, 0xa3014314);
      b = ii(b, c, d, a, buffer.getUint32(52, true), 21, 0x4e0811a1);
      a = ii(a, b, c, d, buffer.getUint32(16, true), 6, 0xf7537e82);
      d = ii(d, a, b, c, buffer.getUint32(44, true), 10, 0xbd3af235);
      c = ii(c, d, a, b, buffer.getUint32(8, true), 15, 0x2ad7d2bb);
      b = ii(b, c, d, a, buffer.getUint32(36, true), 21, 0xeb86d391);
      state[0] = a + state[0] & 0xffffffff;
      state[1] = b + state[1] & 0xffffffff;
      state[2] = c + state[2] & 0xffffffff;
      state[3] = d + state[3] & 0xffffffff;
    }
    reset() {
      this.state = Uint32Array.from(INIT);
      this.buffer = new DataView(new ArrayBuffer(BLOCK_SIZE));
      this.bufferLength = 0;
      this.bytesHashed = 0;
      this.finished = false;
    }
  }
  function cmn(q, a, b, x, s, t) {
    a = (a + q & 0xffffffff) + (x + t & 0xffffffff) & 0xffffffff;
    return (a << s | a >>> 32 - s) + b & 0xffffffff;
  }
  function ff(a, b, c, d, x, s, t) {
    return cmn(b & c | ~b & d, a, b, x, s, t);
  }
  function gg(a, b, c, d, x, s, t) {
    return cmn(b & d | c & ~d, a, b, x, s, t);
  }
  function hh(a, b, c, d, x, s, t) {
    return cmn(b ^ c ^ d, a, b, x, s, t);
  }
  function ii(a, b, c, d, x, s, t) {
    return cmn(c ^ (b | ~d), a, b, x, s, t);
  }
  function isEmptyData(data) {
    if (typeof data === "string") {
      return data.length === 0;
    }
    return data.byteLength === 0;
  }
  function convertToBuffer(data) {
    if (typeof data === "string") {
      return fromUtf8(data);
    }
    if (ArrayBuffer.isView(data)) {
      return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    }
    return new Uint8Array(data);
  }

  const calculateBodyLength = body => {
    if (typeof body === "string") {
      let len = body.length;
      for (let i = len - 1; i >= 0; i--) {
        const code = body.charCodeAt(i);
        if (code > 0x7f && code <= 0x7ff) len++;else if (code > 0x7ff && code <= 0xffff) len += 2;
        if (code >= 0xdc00 && code <= 0xdfff) i--;
      }
      return len;
    } else if (typeof body.byteLength === "number") {
      return body.byteLength;
    } else if (typeof body.size === "number") {
      return body.size;
    }
    throw new Error(`Body Length computation failed for ${body}`);
  };

  class SignatureV4MultiRegion {
    constructor(options) {
      this.sigv4Signer = new SignatureV4(options);
      this.signerOptions = options;
    }
    async sign(requestToSign, options = {}) {
      if (options.signingRegion === "*") {
        if (this.signerOptions.runtime !== "node") throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
        return this.getSigv4aSigner().sign(requestToSign, options);
      }
      return this.sigv4Signer.sign(requestToSign, options);
    }
    async presign(originalRequest, options = {}) {
      if (options.signingRegion === "*") {
        if (this.signerOptions.runtime !== "node") throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
        return this.getSigv4aSigner().presign(originalRequest, options);
      }
      return this.sigv4Signer.presign(originalRequest, options);
    }
    getSigv4aSigner() {
      if (!this.sigv4aSigner) {
        let CrtSignerV4;
        try {
          CrtSignerV4 = typeof require === "function" && require("@aws-sdk/signature-v4-crt").CrtSignerV4;
          if (typeof CrtSignerV4 !== "function") throw new Error();
        } catch (e) {
          e.message = `${e.message}\nPlease check if you have installed "@aws-sdk/signature-v4-crt" package explicitly. \n` + "For more information please go to " + "https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt";
          throw e;
        }
        this.sigv4aSigner = new CrtSignerV4({
          ...this.signerOptions,
          signingAlgorithm: 1
        });
      }
      return this.sigv4aSigner;
    }
  }

  const bJ = "required",
    bK = "type",
    bL = "conditions",
    bM = "fn",
    bN = "argv",
    bO = "ref",
    bP = "assign",
    bQ = "url",
    bR = "properties",
    bS = "authSchemes",
    bT = "disableDoubleEncoding",
    bU = "signingName",
    bV = "signingRegion",
    bW = "headers";
  const a = false,
    b = true,
    c = "isSet",
    d = "tree",
    e = "booleanEquals",
    f = "error",
    g = "aws.partition",
    h = "stringEquals",
    i = "getAttr",
    j = "name",
    k = "substring",
    l = "hardwareType",
    m = "regionPrefix",
    n = "bucketAliasSuffix",
    o = "outpostId",
    p = "isValidHostLabel",
    q = "not",
    r = "parseURL",
    s = "s3-outposts",
    t = "endpoint",
    u = "aws.isVirtualHostableS3Bucket",
    v$1 = "s3",
    w = "{url#scheme}://{url#authority}{url#normalizedPath}{Bucket}",
    x = "{url#scheme}://{Bucket}.{url#authority}{url#path}",
    y = "https://{Bucket}.s3-accelerate.{partitionResult#dnsSuffix}",
    z = "https://{Bucket}.s3.{partitionResult#dnsSuffix}",
    A = "aws.parseArn",
    B = "bucketArn",
    C = "arnType",
    D = "",
    E = "s3-object-lambda",
    F = "accesspoint",
    G = "accessPointName",
    H = "{url#scheme}://{accessPointName}-{bucketArn#accountId}.{url#authority}{url#path}",
    I = "mrapPartition",
    J = "outpostType",
    K = "arnPrefix",
    L = "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}",
    M = "https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
    N = "{url#scheme}://{url#authority}{url#path}",
    O = "https://s3.{partitionResult#dnsSuffix}",
    P = {
      [bJ]: false,
      [bK]: "String"
    },
    Q = {
      [bJ]: true,
      "default": false,
      [bK]: "Boolean"
    },
    R = {
      [bJ]: false,
      [bK]: "Boolean"
    },
    S = {
      [bM]: e,
      [bN]: [{
        [bO]: "Accelerate"
      }, true]
    },
    T = {
      [bM]: e,
      [bN]: [{
        [bO]: "UseFIPS"
      }, true]
    },
    U = {
      [bM]: e,
      [bN]: [{
        [bO]: "UseDualStack"
      }, true]
    },
    V = {
      [bM]: c,
      [bN]: [{
        [bO]: "Endpoint"
      }]
    },
    W = {
      [bM]: g,
      [bN]: [{
        [bO]: "Region"
      }],
      [bP]: "partitionResult"
    },
    X = {
      [bM]: h,
      [bN]: [{
        [bM]: i,
        [bN]: [{
          [bO]: "partitionResult"
        }, j]
      }, "aws-cn"]
    },
    Y = {
      [bM]: c,
      [bN]: [{
        [bO]: "Bucket"
      }]
    },
    Z = {
      [bO]: "Bucket"
    },
    aa = {
      [bO]: l
    },
    ab = {
      [bL]: [{
        [bM]: q,
        [bN]: [V]
      }],
      [f]: "Expected a endpoint to be specified but no endpoint was found",
      [bK]: f
    },
    ac = {
      [bM]: q,
      [bN]: [V]
    },
    ad = {
      [bM]: r,
      [bN]: [{
        [bO]: "Endpoint"
      }],
      [bP]: "url"
    },
    ae = {
      [bS]: [{
        [bT]: true,
        [j]: "sigv4",
        [bU]: s,
        [bV]: "{Region}"
      }]
    },
    af = {},
    ag = {
      [bM]: e,
      [bN]: [{
        [bO]: "ForcePathStyle"
      }, false]
    },
    ah = {
      [bO]: "ForcePathStyle"
    },
    ai = {
      [bM]: e,
      [bN]: [{
        [bO]: "Accelerate"
      }, false]
    },
    aj = {
      [bM]: h,
      [bN]: [{
        [bO]: "Region"
      }, "aws-global"]
    },
    ak = {
      [bS]: [{
        [bT]: true,
        [j]: "sigv4",
        [bU]: v$1,
        [bV]: "us-east-1"
      }]
    },
    al = {
      [bM]: q,
      [bN]: [aj]
    },
    am = {
      [bM]: e,
      [bN]: [{
        [bO]: "UseGlobalEndpoint"
      }, true]
    },
    an = {
      [bQ]: "https://{Bucket}.s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}",
      [bR]: {
        [bS]: [{
          [bT]: true,
          [j]: "sigv4",
          [bU]: v$1,
          [bV]: "{Region}"
        }]
      },
      [bW]: {}
    },
    ao = {
      [bS]: [{
        [bT]: true,
        [j]: "sigv4",
        [bU]: v$1,
        [bV]: "{Region}"
      }]
    },
    ap = {
      [bM]: e,
      [bN]: [{
        [bO]: "UseGlobalEndpoint"
      }, false]
    },
    aq = {
      [bM]: e,
      [bN]: [{
        [bO]: "UseDualStack"
      }, false]
    },
    ar = {
      [bQ]: "https://{Bucket}.s3-fips.{Region}.{partitionResult#dnsSuffix}",
      [bR]: ao,
      [bW]: {}
    },
    as = {
      [bM]: e,
      [bN]: [{
        [bO]: "UseFIPS"
      }, false]
    },
    at = {
      [bQ]: "https://{Bucket}.s3-accelerate.dualstack.{partitionResult#dnsSuffix}",
      [bR]: ao,
      [bW]: {}
    },
    au = {
      [bQ]: "https://{Bucket}.s3.dualstack.{Region}.{partitionResult#dnsSuffix}",
      [bR]: ao,
      [bW]: {}
    },
    av = {
      [bM]: e,
      [bN]: [{
        [bM]: i,
        [bN]: [{
          [bO]: "url"
        }, "isIp"]
      }, true]
    },
    aw = {
      [bO]: "url"
    },
    ax = {
      [bM]: e,
      [bN]: [{
        [bM]: i,
        [bN]: [aw, "isIp"]
      }, false]
    },
    ay = {
      [bQ]: w,
      [bR]: ao,
      [bW]: {}
    },
    az = {
      [bQ]: x,
      [bR]: ao,
      [bW]: {}
    },
    aA = {
      [t]: az,
      [bK]: t
    },
    aB = {
      [bQ]: y,
      [bR]: ao,
      [bW]: {}
    },
    aC = {
      [bQ]: "https://{Bucket}.s3.{Region}.{partitionResult#dnsSuffix}",
      [bR]: ao,
      [bW]: {}
    },
    aD = {
      [f]: "Invalid region: region was not a valid DNS name.",
      [bK]: f
    },
    aE = {
      [bO]: B
    },
    aF = {
      [bO]: C
    },
    aG = {
      [bM]: i,
      [bN]: [aE, "service"]
    },
    aH = {
      [bO]: G
    },
    aI = {
      [bL]: [U],
      [f]: "S3 Object Lambda does not support Dual-stack",
      [bK]: f
    },
    aJ = {
      [bL]: [S],
      [f]: "S3 Object Lambda does not support S3 Accelerate",
      [bK]: f
    },
    aK = {
      [bL]: [{
        [bM]: c,
        [bN]: [{
          [bO]: "DisableAccessPoints"
        }]
      }, {
        [bM]: e,
        [bN]: [{
          [bO]: "DisableAccessPoints"
        }, true]
      }],
      [f]: "Access points are not supported for this operation",
      [bK]: f
    },
    aL = {
      [bL]: [{
        [bM]: c,
        [bN]: [{
          [bO]: "UseArnRegion"
        }]
      }, {
        [bM]: e,
        [bN]: [{
          [bO]: "UseArnRegion"
        }, false]
      }, {
        [bM]: q,
        [bN]: [{
          [bM]: h,
          [bN]: [{
            [bM]: i,
            [bN]: [aE, "region"]
          }, "{Region}"]
        }]
      }],
      [f]: "Invalid configuration: region from ARN `{bucketArn#region}` does not match client region `{Region}` and UseArnRegion is `false`",
      [bK]: f
    },
    aM = {
      [bM]: i,
      [bN]: [{
        [bO]: "bucketPartition"
      }, j]
    },
    aN = {
      [bM]: i,
      [bN]: [aE, "accountId"]
    },
    aO = {
      [bS]: [{
        [bT]: true,
        [j]: "sigv4",
        [bU]: E,
        [bV]: "{bucketArn#region}"
      }]
    },
    aP = {
      [f]: "Invalid ARN: The access point name may only contain a-z, A-Z, 0-9 and `-`. Found: `{accessPointName}`",
      [bK]: f
    },
    aQ = {
      [f]: "Invalid ARN: The account id may only contain a-z, A-Z, 0-9 and `-`. Found: `{bucketArn#accountId}`",
      [bK]: f
    },
    aR = {
      [f]: "Invalid region in ARN: `{bucketArn#region}` (invalid DNS name)",
      [bK]: f
    },
    aS = {
      [f]: "Client was configured for partition `{partitionResult#name}` but ARN (`{Bucket}`) has `{bucketPartition#name}`",
      [bK]: f
    },
    aT = {
      [f]: "Invalid ARN: The ARN may only contain a single resource component after `accesspoint`.",
      [bK]: f
    },
    aU = {
      [f]: "Invalid ARN: Expected a resource of the format `accesspoint:<accesspoint name>` but no name was provided",
      [bK]: f
    },
    aV = {
      [bS]: [{
        [bT]: true,
        [j]: "sigv4",
        [bU]: v$1,
        [bV]: "{bucketArn#region}"
      }]
    },
    aW = {
      [bS]: [{
        [bT]: true,
        [j]: "sigv4",
        [bU]: s,
        [bV]: "{bucketArn#region}"
      }]
    },
    aX = {
      [bM]: A,
      [bN]: [Z]
    },
    aY = {
      [bQ]: "https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
      [bR]: ao,
      [bW]: {}
    },
    aZ = {
      [bQ]: "https://s3-fips.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
      [bR]: ao,
      [bW]: {}
    },
    ba = {
      [bQ]: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
      [bR]: ao,
      [bW]: {}
    },
    bb = {
      [bQ]: L,
      [bR]: ao,
      [bW]: {}
    },
    bc = {
      [bQ]: "https://s3.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
      [bR]: ao,
      [bW]: {}
    },
    bd = {
      [bO]: "UseObjectLambdaEndpoint"
    },
    be = {
      [bS]: [{
        [bT]: true,
        [j]: "sigv4",
        [bU]: E,
        [bV]: "{Region}"
      }]
    },
    bf = {
      [bQ]: "https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}",
      [bR]: ao,
      [bW]: {}
    },
    bg = {
      [bQ]: "https://s3-fips.{Region}.{partitionResult#dnsSuffix}",
      [bR]: ao,
      [bW]: {}
    },
    bh = {
      [bQ]: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}",
      [bR]: ao,
      [bW]: {}
    },
    bi = {
      [bQ]: N,
      [bR]: ao,
      [bW]: {}
    },
    bj = {
      [bQ]: "https://s3.{Region}.{partitionResult#dnsSuffix}",
      [bR]: ao,
      [bW]: {}
    },
    bk = [{
      [bO]: "Region"
    }],
    bl = [{
      [bO]: "Endpoint"
    }],
    bm = [Z],
    bn = [{
      [bM]: p,
      [bN]: [{
        [bO]: o
      }, false]
    }],
    bo = [{
      [bM]: h,
      [bN]: [{
        [bO]: m
      }, "beta"]
    }],
    bp = [V, ad],
    bq = [Y],
    br = [W],
    bs = [{
      [bM]: p,
      [bN]: [{
        [bO]: "Region"
      }, false]
    }],
    bt = [{
      [bM]: h,
      [bN]: [{
        [bO]: "Region"
      }, "us-east-1"]
    }],
    bu = [{
      [bM]: h,
      [bN]: [aF, F]
    }],
    bv = [{
      [bM]: i,
      [bN]: [aE, "resourceId[1]"],
      [bP]: G
    }, {
      [bM]: q,
      [bN]: [{
        [bM]: h,
        [bN]: [aH, D]
      }]
    }],
    bw = [aE, "resourceId[1]"],
    bx = [U],
    by = [S],
    bz = [{
      [bM]: q,
      [bN]: [{
        [bM]: h,
        [bN]: [{
          [bM]: i,
          [bN]: [aE, "region"]
        }, D]
      }]
    }],
    bA = [{
      [bM]: q,
      [bN]: [{
        [bM]: c,
        [bN]: [{
          [bM]: i,
          [bN]: [aE, "resourceId[2]"]
        }]
      }]
    }],
    bB = [aE, "resourceId[2]"],
    bC = [{
      [bM]: g,
      [bN]: [{
        [bM]: i,
        [bN]: [aE, "region"]
      }],
      [bP]: "bucketPartition"
    }],
    bD = [{
      [bM]: h,
      [bN]: [aM, {
        [bM]: i,
        [bN]: [{
          [bO]: "partitionResult"
        }, j]
      }]
    }],
    bE = [{
      [bM]: p,
      [bN]: [{
        [bM]: i,
        [bN]: [aE, "region"]
      }, true]
    }],
    bF = [{
      [bM]: p,
      [bN]: [aN, false]
    }],
    bG = [{
      [bM]: p,
      [bN]: [aH, false]
    }],
    bH = [T],
    bI = [{
      [bM]: p,
      [bN]: [{
        [bO]: "Region"
      }, true]
    }];
  const _data = {
    version: "1.0",
    parameters: {
      Bucket: P,
      Region: P,
      UseFIPS: Q,
      UseDualStack: Q,
      Endpoint: P,
      ForcePathStyle: Q,
      Accelerate: Q,
      UseGlobalEndpoint: Q,
      UseObjectLambdaEndpoint: R,
      DisableAccessPoints: R,
      DisableMultiRegionAccessPoints: Q,
      UseArnRegion: R
    },
    rules: [{
      [bL]: [{
        [bM]: c,
        [bN]: bk
      }],
      [bK]: d,
      rules: [{
        [bL]: [S, T],
        error: "Accelerate cannot be used with FIPS",
        [bK]: f
      }, {
        [bL]: [U, V],
        error: "Cannot set dual-stack in combination with a custom endpoint.",
        [bK]: f
      }, {
        [bL]: [V, T],
        error: "A custom endpoint cannot be combined with FIPS",
        [bK]: f
      }, {
        [bL]: [V, S],
        error: "A custom endpoint cannot be combined with S3 Accelerate",
        [bK]: f
      }, {
        [bL]: [T, W, X],
        error: "Partition does not support FIPS",
        [bK]: f
      }, {
        [bL]: [Y, {
          [bM]: k,
          [bN]: [Z, 49, 50, b],
          [bP]: l
        }, {
          [bM]: k,
          [bN]: [Z, 8, 12, b],
          [bP]: m
        }, {
          [bM]: k,
          [bN]: [Z, 0, 7, b],
          [bP]: n
        }, {
          [bM]: k,
          [bN]: [Z, 32, 49, b],
          [bP]: o
        }, {
          [bM]: g,
          [bN]: bk,
          [bP]: "regionPartition"
        }, {
          [bM]: h,
          [bN]: [{
            [bO]: n
          }, "--op-s3"]
        }],
        [bK]: d,
        rules: [{
          [bL]: bn,
          [bK]: d,
          rules: [{
            [bL]: [{
              [bM]: h,
              [bN]: [aa, "e"]
            }],
            [bK]: d,
            rules: [{
              [bL]: bo,
              [bK]: d,
              rules: [ab, {
                [bL]: bp,
                endpoint: {
                  [bQ]: "https://{Bucket}.ec2.{url#authority}",
                  [bR]: ae,
                  [bW]: af
                },
                [bK]: t
              }]
            }, {
              endpoint: {
                [bQ]: "https://{Bucket}.ec2.s3-outposts.{Region}.{regionPartition#dnsSuffix}",
                [bR]: ae,
                [bW]: af
              },
              [bK]: t
            }]
          }, {
            [bL]: [{
              [bM]: h,
              [bN]: [aa, "o"]
            }],
            [bK]: d,
            rules: [{
              [bL]: bo,
              [bK]: d,
              rules: [ab, {
                [bL]: bp,
                endpoint: {
                  [bQ]: "https://{Bucket}.op-{outpostId}.{url#authority}",
                  [bR]: ae,
                  [bW]: af
                },
                [bK]: t
              }]
            }, {
              endpoint: {
                [bQ]: "https://{Bucket}.op-{outpostId}.s3-outposts.{Region}.{regionPartition#dnsSuffix}",
                [bR]: ae,
                [bW]: af
              },
              [bK]: t
            }]
          }, {
            error: "Unrecognized hardware type: \"Expected hardware type o or e but got {hardwareType}\"",
            [bK]: f
          }]
        }, {
          error: "Invalid ARN: The outpost Id must only contain a-z, A-Z, 0-9 and `-`.",
          [bK]: f
        }]
      }, {
        [bL]: bq,
        [bK]: d,
        rules: [{
          [bL]: [V, {
            [bM]: q,
            [bN]: [{
              [bM]: c,
              [bN]: [{
                [bM]: r,
                [bN]: bl
              }]
            }]
          }],
          error: "Custom endpoint `{Endpoint}` was not a valid URI",
          [bK]: f
        }, {
          [bL]: [ag, {
            [bM]: u,
            [bN]: [Z, a]
          }],
          [bK]: d,
          rules: [{
            [bL]: br,
            [bK]: d,
            rules: [{
              [bL]: bs,
              [bK]: d,
              rules: [{
                [bL]: [S, X],
                error: "S3 Accelerate cannot be used in this region",
                [bK]: f
              }, {
                [bL]: [U, T, ai, ac, aj],
                endpoint: {
                  [bQ]: "https://{Bucket}.s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}",
                  [bR]: ak,
                  [bW]: af
                },
                [bK]: t
              }, {
                [bL]: [U, T, ai, ac, al, am],
                [bK]: d,
                rules: [{
                  endpoint: an,
                  [bK]: t
                }]
              }, {
                [bL]: [U, T, ai, ac, al, ap],
                endpoint: an,
                [bK]: t
              }, {
                [bL]: [aq, T, ai, ac, aj],
                endpoint: {
                  [bQ]: "https://{Bucket}.s3-fips.us-east-1.{partitionResult#dnsSuffix}",
                  [bR]: ak,
                  [bW]: af
                },
                [bK]: t
              }, {
                [bL]: [aq, T, ai, ac, al, am],
                [bK]: d,
                rules: [{
                  endpoint: ar,
                  [bK]: t
                }]
              }, {
                [bL]: [aq, T, ai, ac, al, ap],
                endpoint: ar,
                [bK]: t
              }, {
                [bL]: [U, as, S, ac, aj],
                endpoint: {
                  [bQ]: "https://{Bucket}.s3-accelerate.dualstack.us-east-1.{partitionResult#dnsSuffix}",
                  [bR]: ak,
                  [bW]: af
                },
                [bK]: t
              }, {
                [bL]: [U, as, S, ac, al, am],
                [bK]: d,
                rules: [{
                  endpoint: at,
                  [bK]: t
                }]
              }, {
                [bL]: [U, as, S, ac, al, ap],
                endpoint: at,
                [bK]: t
              }, {
                [bL]: [U, as, ai, ac, aj],
                endpoint: {
                  [bQ]: "https://{Bucket}.s3.dualstack.us-east-1.{partitionResult#dnsSuffix}",
                  [bR]: ak,
                  [bW]: af
                },
                [bK]: t
              }, {
                [bL]: [U, as, ai, ac, al, am],
                [bK]: d,
                rules: [{
                  endpoint: au,
                  [bK]: t
                }]
              }, {
                [bL]: [U, as, ai, ac, al, ap],
                endpoint: au,
                [bK]: t
              }, {
                [bL]: [aq, as, ai, V, ad, av, aj],
                endpoint: {
                  [bQ]: w,
                  [bR]: ak,
                  [bW]: af
                },
                [bK]: t
              }, {
                [bL]: [aq, as, ai, V, ad, ax, aj],
                endpoint: {
                  [bQ]: x,
                  [bR]: ak,
                  [bW]: af
                },
                [bK]: t
              }, {
                [bL]: [aq, as, ai, V, ad, av, al, am],
                [bK]: d,
                rules: [{
                  [bL]: bt,
                  endpoint: ay,
                  [bK]: t
                }, {
                  endpoint: ay,
                  [bK]: t
                }]
              }, {
                [bL]: [aq, as, ai, V, ad, ax, al, am],
                [bK]: d,
                rules: [{
                  [bL]: bt,
                  endpoint: az,
                  [bK]: t
                }, aA]
              }, {
                [bL]: [aq, as, ai, V, ad, av, al, ap],
                endpoint: ay,
                [bK]: t
              }, {
                [bL]: [aq, as, ai, V, ad, ax, al, ap],
                endpoint: az,
                [bK]: t
              }, {
                [bL]: [aq, as, S, ac, aj],
                endpoint: {
                  [bQ]: y,
                  [bR]: ak,
                  [bW]: af
                },
                [bK]: t
              }, {
                [bL]: [aq, as, S, ac, al, am],
                [bK]: d,
                rules: [{
                  [bL]: bt,
                  endpoint: aB,
                  [bK]: t
                }, {
                  endpoint: aB,
                  [bK]: t
                }]
              }, {
                [bL]: [aq, as, S, ac, al, ap],
                endpoint: aB,
                [bK]: t
              }, {
                [bL]: [aq, as, ai, ac, aj],
                endpoint: {
                  [bQ]: z,
                  [bR]: ak,
                  [bW]: af
                },
                [bK]: t
              }, {
                [bL]: [aq, as, ai, ac, al, am],
                [bK]: d,
                rules: [{
                  [bL]: bt,
                  endpoint: {
                    [bQ]: z,
                    [bR]: ao,
                    [bW]: af
                  },
                  [bK]: t
                }, {
                  endpoint: aC,
                  [bK]: t
                }]
              }, {
                [bL]: [aq, as, ai, ac, al, ap],
                endpoint: aC,
                [bK]: t
              }]
            }, aD]
          }]
        }, {
          [bL]: [V, ad, {
            [bM]: h,
            [bN]: [{
              [bM]: i,
              [bN]: [aw, "scheme"]
            }, "http"]
          }, {
            [bM]: u,
            [bN]: [Z, b]
          }, ag, as, aq, ai],
          [bK]: d,
          rules: [{
            [bL]: br,
            [bK]: d,
            rules: [{
              [bL]: bs,
              [bK]: d,
              rules: [aA]
            }, aD]
          }]
        }, {
          [bL]: [ag, {
            [bM]: A,
            [bN]: bm,
            [bP]: B
          }],
          [bK]: d,
          rules: [{
            [bL]: [{
              [bM]: i,
              [bN]: [aE, "resourceId[0]"],
              [bP]: C
            }, {
              [bM]: q,
              [bN]: [{
                [bM]: h,
                [bN]: [aF, D]
              }]
            }],
            [bK]: d,
            rules: [{
              [bL]: [{
                [bM]: h,
                [bN]: [aG, E]
              }],
              [bK]: d,
              rules: [{
                [bL]: bu,
                [bK]: d,
                rules: [{
                  [bL]: bv,
                  [bK]: d,
                  rules: [aI, aJ, {
                    [bL]: bz,
                    [bK]: d,
                    rules: [aK, {
                      [bL]: bA,
                      [bK]: d,
                      rules: [aL, {
                        [bL]: bC,
                        [bK]: d,
                        rules: [{
                          [bL]: br,
                          [bK]: d,
                          rules: [{
                            [bL]: bD,
                            [bK]: d,
                            rules: [{
                              [bL]: bE,
                              [bK]: d,
                              rules: [{
                                [bL]: [{
                                  [bM]: h,
                                  [bN]: [aN, D]
                                }],
                                error: "Invalid ARN: Missing account id",
                                [bK]: f
                              }, {
                                [bL]: bF,
                                [bK]: d,
                                rules: [{
                                  [bL]: bG,
                                  [bK]: d,
                                  rules: [{
                                    [bL]: bp,
                                    endpoint: {
                                      [bQ]: H,
                                      [bR]: aO,
                                      [bW]: af
                                    },
                                    [bK]: t
                                  }, {
                                    [bL]: bH,
                                    endpoint: {
                                      [bQ]: "https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}",
                                      [bR]: aO,
                                      [bW]: af
                                    },
                                    [bK]: t
                                  }, {
                                    endpoint: {
                                      [bQ]: "https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda.{bucketArn#region}.{bucketPartition#dnsSuffix}",
                                      [bR]: aO,
                                      [bW]: af
                                    },
                                    [bK]: t
                                  }]
                                }, aP]
                              }, aQ]
                            }, aR]
                          }, aS]
                        }]
                      }]
                    }, aT]
                  }, {
                    error: "Invalid ARN: bucket ARN is missing a region",
                    [bK]: f
                  }]
                }, aU]
              }, {
                error: "Invalid ARN: Object Lambda ARNs only support `accesspoint` arn types, but found: `{arnType}`",
                [bK]: f
              }]
            }, {
              [bL]: bu,
              [bK]: d,
              rules: [{
                [bL]: bv,
                [bK]: d,
                rules: [{
                  [bL]: bz,
                  [bK]: d,
                  rules: [{
                    [bL]: bu,
                    [bK]: d,
                    rules: [{
                      [bL]: bz,
                      [bK]: d,
                      rules: [aK, {
                        [bL]: bA,
                        [bK]: d,
                        rules: [aL, {
                          [bL]: bC,
                          [bK]: d,
                          rules: [{
                            [bL]: br,
                            [bK]: d,
                            rules: [{
                              [bL]: [{
                                [bM]: h,
                                [bN]: [aM, "{partitionResult#name}"]
                              }],
                              [bK]: d,
                              rules: [{
                                [bL]: bE,
                                [bK]: d,
                                rules: [{
                                  [bL]: [{
                                    [bM]: h,
                                    [bN]: [aG, v$1]
                                  }],
                                  [bK]: d,
                                  rules: [{
                                    [bL]: bF,
                                    [bK]: d,
                                    rules: [{
                                      [bL]: bG,
                                      [bK]: d,
                                      rules: [{
                                        [bL]: by,
                                        error: "Access Points do not support S3 Accelerate",
                                        [bK]: f
                                      }, {
                                        [bL]: [T, U],
                                        endpoint: {
                                          [bQ]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}",
                                          [bR]: aV,
                                          [bW]: af
                                        },
                                        [bK]: t
                                      }, {
                                        [bL]: [T, aq],
                                        endpoint: {
                                          [bQ]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}",
                                          [bR]: aV,
                                          [bW]: af
                                        },
                                        [bK]: t
                                      }, {
                                        [bL]: [as, U],
                                        endpoint: {
                                          [bQ]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}",
                                          [bR]: aV,
                                          [bW]: af
                                        },
                                        [bK]: t
                                      }, {
                                        [bL]: [as, aq, V, ad],
                                        endpoint: {
                                          [bQ]: H,
                                          [bR]: aV,
                                          [bW]: af
                                        },
                                        [bK]: t
                                      }, {
                                        [bL]: [as, aq],
                                        endpoint: {
                                          [bQ]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.{bucketArn#region}.{bucketPartition#dnsSuffix}",
                                          [bR]: aV,
                                          [bW]: af
                                        },
                                        [bK]: t
                                      }]
                                    }, aP]
                                  }, aQ]
                                }, {
                                  error: "Invalid ARN: The ARN was not for the S3 service, found: {bucketArn#service}",
                                  [bK]: f
                                }]
                              }, aR]
                            }, aS]
                          }]
                        }]
                      }, aT]
                    }]
                  }]
                }, {
                  [bL]: [{
                    [bM]: p,
                    [bN]: [aH, b]
                  }],
                  [bK]: d,
                  rules: [{
                    [bL]: bx,
                    error: "S3 MRAP does not support dual-stack",
                    [bK]: f
                  }, {
                    [bL]: bH,
                    error: "S3 MRAP does not support FIPS",
                    [bK]: f
                  }, {
                    [bL]: by,
                    error: "S3 MRAP does not support S3 Accelerate",
                    [bK]: f
                  }, {
                    [bL]: [{
                      [bM]: e,
                      [bN]: [{
                        [bO]: "DisableMultiRegionAccessPoints"
                      }, b]
                    }],
                    error: "Invalid configuration: Multi-Region Access Point ARNs are disabled.",
                    [bK]: f
                  }, {
                    [bL]: [{
                      [bM]: g,
                      [bN]: bk,
                      [bP]: I
                    }],
                    [bK]: d,
                    rules: [{
                      [bL]: [{
                        [bM]: h,
                        [bN]: [{
                          [bM]: i,
                          [bN]: [{
                            [bO]: I
                          }, j]
                        }, {
                          [bM]: i,
                          [bN]: [aE, "partition"]
                        }]
                      }],
                      [bK]: d,
                      rules: [{
                        endpoint: {
                          [bQ]: "https://{accessPointName}.accesspoint.s3-global.{mrapPartition#dnsSuffix}",
                          [bR]: {
                            [bS]: [{
                              [bT]: b,
                              name: "sigv4a",
                              [bU]: v$1,
                              signingRegionSet: ["*"]
                            }]
                          },
                          [bW]: af
                        },
                        [bK]: t
                      }]
                    }, {
                      error: "Client was configured for partition `{mrapPartition#name}` but bucket referred to partition `{bucketArn#partition}`",
                      [bK]: f
                    }]
                  }]
                }, {
                  error: "Invalid Access Point Name",
                  [bK]: f
                }]
              }, aU]
            }, {
              [bL]: [{
                [bM]: h,
                [bN]: [aG, s]
              }],
              [bK]: d,
              rules: [{
                [bL]: bx,
                error: "S3 Outposts does not support Dual-stack",
                [bK]: f
              }, {
                [bL]: bH,
                error: "S3 Outposts does not support FIPS",
                [bK]: f
              }, {
                [bL]: by,
                error: "S3 Outposts does not support S3 Accelerate",
                [bK]: f
              }, {
                [bL]: [{
                  [bM]: c,
                  [bN]: [{
                    [bM]: i,
                    [bN]: [aE, "resourceId[4]"]
                  }]
                }],
                error: "Invalid Arn: Outpost Access Point ARN contains sub resources",
                [bK]: f
              }, {
                [bL]: [{
                  [bM]: i,
                  [bN]: bw,
                  [bP]: o
                }],
                [bK]: d,
                rules: [{
                  [bL]: bn,
                  [bK]: d,
                  rules: [aL, {
                    [bL]: bC,
                    [bK]: d,
                    rules: [{
                      [bL]: br,
                      [bK]: d,
                      rules: [{
                        [bL]: bD,
                        [bK]: d,
                        rules: [{
                          [bL]: bE,
                          [bK]: d,
                          rules: [{
                            [bL]: bF,
                            [bK]: d,
                            rules: [{
                              [bL]: [{
                                [bM]: i,
                                [bN]: bB,
                                [bP]: J
                              }],
                              [bK]: d,
                              rules: [{
                                [bL]: [{
                                  [bM]: i,
                                  [bN]: [aE, "resourceId[3]"],
                                  [bP]: G
                                }],
                                [bK]: d,
                                rules: [{
                                  [bL]: [{
                                    [bM]: h,
                                    [bN]: [{
                                      [bO]: J
                                    }, F]
                                  }],
                                  [bK]: d,
                                  rules: [{
                                    [bL]: bp,
                                    endpoint: {
                                      [bQ]: "https://{accessPointName}-{bucketArn#accountId}.{outpostId}.{url#authority}",
                                      [bR]: aW,
                                      [bW]: af
                                    },
                                    [bK]: t
                                  }, {
                                    endpoint: {
                                      [bQ]: "https://{accessPointName}-{bucketArn#accountId}.{outpostId}.s3-outposts.{bucketArn#region}.{bucketPartition#dnsSuffix}",
                                      [bR]: aW,
                                      [bW]: af
                                    },
                                    [bK]: t
                                  }]
                                }, {
                                  error: "Expected an outpost type `accesspoint`, found {outpostType}",
                                  [bK]: f
                                }]
                              }, {
                                error: "Invalid ARN: expected an access point name",
                                [bK]: f
                              }]
                            }, {
                              error: "Invalid ARN: Expected a 4-component resource",
                              [bK]: f
                            }]
                          }, aQ]
                        }, aR]
                      }, aS]
                    }]
                  }]
                }, {
                  error: "Invalid ARN: The outpost Id may only contain a-z, A-Z, 0-9 and `-`. Found: `{outpostId}`",
                  [bK]: f
                }]
              }, {
                error: "Invalid ARN: The Outpost Id was not set",
                [bK]: f
              }]
            }, {
              error: "Invalid ARN: Unrecognized format: {Bucket} (type: {arnType})",
              [bK]: f
            }]
          }, {
            error: "Invalid ARN: No ARN type specified",
            [bK]: f
          }]
        }, {
          [bL]: [{
            [bM]: k,
            [bN]: [Z, 0, 4, a],
            [bP]: K
          }, {
            [bM]: h,
            [bN]: [{
              [bO]: K
            }, "arn:"]
          }, {
            [bM]: q,
            [bN]: [{
              [bM]: c,
              [bN]: [aX]
            }]
          }],
          error: "Invalid ARN: `{Bucket}` was not a valid ARN",
          [bK]: f
        }, {
          [bL]: [{
            [bM]: e,
            [bN]: [ah, b]
          }, aX],
          error: "Path-style addressing cannot be used with ARN buckets",
          [bK]: f
        }, {
          [bL]: [{
            [bM]: "uriEncode",
            [bN]: bm,
            [bP]: "uri_encoded_bucket"
          }],
          [bK]: d,
          rules: [{
            [bL]: br,
            [bK]: d,
            rules: [{
              [bL]: [ai],
              [bK]: d,
              rules: [{
                [bL]: [U, ac, T, aj],
                endpoint: {
                  [bQ]: "https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                  [bR]: ak,
                  [bW]: af
                },
                [bK]: t
              }, {
                [bL]: [U, ac, T, al, am],
                [bK]: d,
                rules: [{
                  endpoint: aY,
                  [bK]: t
                }]
              }, {
                [bL]: [U, ac, T, al, ap],
                endpoint: aY,
                [bK]: t
              }, {
                [bL]: [aq, ac, T, aj],
                endpoint: {
                  [bQ]: "https://s3-fips.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                  [bR]: ak,
                  [bW]: af
                },
                [bK]: t
              }, {
                [bL]: [aq, ac, T, al, am],
                [bK]: d,
                rules: [{
                  endpoint: aZ,
                  [bK]: t
                }]
              }, {
                [bL]: [aq, ac, T, al, ap],
                endpoint: aZ,
                [bK]: t
              }, {
                [bL]: [U, ac, as, aj],
                endpoint: {
                  [bQ]: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}",
                  [bR]: ak,
                  [bW]: af
                },
                [bK]: t
              }, {
                [bL]: [U, ac, as, al, am],
                [bK]: d,
                rules: [{
                  endpoint: ba,
                  [bK]: t
                }]
              }, {
                [bL]: [U, ac, as, al, ap],
                endpoint: ba,
                [bK]: t
              }, {
                [bL]: [aq, V, ad, as, aj],
                endpoint: {
                  [bQ]: L,
                  [bR]: ak,
                  [bW]: af
                },
                [bK]: t
              }, {
                [bL]: [aq, V, ad, as, al, am],
                [bK]: d,
                rules: [{
                  [bL]: bt,
                  endpoint: bb,
                  [bK]: t
                }, {
                  endpoint: bb,
                  [bK]: t
                }]
              }, {
                [bL]: [aq, V, ad, as, al, ap],
                endpoint: bb,
                [bK]: t
              }, {
                [bL]: [aq, ac, as, aj],
                endpoint: {
                  [bQ]: M,
                  [bR]: ak,
                  [bW]: af
                },
                [bK]: t
              }, {
                [bL]: [aq, ac, as, al, am],
                [bK]: d,
                rules: [{
                  [bL]: bt,
                  endpoint: {
                    [bQ]: M,
                    [bR]: ao,
                    [bW]: af
                  },
                  [bK]: t
                }, {
                  endpoint: bc,
                  [bK]: t
                }]
              }, {
                [bL]: [aq, ac, as, al, ap],
                endpoint: bc,
                [bK]: t
              }]
            }, {
              error: "Path-style addressing cannot be used with S3 Accelerate",
              [bK]: f
            }]
          }]
        }]
      }, {
        [bL]: [{
          [bM]: c,
          [bN]: [bd]
        }, {
          [bM]: e,
          [bN]: [bd, b]
        }],
        [bK]: d,
        rules: [{
          [bL]: br,
          [bK]: d,
          rules: [{
            [bL]: bI,
            [bK]: d,
            rules: [aI, aJ, {
              [bL]: bp,
              endpoint: {
                [bQ]: N,
                [bR]: be,
                [bW]: af
              },
              [bK]: t
            }, {
              [bL]: bH,
              endpoint: {
                [bQ]: "https://s3-object-lambda-fips.{Region}.{partitionResult#dnsSuffix}",
                [bR]: be,
                [bW]: af
              },
              [bK]: t
            }, {
              endpoint: {
                [bQ]: "https://s3-object-lambda.{Region}.{partitionResult#dnsSuffix}",
                [bR]: be,
                [bW]: af
              },
              [bK]: t
            }]
          }, aD]
        }]
      }, {
        [bL]: [{
          [bM]: q,
          [bN]: bq
        }],
        [bK]: d,
        rules: [{
          [bL]: br,
          [bK]: d,
          rules: [{
            [bL]: bI,
            [bK]: d,
            rules: [{
              [bL]: [T, U, ac, aj],
              endpoint: {
                [bQ]: "https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}",
                [bR]: ak,
                [bW]: af
              },
              [bK]: t
            }, {
              [bL]: [T, U, ac, al, am],
              [bK]: d,
              rules: [{
                endpoint: bf,
                [bK]: t
              }]
            }, {
              [bL]: [T, U, ac, al, ap],
              endpoint: bf,
              [bK]: t
            }, {
              [bL]: [T, aq, ac, aj],
              endpoint: {
                [bQ]: "https://s3-fips.us-east-1.{partitionResult#dnsSuffix}",
                [bR]: ak,
                [bW]: af
              },
              [bK]: t
            }, {
              [bL]: [T, aq, ac, al, am],
              [bK]: d,
              rules: [{
                endpoint: bg,
                [bK]: t
              }]
            }, {
              [bL]: [T, aq, ac, al, ap],
              endpoint: bg,
              [bK]: t
            }, {
              [bL]: [as, U, ac, aj],
              endpoint: {
                [bQ]: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}",
                [bR]: ak,
                [bW]: af
              },
              [bK]: t
            }, {
              [bL]: [as, U, ac, al, am],
              [bK]: d,
              rules: [{
                endpoint: bh,
                [bK]: t
              }]
            }, {
              [bL]: [as, U, ac, al, ap],
              endpoint: bh,
              [bK]: t
            }, {
              [bL]: [as, aq, V, ad, aj],
              endpoint: {
                [bQ]: N,
                [bR]: ak,
                [bW]: af
              },
              [bK]: t
            }, {
              [bL]: [as, aq, V, ad, al, am],
              [bK]: d,
              rules: [{
                [bL]: bt,
                endpoint: bi,
                [bK]: t
              }, {
                endpoint: bi,
                [bK]: t
              }]
            }, {
              [bL]: [as, aq, V, ad, al, ap],
              endpoint: bi,
              [bK]: t
            }, {
              [bL]: [as, aq, ac, aj],
              endpoint: {
                [bQ]: O,
                [bR]: ak,
                [bW]: af
              },
              [bK]: t
            }, {
              [bL]: [as, aq, ac, al, am],
              [bK]: d,
              rules: [{
                [bL]: bt,
                endpoint: {
                  [bQ]: O,
                  [bR]: ao,
                  [bW]: af
                },
                [bK]: t
              }, {
                endpoint: bj,
                [bK]: t
              }]
            }, {
              [bL]: [as, aq, ac, al, ap],
              endpoint: bj,
              [bK]: t
            }]
          }, aD]
        }]
      }]
    }, {
      error: "A region must be set when sending requests to S3.",
      [bK]: f
    }]
  };
  const ruleSet = _data;

  const defaultEndpointResolver = (endpointParams, context = {}) => {
    return resolveEndpoint(ruleSet, {
      endpointParams: endpointParams,
      logger: context.logger
    });
  };

  const getRuntimeConfig$1 = config => ({
    apiVersion: "2006-03-01",
    base64Decoder: config?.base64Decoder ?? fromBase64,
    base64Encoder: config?.base64Encoder ?? toBase64,
    disableHostPrefix: config?.disableHostPrefix ?? false,
    endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,
    getAwsChunkedEncodingStream: config?.getAwsChunkedEncodingStream ?? getAwsChunkedEncodingStream,
    logger: config?.logger ?? new NoOpLogger(),
    sdkStreamMixin: config?.sdkStreamMixin ?? sdkStreamMixin,
    serviceId: config?.serviceId ?? "S3",
    signerConstructor: config?.signerConstructor ?? SignatureV4MultiRegion,
    signingEscapePath: config?.signingEscapePath ?? false,
    urlParser: config?.urlParser ?? parseUrl,
    useArnRegion: config?.useArnRegion ?? false,
    utf8Decoder: config?.utf8Decoder ?? fromUtf8,
    utf8Encoder: config?.utf8Encoder ?? toUtf8
  });

  const DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];

  const resolveDefaultsModeConfig = ({
    defaultsMode
  } = {}) => memoize(async () => {
    const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
    switch (mode?.toLowerCase()) {
      case "auto":
        return Promise.resolve(isMobileBrowser() ? "mobile" : "standard");
      case "mobile":
      case "in-region":
      case "cross-region":
      case "standard":
      case "legacy":
        return Promise.resolve(mode?.toLocaleLowerCase());
      case undefined:
        return Promise.resolve("legacy");
      default:
        throw new Error(`Invalid parameter for "defaultsMode", expect ${DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
    }
  });
  const isMobileBrowser = () => {
    const parsedUA = typeof window !== "undefined" && window?.navigator?.userAgent ? bowser.parse(window.navigator.userAgent) : undefined;
    const platform = parsedUA?.platform?.type;
    return platform === "tablet" || platform === "mobile";
  };

  const getRuntimeConfig = config => {
    const defaultsMode = resolveDefaultsModeConfig(config);
    const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);
    const clientSharedValues = getRuntimeConfig$1(config);
    return {
      ...clientSharedValues,
      ...config,
      runtime: "browser",
      defaultsMode,
      bodyLengthChecker: config?.bodyLengthChecker ?? calculateBodyLength,
      credentialDefaultProvider: config?.credentialDefaultProvider ?? (_ => () => Promise.reject(new Error("Credential is missing"))),
      defaultUserAgentProvider: config?.defaultUserAgentProvider ?? defaultUserAgent({
        serviceId: clientSharedValues.serviceId,
        clientVersion: packageInfo.version
      }),
      eventStreamSerdeProvider: config?.eventStreamSerdeProvider ?? eventStreamSerdeProvider,
      maxAttempts: config?.maxAttempts ?? DEFAULT_MAX_ATTEMPTS,
      md5: config?.md5 ?? Md5,
      region: config?.region ?? invalidProvider("Region is missing"),
      requestHandler: config?.requestHandler ?? new FetchHttpHandler(defaultConfigProvider),
      retryMode: config?.retryMode ?? (async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE),
      sha1: config?.sha1 ?? build$5.Sha1,
      sha256: config?.sha256 ?? build$2.Sha256,
      streamCollector: config?.streamCollector ?? streamCollector,
      streamHasher: config?.streamHasher ?? blobHasher,
      useDualstackEndpoint: config?.useDualstackEndpoint ?? (() => Promise.resolve(DEFAULT_USE_DUALSTACK_ENDPOINT)),
      useFipsEndpoint: config?.useFipsEndpoint ?? (() => Promise.resolve(DEFAULT_USE_FIPS_ENDPOINT))
    };
  };

  class S3Client extends Client {
    constructor(...[configuration]) {
      const _config_0 = getRuntimeConfig(configuration || {});
      const _config_1 = resolveClientEndpointParameters(_config_0);
      const _config_2 = resolveRegionConfig(_config_1);
      const _config_3 = resolveEndpointConfig(_config_2);
      const _config_4 = resolveRetryConfig(_config_3);
      const _config_5 = resolveHostHeaderConfig(_config_4);
      const _config_6 = resolveAwsAuthConfig(_config_5);
      const _config_7 = resolveS3Config(_config_6);
      const _config_8 = resolveUserAgentConfig(_config_7);
      const _config_9 = resolveEventStreamSerdeConfig(_config_8);
      super(_config_9);
      this.config = _config_9;
      this.middlewareStack.use(getRetryPlugin(this.config));
      this.middlewareStack.use(getContentLengthPlugin(this.config));
      this.middlewareStack.use(getHostHeaderPlugin(this.config));
      this.middlewareStack.use(getLoggerPlugin(this.config));
      this.middlewareStack.use(getRecursionDetectionPlugin(this.config));
      this.middlewareStack.use(getAwsAuthPlugin(this.config));
      this.middlewareStack.use(getValidateBucketNamePlugin(this.config));
      this.middlewareStack.use(getAddExpectContinuePlugin(this.config));
      this.middlewareStack.use(getUserAgentPlugin(this.config));
    }
    destroy() {
      super.destroy();
    }
  }

  function escapeAttribute(value) {
    return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
  }

  function escapeElement(value) {
    return value.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&apos;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#x0D;").replace(/\n/g, "&#x0A;").replace(/\u0085/g, "&#x85;").replace(/\u2028/, "&#x2028;");
  }

  class XmlText {
    constructor(value) {
      this.value = value;
    }
    toString() {
      return escapeElement("" + this.value);
    }
  }

  let XmlNode$1 = class XmlNode {
    static of(name, childText, withName) {
      const node = new XmlNode(name);
      if (childText !== undefined) {
        node.addChildNode(new XmlText(childText));
      }
      if (withName !== undefined) {
        node.withName(withName);
      }
      return node;
    }
    constructor(name, children = []) {
      this.name = name;
      this.children = children;
      this.attributes = {};
    }
    withName(name) {
      this.name = name;
      return this;
    }
    addAttribute(name, value) {
      this.attributes[name] = value;
      return this;
    }
    addChildNode(child) {
      this.children.push(child);
      return this;
    }
    removeAttribute(name) {
      delete this.attributes[name];
      return this;
    }
    toString() {
      const hasChildren = Boolean(this.children.length);
      let xmlText = `<${this.name}`;
      const attributes = this.attributes;
      for (const attributeName of Object.keys(attributes)) {
        const attribute = attributes[attributeName];
        if (typeof attribute !== "undefined" && attribute !== null) {
          xmlText += ` ${attributeName}="${escapeAttribute("" + attribute)}"`;
        }
      }
      return xmlText += !hasChildren ? "/>" : `>${this.children.map(c => c.toString()).join("")}</${this.name}>`;
    }
  };

  var validator$2 = {};

  var util$3 = {};

  (function (exports) {

    const nameStartChar = ':A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
    const nameChar = nameStartChar + '\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040';
    const nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*';
    const regexName = new RegExp('^' + nameRegexp + '$');
    const getAllMatches = function (string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        allmatches.startIndex = regex.lastIndex - match[0].length;
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    const isName = function (string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === 'undefined');
    };
    exports.isExist = function (v) {
      return typeof v !== 'undefined';
    };
    exports.isEmptyObject = function (obj) {
      return Object.keys(obj).length === 0;
    };

    /**
     * Copy all the properties of a into b.
     * @param {*} target
     * @param {*} a
     */
    exports.merge = function (target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a); // will return an array of own properties
        const len = keys.length; //don't make it inline
        for (let i = 0; i < len; i++) {
          if (arrayMode === 'strict') {
            target[keys[i]] = [a[keys[i]]];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    /* exports.merge =function (b,a){
      return Object.assign(b,a);
    } */

    exports.getValue = function (v) {
      if (exports.isExist(v)) {
        return v;
      } else {
        return '';
      }
    };

    // const fakeCall = function(a) {return a;};
    // const fakeCallNoReturn = function() {};

    exports.isName = isName;
    exports.getAllMatches = getAllMatches;
    exports.nameRegexp = nameRegexp;
  })(util$3);

  const util$2 = util$3;
  const defaultOptions$2 = {
    allowBooleanAttributes: false,
    //A tag can have attributes without any value
    unpairedTags: []
  };

  //const tagsPattern = new RegExp("<\\/?([\\w:\\-_\.]+)\\s*\/?>","g");
  validator$2.validate = function (xmlData, options) {
    options = Object.assign({}, defaultOptions$2, options);

    //xmlData = xmlData.replace(/(\r\n|\n|\r)/gm,"");//make it single line
    //xmlData = xmlData.replace(/(^\s*<\?xml.*?\?>)/g,"");//Remove XML starting tag
    //xmlData = xmlData.replace(/(<!DOCTYPE[\s\w\"\.\/\-\:]+(\[.*\])*\s*>)/g,"");//Remove DOCTYPE
    const tags = [];
    let tagFound = false;

    //indicates that the root tag has been closed (aka. depth 0 has been reached)
    let reachedRoot = false;
    if (xmlData[0] === '\ufeff') {
      // check for byte order mark (BOM)
      xmlData = xmlData.substr(1);
    }
    for (let i = 0; i < xmlData.length; i++) {
      if (xmlData[i] === '<' && xmlData[i + 1] === '?') {
        i += 2;
        i = readPI(xmlData, i);
        if (i.err) return i;
      } else if (xmlData[i] === '<') {
        //starting of tag
        //read until you reach to '>' avoiding any '>' in attribute value
        let tagStartPos = i;
        i++;
        if (xmlData[i] === '!') {
          i = readCommentAndCDATA(xmlData, i);
          continue;
        } else {
          let closingTag = false;
          if (xmlData[i] === '/') {
            //closing tag
            closingTag = true;
            i++;
          }
          //read tagname
          let tagName = '';
          for (; i < xmlData.length && xmlData[i] !== '>' && xmlData[i] !== ' ' && xmlData[i] !== '\t' && xmlData[i] !== '\n' && xmlData[i] !== '\r'; i++) {
            tagName += xmlData[i];
          }
          tagName = tagName.trim();
          //console.log(tagName);

          if (tagName[tagName.length - 1] === '/') {
            //self closing tag without attributes
            tagName = tagName.substring(0, tagName.length - 1);
            //continue;
            i--;
          }
          if (!validateTagName(tagName)) {
            let msg;
            if (tagName.trim().length === 0) {
              msg = "Invalid space after '<'.";
            } else {
              msg = "Tag '" + tagName + "' is an invalid name.";
            }
            return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));
          }
          const result = readAttributeStr(xmlData, i);
          if (result === false) {
            return getErrorObject('InvalidAttr', "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
          }
          let attrStr = result.value;
          i = result.index;
          if (attrStr[attrStr.length - 1] === '/') {
            //self closing tag
            const attrStrStart = i - attrStr.length;
            attrStr = attrStr.substring(0, attrStr.length - 1);
            const isValid = validateAttributeString(attrStr, options);
            if (isValid === true) {
              tagFound = true;
              //continue; //text may presents after self closing tag
            } else {
              //the result from the nested function returns the position of the error within the attribute
              //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute
              //this gives us the absolute index in the entire xml, which we can use to find the line at last
              return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
            }
          } else if (closingTag) {
            if (!result.tagClosed) {
              return getErrorObject('InvalidTag', "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
            } else if (attrStr.trim().length > 0) {
              return getErrorObject('InvalidTag', "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
            } else {
              const otg = tags.pop();
              if (tagName !== otg.tagName) {
                let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                return getErrorObject('InvalidTag', "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.", getLineNumberForPosition(xmlData, tagStartPos));
              }

              //when there are no more tags, we reached the root level.
              if (tags.length == 0) {
                reachedRoot = true;
              }
            }
          } else {
            const isValid = validateAttributeString(attrStr, options);
            if (isValid !== true) {
              //the result from the nested function returns the position of the error within the attribute
              //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute
              //this gives us the absolute index in the entire xml, which we can use to find the line at last
              return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
            }

            //if the root level has been reached before ...
            if (reachedRoot === true) {
              return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));
            } else if (options.unpairedTags.indexOf(tagName) !== -1) ; else {
              tags.push({
                tagName,
                tagStartPos
              });
            }
            tagFound = true;
          }

          //skip tag text value
          //It may include comments and CDATA value
          for (i++; i < xmlData.length; i++) {
            if (xmlData[i] === '<') {
              if (xmlData[i + 1] === '!') {
                //comment or CADATA
                i++;
                i = readCommentAndCDATA(xmlData, i);
                continue;
              } else if (xmlData[i + 1] === '?') {
                i = readPI(xmlData, ++i);
                if (i.err) return i;
              } else {
                break;
              }
            } else if (xmlData[i] === '&') {
              const afterAmp = validateAmpersand(xmlData, i);
              if (afterAmp == -1) return getErrorObject('InvalidChar', "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
              i = afterAmp;
            } else {
              if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {
                return getErrorObject('InvalidXml', "Extra text at the end", getLineNumberForPosition(xmlData, i));
              }
            }
          } //end of reading tag text value
          if (xmlData[i] === '<') {
            i--;
          }
        }
      } else {
        if (isWhiteSpace(xmlData[i])) {
          continue;
        }
        return getErrorObject('InvalidChar', "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
      }
    }
    if (!tagFound) {
      return getErrorObject('InvalidXml', 'Start tag expected.', 1);
    } else if (tags.length == 1) {
      return getErrorObject('InvalidTag', "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
    } else if (tags.length > 0) {
      return getErrorObject('InvalidXml', "Invalid '" + JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\r?\n/g, '') + "' found.", {
        line: 1,
        col: 1
      });
    }
    return true;
  };
  function isWhiteSpace(char) {
    return char === ' ' || char === '\t' || char === '\n' || char === '\r';
  }
  /**
   * Read Processing insstructions and skip
   * @param {*} xmlData
   * @param {*} i
   */
  function readPI(xmlData, i) {
    const start = i;
    for (; i < xmlData.length; i++) {
      if (xmlData[i] == '?' || xmlData[i] == ' ') {
        //tagname
        const tagname = xmlData.substr(start, i - start);
        if (i > 5 && tagname === 'xml') {
          return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));
        } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {
          //check if valid attribut string
          i++;
          break;
        } else {
          continue;
        }
      }
    }
    return i;
  }
  function readCommentAndCDATA(xmlData, i) {
    if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {
      //comment
      for (i += 3; i < xmlData.length; i++) {
        if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {
          i += 2;
          break;
        }
      }
    } else if (xmlData.length > i + 8 && xmlData[i + 1] === 'D' && xmlData[i + 2] === 'O' && xmlData[i + 3] === 'C' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'Y' && xmlData[i + 6] === 'P' && xmlData[i + 7] === 'E') {
      let angleBracketsCount = 1;
      for (i += 8; i < xmlData.length; i++) {
        if (xmlData[i] === '<') {
          angleBracketsCount++;
        } else if (xmlData[i] === '>') {
          angleBracketsCount--;
          if (angleBracketsCount === 0) {
            break;
          }
        }
      }
    } else if (xmlData.length > i + 9 && xmlData[i + 1] === '[' && xmlData[i + 2] === 'C' && xmlData[i + 3] === 'D' && xmlData[i + 4] === 'A' && xmlData[i + 5] === 'T' && xmlData[i + 6] === 'A' && xmlData[i + 7] === '[') {
      for (i += 8; i < xmlData.length; i++) {
        if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {
          i += 2;
          break;
        }
      }
    }
    return i;
  }
  const doubleQuote = '"';
  const singleQuote = "'";

  /**
   * Keep reading xmlData until '<' is found outside the attribute value.
   * @param {string} xmlData
   * @param {number} i
   */
  function readAttributeStr(xmlData, i) {
    let attrStr = '';
    let startChar = '';
    let tagClosed = false;
    for (; i < xmlData.length; i++) {
      if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
        if (startChar === '') {
          startChar = xmlData[i];
        } else if (startChar !== xmlData[i]) ; else {
          startChar = '';
        }
      } else if (xmlData[i] === '>') {
        if (startChar === '') {
          tagClosed = true;
          break;
        }
      }
      attrStr += xmlData[i];
    }
    if (startChar !== '') {
      return false;
    }
    return {
      value: attrStr,
      index: i,
      tagClosed: tagClosed
    };
  }

  /**
   * Select all the attributes whether valid or invalid.
   */
  const validAttrStrRegxp = new RegExp('(\\s*)([^\\s=]+)(\\s*=)?(\\s*([\'"])(([\\s\\S])*?)\\5)?', 'g');

  //attr, ="sd", a="amit's", a="sd"b="saf", ab  cd=""

  function validateAttributeString(attrStr, options) {
    //console.log("start:"+attrStr+":end");

    //if(attrStr.trim().length === 0) return true; //empty string

    const matches = util$2.getAllMatches(attrStr, validAttrStrRegxp);
    const attrNames = {};
    for (let i = 0; i < matches.length; i++) {
      if (matches[i][1].length === 0) {
        //nospace before attribute name: a="sd"b="saf"
        return getErrorObject('InvalidAttr', "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(matches[i]));
      } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {
        return getErrorObject('InvalidAttr', "Attribute '" + matches[i][2] + "' is without value.", getPositionFromMatch(matches[i]));
      } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {
        //independent attribute: ab
        return getErrorObject('InvalidAttr', "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(matches[i]));
      }
      /* else if(matches[i][6] === undefined){//attribute without value: ab=
                      return { err: { code:"InvalidAttr",msg:"attribute " + matches[i][2] + " has no value assigned."}};
                  } */
      const attrName = matches[i][2];
      if (!validateAttrName(attrName)) {
        return getErrorObject('InvalidAttr', "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i]));
      }
      if (!attrNames.hasOwnProperty(attrName)) {
        //check for duplicate attribute.
        attrNames[attrName] = 1;
      } else {
        return getErrorObject('InvalidAttr', "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i]));
      }
    }
    return true;
  }
  function validateNumberAmpersand(xmlData, i) {
    let re = /\d/;
    if (xmlData[i] === 'x') {
      i++;
      re = /[\da-fA-F]/;
    }
    for (; i < xmlData.length; i++) {
      if (xmlData[i] === ';') return i;
      if (!xmlData[i].match(re)) break;
    }
    return -1;
  }
  function validateAmpersand(xmlData, i) {
    // https://www.w3.org/TR/xml/#dt-charref
    i++;
    if (xmlData[i] === ';') return -1;
    if (xmlData[i] === '#') {
      i++;
      return validateNumberAmpersand(xmlData, i);
    }
    let count = 0;
    for (; i < xmlData.length; i++, count++) {
      if (xmlData[i].match(/\w/) && count < 20) continue;
      if (xmlData[i] === ';') break;
      return -1;
    }
    return i;
  }
  function getErrorObject(code, message, lineNumber) {
    return {
      err: {
        code: code,
        msg: message,
        line: lineNumber.line || lineNumber,
        col: lineNumber.col
      }
    };
  }
  function validateAttrName(attrName) {
    return util$2.isName(attrName);
  }

  // const startsWithXML = /^xml/i;

  function validateTagName(tagname) {
    return util$2.isName(tagname) /* && !tagname.match(startsWithXML) */;
  }

  //this function returns the line number for the character at the given index
  function getLineNumberForPosition(xmlData, index) {
    const lines = xmlData.substring(0, index).split(/\r?\n/);
    return {
      line: lines.length,
      // column number is last line's length + 1, because column numbering starts at 1:
      col: lines[lines.length - 1].length + 1
    };
  }

  //this function returns the position of the first character of match within attrStr
  function getPositionFromMatch(match) {
    return match.startIndex + match[1].length;
  }

  var OptionsBuilder = {};

  const defaultOptions$1 = {
    preserveOrder: false,
    attributeNamePrefix: '@_',
    attributesGroupName: false,
    textNodeName: '#text',
    ignoreAttributes: true,
    removeNSPrefix: false,
    // remove NS from tag name or attribute name if true
    allowBooleanAttributes: false,
    //a tag can have attributes without any value
    //ignoreRootElement : false,
    parseTagValue: true,
    parseAttributeValue: false,
    trimValues: true,
    //Trim string values of tag and attributes
    cdataPropName: false,
    numberParseOptions: {
      hex: true,
      leadingZeros: true,
      eNotation: true
    },
    tagValueProcessor: function (tagName, val) {
      return val;
    },
    attributeValueProcessor: function (attrName, val) {
      return val;
    },
    stopNodes: [],
    //nested tags will not be parsed even for errors
    alwaysCreateTextNode: false,
    isArray: () => false,
    commentPropName: false,
    unpairedTags: [],
    processEntities: true,
    htmlEntities: false,
    ignoreDeclaration: false,
    ignorePiTags: false,
    transformTagName: false,
    transformAttributeName: false,
    updateTag: function (tagName, jPath, attrs) {
      return tagName;
    }
    // skipEmptyListItem: false
  };

  const buildOptions$1 = function (options) {
    return Object.assign({}, defaultOptions$1, options);
  };
  OptionsBuilder.buildOptions = buildOptions$1;
  OptionsBuilder.defaultOptions = defaultOptions$1;

  class XmlNode {
    constructor(tagname) {
      this.tagname = tagname;
      this.child = []; //nested tags, text, cdata, comments in order
      this[":@"] = {}; //attributes map
    }

    add(key, val) {
      // this.child.push( {name : key, val: val, isCdata: isCdata });
      if (key === "__proto__") key = "#__proto__";
      this.child.push({
        [key]: val
      });
    }
    addChild(node) {
      if (node.tagname === "__proto__") node.tagname = "#__proto__";
      if (node[":@"] && Object.keys(node[":@"]).length > 0) {
        this.child.push({
          [node.tagname]: node.child,
          [":@"]: node[":@"]
        });
      } else {
        this.child.push({
          [node.tagname]: node.child
        });
      }
    }
  }
  var xmlNode$1 = XmlNode;

  const util$1 = util$3;

  //TODO: handle comments
  function readDocType$1(xmlData, i) {
    const entities = {};
    if (xmlData[i + 3] === 'O' && xmlData[i + 4] === 'C' && xmlData[i + 5] === 'T' && xmlData[i + 6] === 'Y' && xmlData[i + 7] === 'P' && xmlData[i + 8] === 'E') {
      i = i + 9;
      let angleBracketsCount = 1;
      let hasBody = false,
        comment = false;
      let exp = "";
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === '<' && !comment) {
          //Determine the tag type
          if (hasBody && isEntity(xmlData, i)) {
            i += 7;
            [entityName, val, i] = readEntityExp(xmlData, i + 1);
            if (val.indexOf("&") === -1)
              //Parameter entities are not supported
              entities[validateEntityName(entityName)] = {
                regx: RegExp(`&${entityName};`, "g"),
                val: val
              };
          } else if (hasBody && isElement(xmlData, i)) i += 8; //Not supported
          else if (hasBody && isAttlist(xmlData, i)) i += 8; //Not supported
          else if (hasBody && isNotation(xmlData, i)) i += 9; //Not supported
          else if (isComment) comment = true;else throw new Error("Invalid DOCTYPE");
          angleBracketsCount++;
          exp = "";
        } else if (xmlData[i] === '>') {
          //Read tag content
          if (comment) {
            if (xmlData[i - 1] === "-" && xmlData[i - 2] === "-") {
              comment = false;
              angleBracketsCount--;
            }
          } else {
            angleBracketsCount--;
          }
          if (angleBracketsCount === 0) {
            break;
          }
        } else if (xmlData[i] === '[') {
          hasBody = true;
        } else {
          exp += xmlData[i];
        }
      }
      if (angleBracketsCount !== 0) {
        throw new Error(`Unclosed DOCTYPE`);
      }
    } else {
      throw new Error(`Invalid Tag instead of DOCTYPE`);
    }
    return {
      entities,
      i
    };
  }
  function readEntityExp(xmlData, i) {
    //External entities are not supported
    //    <!ENTITY ext SYSTEM "http://normal-website.com" >

    //Parameter entities are not supported
    //    <!ENTITY entityname "&anotherElement;">

    //Internal entities are supported
    //    <!ENTITY entityname "replacement text">

    //read EntityName
    let entityName = "";
    for (; i < xmlData.length && xmlData[i] !== "'" && xmlData[i] !== '"'; i++) {
      // if(xmlData[i] === " ") continue;
      // else 
      entityName += xmlData[i];
    }
    entityName = entityName.trim();
    if (entityName.indexOf(" ") !== -1) throw new Error("External entites are not supported");

    //read Entity Value
    const startChar = xmlData[i++];
    let val = "";
    for (; i < xmlData.length && xmlData[i] !== startChar; i++) {
      val += xmlData[i];
    }
    return [entityName, val, i];
  }
  function isComment(xmlData, i) {
    if (xmlData[i + 1] === '!' && xmlData[i + 2] === '-' && xmlData[i + 3] === '-') return true;
    return false;
  }
  function isEntity(xmlData, i) {
    if (xmlData[i + 1] === '!' && xmlData[i + 2] === 'E' && xmlData[i + 3] === 'N' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'I' && xmlData[i + 6] === 'T' && xmlData[i + 7] === 'Y') return true;
    return false;
  }
  function isElement(xmlData, i) {
    if (xmlData[i + 1] === '!' && xmlData[i + 2] === 'E' && xmlData[i + 3] === 'L' && xmlData[i + 4] === 'E' && xmlData[i + 5] === 'M' && xmlData[i + 6] === 'E' && xmlData[i + 7] === 'N' && xmlData[i + 8] === 'T') return true;
    return false;
  }
  function isAttlist(xmlData, i) {
    if (xmlData[i + 1] === '!' && xmlData[i + 2] === 'A' && xmlData[i + 3] === 'T' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'L' && xmlData[i + 6] === 'I' && xmlData[i + 7] === 'S' && xmlData[i + 8] === 'T') return true;
    return false;
  }
  function isNotation(xmlData, i) {
    if (xmlData[i + 1] === '!' && xmlData[i + 2] === 'N' && xmlData[i + 3] === 'O' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'A' && xmlData[i + 6] === 'T' && xmlData[i + 7] === 'I' && xmlData[i + 8] === 'O' && xmlData[i + 9] === 'N') return true;
    return false;
  }
  function validateEntityName(name) {
    if (util$1.isName(name)) return name;else throw new Error(`Invalid entity name ${name}`);
  }
  var DocTypeReader = readDocType$1;

  const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
  const numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
  // const octRegex = /0x[a-z0-9]+/;
  // const binRegex = /0x[a-z0-9]+/;

  //polyfill
  if (!Number.parseInt && window.parseInt) {
    Number.parseInt = window.parseInt;
  }
  if (!Number.parseFloat && window.parseFloat) {
    Number.parseFloat = window.parseFloat;
  }
  const consider = {
    hex: true,
    leadingZeros: true,
    decimalPoint: "\.",
    eNotation: true
    //skipLike: /regex/
  };

  function toNumber$1(str, options = {}) {
    // const options = Object.assign({}, consider);
    // if(opt.leadingZeros === false){
    //     options.leadingZeros = false;
    // }else if(opt.hex === false){
    //     options.hex = false;
    // }

    options = Object.assign({}, consider, options);
    if (!str || typeof str !== "string") return str;
    let trimmedStr = str.trim();
    // if(trimmedStr === "0.0") return 0;
    // else if(trimmedStr === "+0.0") return 0;
    // else if(trimmedStr === "-0.0") return -0;

    if (options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;else if (options.hex && hexRegex.test(trimmedStr)) {
      return Number.parseInt(trimmedStr, 16);
      // } else if (options.parseOct && octRegex.test(str)) {
      //     return Number.parseInt(val, 8);
      // }else if (options.parseBin && binRegex.test(str)) {
      //     return Number.parseInt(val, 2);
    } else {
      //separate negative sign, leading zeros, and rest number
      const match = numRegex.exec(trimmedStr);
      if (match) {
        const sign = match[1];
        const leadingZeros = match[2];
        let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros
        //trim ending zeros for floating number

        const eNotation = match[4] || match[6];
        if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".") return str; //-0123
        else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".") return str; //0123
        else {
          //no leading zeros or leading zeros are allowed
          const num = Number(trimmedStr);
          const numStr = "" + num;
          if (numStr.search(/[eE]/) !== -1) {
            //given number is long and parsed to eNotation
            if (options.eNotation) return num;else return str;
          } else if (eNotation) {
            //given number has enotation
            if (options.eNotation) return num;else return str;
          } else if (trimmedStr.indexOf(".") !== -1) {
            //floating number
            // const decimalPart = match[5].substr(1);
            // const intPart = trimmedStr.substr(0,trimmedStr.indexOf("."));

            // const p = numStr.indexOf(".");
            // const givenIntPart = numStr.substr(0,p);
            // const givenDecPart = numStr.substr(p+1);
            if (numStr === "0" && numTrimmedByZeros === "") return num; //0.0
            else if (numStr === numTrimmedByZeros) return num; //0.456. 0.79000
            else if (sign && numStr === "-" + numTrimmedByZeros) return num;else return str;
          }
          if (leadingZeros) {
            // if(numTrimmedByZeros === numStr){
            //     if(options.leadingZeros) return num;
            //     else return str;
            // }else return str;
            if (numTrimmedByZeros === numStr) return num;else if (sign + numTrimmedByZeros === numStr) return num;else return str;
          }
          if (trimmedStr === numStr) return num;else if (trimmedStr === sign + numStr) return num;
          // else{
          //     //number with +/- sign
          //     trimmedStr.test(/[-+][0-9]);

          // }
          return str;
        }
        // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;
      } else {
        //non-numeric string
        return str;
      }
    }
  }

  /**
   * 
   * @param {string} numStr without leading zeros
   * @returns 
   */
  function trimZeros(numStr) {
    if (numStr && numStr.indexOf(".") !== -1) {
      //float
      numStr = numStr.replace(/0+$/, ""); //remove ending zeros
      if (numStr === ".") numStr = "0";else if (numStr[0] === ".") numStr = "0" + numStr;else if (numStr[numStr.length - 1] === ".") numStr = numStr.substr(0, numStr.length - 1);
      return numStr;
    }
    return numStr;
  }
  var strnum = toNumber$1;

  ///@ts-check

  const util = util$3;
  const xmlNode = xmlNode$1;
  const readDocType = DocTypeReader;
  const toNumber = strnum;
  '<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)'.replace(/NAME/g, util.nameRegexp);

  //const tagsRegx = new RegExp("<(\\/?[\\w:\\-\._]+)([^>]*)>(\\s*"+cdataRegx+")*([^<]+)?","g");
  //const tagsRegx = new RegExp("<(\\/?)((\\w*:)?([\\w:\\-\._]+))([^>]*)>([^<]*)("+cdataRegx+"([^<]*))*([^<]+)?","g");

  let OrderedObjParser$1 = class OrderedObjParser {
    constructor(options) {
      this.options = options;
      this.currentNode = null;
      this.tagsNodeStack = [];
      this.docTypeEntities = {};
      this.lastEntities = {
        "apos": {
          regex: /&(apos|#39|#x27);/g,
          val: "'"
        },
        "gt": {
          regex: /&(gt|#62|#x3E);/g,
          val: ">"
        },
        "lt": {
          regex: /&(lt|#60|#x3C);/g,
          val: "<"
        },
        "quot": {
          regex: /&(quot|#34|#x22);/g,
          val: "\""
        }
      };
      this.ampEntity = {
        regex: /&(amp|#38|#x26);/g,
        val: "&"
      };
      this.htmlEntities = {
        "space": {
          regex: /&(nbsp|#160);/g,
          val: " "
        },
        // "lt" : { regex: /&(lt|#60);/g, val: "<" },
        // "gt" : { regex: /&(gt|#62);/g, val: ">" },
        // "amp" : { regex: /&(amp|#38);/g, val: "&" },
        // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
        // "apos" : { regex: /&(apos|#39);/g, val: "'" },
        "cent": {
          regex: /&(cent|#162);/g,
          val: "¢"
        },
        "pound": {
          regex: /&(pound|#163);/g,
          val: "£"
        },
        "yen": {
          regex: /&(yen|#165);/g,
          val: "¥"
        },
        "euro": {
          regex: /&(euro|#8364);/g,
          val: "€"
        },
        "copyright": {
          regex: /&(copy|#169);/g,
          val: "©"
        },
        "reg": {
          regex: /&(reg|#174);/g,
          val: "®"
        },
        "inr": {
          regex: /&(inr|#8377);/g,
          val: "₹"
        }
      };
      this.addExternalEntities = addExternalEntities;
      this.parseXml = parseXml;
      this.parseTextData = parseTextData;
      this.resolveNameSpace = resolveNameSpace;
      this.buildAttributesMap = buildAttributesMap;
      this.isItStopNode = isItStopNode;
      this.replaceEntitiesValue = replaceEntitiesValue$1;
      this.readStopNodeData = readStopNodeData;
      this.saveTextToParentTag = saveTextToParentTag;
      this.addChild = addChild;
    }
  };
  function addExternalEntities(externalEntities) {
    const entKeys = Object.keys(externalEntities);
    for (let i = 0; i < entKeys.length; i++) {
      const ent = entKeys[i];
      this.lastEntities[ent] = {
        regex: new RegExp("&" + ent + ";", "g"),
        val: externalEntities[ent]
      };
    }
  }

  /**
   * @param {string} val
   * @param {string} tagName
   * @param {string} jPath
   * @param {boolean} dontTrim
   * @param {boolean} hasAttributes
   * @param {boolean} isLeafNode
   * @param {boolean} escapeEntities
   */
  function parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
    if (val !== undefined) {
      if (this.options.trimValues && !dontTrim) {
        val = val.trim();
      }
      if (val.length > 0) {
        if (!escapeEntities) val = this.replaceEntitiesValue(val);
        const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);
        if (newval === null || newval === undefined) {
          //don't parse
          return val;
        } else if (typeof newval !== typeof val || newval !== val) {
          //overwrite
          return newval;
        } else if (this.options.trimValues) {
          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
        } else {
          const trimmedVal = val.trim();
          if (trimmedVal === val) {
            return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
          } else {
            return val;
          }
        }
      }
    }
  }
  function resolveNameSpace(tagname) {
    if (this.options.removeNSPrefix) {
      const tags = tagname.split(':');
      const prefix = tagname.charAt(0) === '/' ? '/' : '';
      if (tags[0] === 'xmlns') {
        return '';
      }
      if (tags.length === 2) {
        tagname = prefix + tags[1];
      }
    }
    return tagname;
  }

  //TODO: change regex to capture NS
  //const attrsRegx = new RegExp("([\\w\\-\\.\\:]+)\\s*=\\s*(['\"])((.|\n)*?)\\2","gm");
  const attrsRegx = new RegExp('([^\\s=]+)\\s*(=\\s*([\'"])([\\s\\S]*?)\\3)?', 'gm');
  function buildAttributesMap(attrStr, jPath, tagName) {
    if (!this.options.ignoreAttributes && typeof attrStr === 'string') {
      // attrStr = attrStr.replace(/\r?\n/g, ' ');
      //attrStr = attrStr || attrStr.trim();

      const matches = util.getAllMatches(attrStr, attrsRegx);
      const len = matches.length; //don't make it inline
      const attrs = {};
      for (let i = 0; i < len; i++) {
        const attrName = this.resolveNameSpace(matches[i][1]);
        let oldVal = matches[i][4];
        let aName = this.options.attributeNamePrefix + attrName;
        if (attrName.length) {
          if (this.options.transformAttributeName) {
            aName = this.options.transformAttributeName(aName);
          }
          if (aName === "__proto__") aName = "#__proto__";
          if (oldVal !== undefined) {
            if (this.options.trimValues) {
              oldVal = oldVal.trim();
            }
            oldVal = this.replaceEntitiesValue(oldVal);
            const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
            if (newVal === null || newVal === undefined) {
              //don't parse
              attrs[aName] = oldVal;
            } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
              //overwrite
              attrs[aName] = newVal;
            } else {
              //parse
              attrs[aName] = parseValue(oldVal, this.options.parseAttributeValue, this.options.numberParseOptions);
            }
          } else if (this.options.allowBooleanAttributes) {
            attrs[aName] = true;
          }
        }
      }
      if (!Object.keys(attrs).length) {
        return;
      }
      if (this.options.attributesGroupName) {
        const attrCollection = {};
        attrCollection[this.options.attributesGroupName] = attrs;
        return attrCollection;
      }
      return attrs;
    }
  }
  const parseXml = function (xmlData) {
    xmlData = xmlData.replace(/\r\n?/g, "\n"); //TODO: remove this line
    const xmlObj = new xmlNode('!xml');
    let currentNode = xmlObj;
    let textData = "";
    let jPath = "";
    for (let i = 0; i < xmlData.length; i++) {
      //for each char in XML data
      const ch = xmlData[i];
      if (ch === '<') {
        // const nextIndex = i+1;
        // const _2ndChar = xmlData[nextIndex];
        if (xmlData[i + 1] === '/') {
          //Closing Tag
          const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
          let tagName = xmlData.substring(i + 2, closeIndex).trim();
          if (this.options.removeNSPrefix) {
            const colonIndex = tagName.indexOf(":");
            if (colonIndex !== -1) {
              tagName = tagName.substr(colonIndex + 1);
            }
          }
          if (this.options.transformTagName) {
            tagName = this.options.transformTagName(tagName);
          }
          if (currentNode) {
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
          }

          //check if last tag of nested tag was unpaired tag
          const lastTagName = jPath.substring(jPath.lastIndexOf(".") + 1);
          if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {
            throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);
          }
          let propIndex = 0;
          if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {
            propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.') - 1);
            this.tagsNodeStack.pop();
          } else {
            propIndex = jPath.lastIndexOf(".");
          }
          jPath = jPath.substring(0, propIndex);
          currentNode = this.tagsNodeStack.pop(); //avoid recursion, set the parent tag scope
          textData = "";
          i = closeIndex;
        } else if (xmlData[i + 1] === '?') {
          let tagData = readTagExp(xmlData, i, false, "?>");
          if (!tagData) throw new Error("Pi Tag is not closed.");
          textData = this.saveTextToParentTag(textData, currentNode, jPath);
          if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) ; else {
            const childNode = new xmlNode(tagData.tagName);
            childNode.add(this.options.textNodeName, "");
            if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
              childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);
            }
            this.addChild(currentNode, childNode, jPath);
          }
          i = tagData.closeIndex + 1;
        } else if (xmlData.substr(i + 1, 3) === '!--') {
          const endIndex = findClosingIndex(xmlData, "-->", i + 4, "Comment is not closed.");
          if (this.options.commentPropName) {
            const comment = xmlData.substring(i + 4, endIndex - 2);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            currentNode.add(this.options.commentPropName, [{
              [this.options.textNodeName]: comment
            }]);
          }
          i = endIndex;
        } else if (xmlData.substr(i + 1, 2) === '!D') {
          const result = readDocType(xmlData, i);
          this.docTypeEntities = result.entities;
          i = result.i;
        } else if (xmlData.substr(i + 1, 2) === '![') {
          const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
          const tagExp = xmlData.substring(i + 9, closeIndex);
          textData = this.saveTextToParentTag(textData, currentNode, jPath);

          //cdata should be set even if it is 0 length string
          if (this.options.cdataPropName) {
            // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + "." + this.options.cdataPropName, true, false, true);
            // if(!val) val = "";
            currentNode.add(this.options.cdataPropName, [{
              [this.options.textNodeName]: tagExp
            }]);
          } else {
            let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);
            if (val == undefined) val = "";
            currentNode.add(this.options.textNodeName, val);
          }
          i = closeIndex + 2;
        } else {
          //Opening tag
          let result = readTagExp(xmlData, i, this.options.removeNSPrefix);
          let tagName = result.tagName;
          let tagExp = result.tagExp;
          let attrExpPresent = result.attrExpPresent;
          let closeIndex = result.closeIndex;
          if (this.options.transformTagName) {
            tagName = this.options.transformTagName(tagName);
          }

          //save text as child node
          if (currentNode && textData) {
            if (currentNode.tagname !== '!xml') {
              //when nested tag is found
              textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
            }
          }

          //check if last tag was unpaired tag
          const lastTag = currentNode;
          if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
            currentNode = this.tagsNodeStack.pop();
            jPath = jPath.substring(0, jPath.lastIndexOf("."));
          }
          if (tagName !== xmlObj.tagname) {
            jPath += jPath ? "." + tagName : tagName;
          }
          if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
            //TODO: namespace
            let tagContent = "";
            //self-closing tag
            if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
              i = result.closeIndex;
            }
            //unpaired tag
            else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
              i = result.closeIndex;
            }
            //normal tag
            else {
              //read until closing tag is found
              const result = this.readStopNodeData(xmlData, tagName, closeIndex + 1);
              if (!result) throw new Error(`Unexpected end of ${tagName}`);
              i = result.i;
              tagContent = result.tagContent;
            }
            const childNode = new xmlNode(tagName);
            if (tagName !== tagExp && attrExpPresent) {
              childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
            }
            if (tagContent) {
              tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
            }
            jPath = jPath.substr(0, jPath.lastIndexOf("."));
            childNode.add(this.options.textNodeName, tagContent);
            this.addChild(currentNode, childNode, jPath);
          } else {
            //selfClosing tag
            if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
              if (tagName[tagName.length - 1] === "/") {
                //remove trailing '/'
                tagName = tagName.substr(0, tagName.length - 1);
                tagExp = tagName;
              } else {
                tagExp = tagExp.substr(0, tagExp.length - 1);
              }
              if (this.options.transformTagName) {
                tagName = this.options.transformTagName(tagName);
              }
              const childNode = new xmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
              }
              this.addChild(currentNode, childNode, jPath);
              jPath = jPath.substr(0, jPath.lastIndexOf("."));
            }
            //opening tag
            else {
              const childNode = new xmlNode(tagName);
              this.tagsNodeStack.push(currentNode);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath, tagName);
              }
              this.addChild(currentNode, childNode, jPath);
              currentNode = childNode;
            }
            textData = "";
            i = closeIndex;
          }
        }
      } else {
        textData += xmlData[i];
      }
    }
    return xmlObj.child;
  };
  function addChild(currentNode, childNode, jPath) {
    const result = this.options.updateTag(childNode.tagname, jPath, childNode[":@"]);
    if (result === false) ; else if (typeof result === "string") {
      childNode.tagname = result;
      currentNode.addChild(childNode);
    } else {
      currentNode.addChild(childNode);
    }
  }
  const replaceEntitiesValue$1 = function (val) {
    if (this.options.processEntities) {
      for (let entityName in this.docTypeEntities) {
        const entity = this.docTypeEntities[entityName];
        val = val.replace(entity.regx, entity.val);
      }
      for (let entityName in this.lastEntities) {
        const entity = this.lastEntities[entityName];
        val = val.replace(entity.regex, entity.val);
      }
      if (this.options.htmlEntities) {
        for (let entityName in this.htmlEntities) {
          const entity = this.htmlEntities[entityName];
          val = val.replace(entity.regex, entity.val);
        }
      }
      val = val.replace(this.ampEntity.regex, this.ampEntity.val);
    }
    return val;
  };
  function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
    if (textData) {
      //store previously collected data as textNode
      if (isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0;
      textData = this.parseTextData(textData, currentNode.tagname, jPath, false, currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false, isLeafNode);
      if (textData !== undefined && textData !== "") currentNode.add(this.options.textNodeName, textData);
      textData = "";
    }
    return textData;
  }

  //TODO: use jPath to simplify the logic
  /**
   * 
   * @param {string[]} stopNodes 
   * @param {string} jPath
   * @param {string} currentTagName 
   */
  function isItStopNode(stopNodes, jPath, currentTagName) {
    const allNodesExp = "*." + currentTagName;
    for (const stopNodePath in stopNodes) {
      const stopNodeExp = stopNodes[stopNodePath];
      if (allNodesExp === stopNodeExp || jPath === stopNodeExp) return true;
    }
    return false;
  }

  /**
   * Returns the tag Expression and where it is ending handling single-double quotes situation
   * @param {string} xmlData 
   * @param {number} i starting index
   * @returns 
   */
  function tagExpWithClosingIndex(xmlData, i, closingChar = ">") {
    let attrBoundary;
    let tagExp = "";
    for (let index = i; index < xmlData.length; index++) {
      let ch = xmlData[index];
      if (attrBoundary) {
        if (ch === attrBoundary) attrBoundary = ""; //reset
      } else if (ch === '"' || ch === "'") {
        attrBoundary = ch;
      } else if (ch === closingChar[0]) {
        if (closingChar[1]) {
          if (xmlData[index + 1] === closingChar[1]) {
            return {
              data: tagExp,
              index: index
            };
          }
        } else {
          return {
            data: tagExp,
            index: index
          };
        }
      } else if (ch === '\t') {
        ch = " ";
      }
      tagExp += ch;
    }
  }
  function findClosingIndex(xmlData, str, i, errMsg) {
    const closingIndex = xmlData.indexOf(str, i);
    if (closingIndex === -1) {
      throw new Error(errMsg);
    } else {
      return closingIndex + str.length - 1;
    }
  }
  function readTagExp(xmlData, i, removeNSPrefix, closingChar = ">") {
    const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);
    if (!result) return;
    let tagExp = result.data;
    const closeIndex = result.index;
    const separatorIndex = tagExp.search(/\s/);
    let tagName = tagExp;
    let attrExpPresent = true;
    if (separatorIndex !== -1) {
      //separate tag name and attributes expression
      tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, '');
      tagExp = tagExp.substr(separatorIndex + 1);
    }
    if (removeNSPrefix) {
      const colonIndex = tagName.indexOf(":");
      if (colonIndex !== -1) {
        tagName = tagName.substr(colonIndex + 1);
        attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
      }
    }
    return {
      tagName: tagName,
      tagExp: tagExp,
      closeIndex: closeIndex,
      attrExpPresent: attrExpPresent
    };
  }
  /**
   * find paired tag for a stop node
   * @param {string} xmlData 
   * @param {string} tagName 
   * @param {number} i 
   */
  function readStopNodeData(xmlData, tagName, i) {
    const startIndex = i;
    // Starting at 1 since we already have an open tag
    let openTagCount = 1;
    for (; i < xmlData.length; i++) {
      if (xmlData[i] === "<") {
        if (xmlData[i + 1] === "/") {
          //close tag
          const closeIndex = findClosingIndex(xmlData, ">", i, `${tagName} is not closed`);
          let closeTagName = xmlData.substring(i + 2, closeIndex).trim();
          if (closeTagName === tagName) {
            openTagCount--;
            if (openTagCount === 0) {
              return {
                tagContent: xmlData.substring(startIndex, i),
                i: closeIndex
              };
            }
          }
          i = closeIndex;
        } else if (xmlData[i + 1] === '?') {
          const closeIndex = findClosingIndex(xmlData, "?>", i + 1, "StopNode is not closed.");
          i = closeIndex;
        } else if (xmlData.substr(i + 1, 3) === '!--') {
          const closeIndex = findClosingIndex(xmlData, "-->", i + 3, "StopNode is not closed.");
          i = closeIndex;
        } else if (xmlData.substr(i + 1, 2) === '![') {
          const closeIndex = findClosingIndex(xmlData, "]]>", i, "StopNode is not closed.") - 2;
          i = closeIndex;
        } else {
          const tagData = readTagExp(xmlData, i, '>');
          if (tagData) {
            const openTagName = tagData && tagData.tagName;
            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
              openTagCount++;
            }
            i = tagData.closeIndex;
          }
        }
      }
    } //end for loop
  }

  function parseValue(val, shouldParse, options) {
    if (shouldParse && typeof val === 'string') {
      //console.log(options)
      const newval = val.trim();
      if (newval === 'true') return true;else if (newval === 'false') return false;else return toNumber(val, options);
    } else {
      if (util.isExist(val)) {
        return val;
      } else {
        return '';
      }
    }
  }
  var OrderedObjParser_1 = OrderedObjParser$1;

  var node2json = {};

  /**
   * 
   * @param {array} node 
   * @param {any} options 
   * @returns 
   */
  function prettify$1(node, options) {
    return compress(node, options);
  }

  /**
   * 
   * @param {array} arr 
   * @param {object} options 
   * @param {string} jPath 
   * @returns object
   */
  function compress(arr, options, jPath) {
    let text;
    const compressedObj = {};
    for (let i = 0; i < arr.length; i++) {
      const tagObj = arr[i];
      const property = propName$1(tagObj);
      let newJpath = "";
      if (jPath === undefined) newJpath = property;else newJpath = jPath + "." + property;
      if (property === options.textNodeName) {
        if (text === undefined) text = tagObj[property];else text += "" + tagObj[property];
      } else if (property === undefined) {
        continue;
      } else if (tagObj[property]) {
        let val = compress(tagObj[property], options, newJpath);
        const isLeaf = isLeafTag(val, options);
        if (tagObj[":@"]) {
          assignAttributes(val, tagObj[":@"], newJpath, options);
        } else if (Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode) {
          val = val[options.textNodeName];
        } else if (Object.keys(val).length === 0) {
          if (options.alwaysCreateTextNode) val[options.textNodeName] = "";else val = "";
        }
        if (compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {
          if (!Array.isArray(compressedObj[property])) {
            compressedObj[property] = [compressedObj[property]];
          }
          compressedObj[property].push(val);
        } else {
          //TODO: if a node is not an array, then check if it should be an array
          //also determine if it is a leaf node
          if (options.isArray(property, newJpath, isLeaf)) {
            compressedObj[property] = [val];
          } else {
            compressedObj[property] = val;
          }
        }
      }
    }
    // if(text && text.length > 0) compressedObj[options.textNodeName] = text;
    if (typeof text === "string") {
      if (text.length > 0) compressedObj[options.textNodeName] = text;
    } else if (text !== undefined) compressedObj[options.textNodeName] = text;
    return compressedObj;
  }
  function propName$1(obj) {
    const keys = Object.keys(obj);
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      if (key !== ":@") return key;
    }
  }
  function assignAttributes(obj, attrMap, jpath, options) {
    if (attrMap) {
      const keys = Object.keys(attrMap);
      const len = keys.length; //don't make it inline
      for (let i = 0; i < len; i++) {
        const atrrName = keys[i];
        if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
          obj[atrrName] = [attrMap[atrrName]];
        } else {
          obj[atrrName] = attrMap[atrrName];
        }
      }
    }
  }
  function isLeafTag(obj, options) {
    const {
      textNodeName
    } = options;
    const propCount = Object.keys(obj).length;
    if (propCount === 0) {
      return true;
    }
    if (propCount === 1 && (obj[textNodeName] || typeof obj[textNodeName] === "boolean" || obj[textNodeName] === 0)) {
      return true;
    }
    return false;
  }
  node2json.prettify = prettify$1;

  const {
    buildOptions
  } = OptionsBuilder;
  const OrderedObjParser = OrderedObjParser_1;
  const {
    prettify
  } = node2json;
  const validator$1 = validator$2;
  let XMLParser$1 = class XMLParser {
    constructor(options) {
      this.externalEntities = {};
      this.options = buildOptions(options);
    }
    /**
     * Parse XML dats to JS object 
     * @param {string|Buffer} xmlData 
     * @param {boolean|Object} validationOption 
     */
    parse(xmlData, validationOption) {
      if (typeof xmlData === "string") ; else if (xmlData.toString) {
        xmlData = xmlData.toString();
      } else {
        throw new Error("XML data is accepted in String or Bytes[] form.");
      }
      if (validationOption) {
        if (validationOption === true) validationOption = {}; //validate with default options

        const result = validator$1.validate(xmlData, validationOption);
        if (result !== true) {
          throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
        }
      }
      const orderedObjParser = new OrderedObjParser(this.options);
      orderedObjParser.addExternalEntities(this.externalEntities);
      const orderedResult = orderedObjParser.parseXml(xmlData);
      if (this.options.preserveOrder || orderedResult === undefined) return orderedResult;else return prettify(orderedResult, this.options);
    }

    /**
     * Add Entity which is not by default supported by this library
     * @param {string} key 
     * @param {string} value 
     */
    addEntity(key, value) {
      if (value.indexOf("&") !== -1) {
        throw new Error("Entity value can't have '&'");
      } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
        throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
      } else if (value === "&") {
        throw new Error("An entity with value '&' is not permitted");
      } else {
        this.externalEntities[key] = value;
      }
    }
  };
  var XMLParser_1 = XMLParser$1;

  const EOL = "\n";

  /**
   * 
   * @param {array} jArray 
   * @param {any} options 
   * @returns 
   */
  function toXml(jArray, options) {
    let indentation = "";
    if (options.format && options.indentBy.length > 0) {
      indentation = EOL;
    }
    return arrToStr(jArray, options, "", indentation);
  }
  function arrToStr(arr, options, jPath, indentation) {
    let xmlStr = "";
    let isPreviousElementTag = false;
    for (let i = 0; i < arr.length; i++) {
      const tagObj = arr[i];
      const tagName = propName(tagObj);
      let newJPath = "";
      if (jPath.length === 0) newJPath = tagName;else newJPath = `${jPath}.${tagName}`;
      if (tagName === options.textNodeName) {
        let tagText = tagObj[tagName];
        if (!isStopNode(newJPath, options)) {
          tagText = options.tagValueProcessor(tagName, tagText);
          tagText = replaceEntitiesValue(tagText, options);
        }
        if (isPreviousElementTag) {
          xmlStr += indentation;
        }
        xmlStr += tagText;
        isPreviousElementTag = false;
        continue;
      } else if (tagName === options.cdataPropName) {
        if (isPreviousElementTag) {
          xmlStr += indentation;
        }
        xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
        isPreviousElementTag = false;
        continue;
      } else if (tagName === options.commentPropName) {
        xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
        isPreviousElementTag = true;
        continue;
      } else if (tagName[0] === "?") {
        const attStr = attr_to_str(tagObj[":@"], options);
        const tempInd = tagName === "?xml" ? "" : indentation;
        let piTextNodeName = tagObj[tagName][0][options.textNodeName];
        piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : ""; //remove extra spacing
        xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;
        isPreviousElementTag = true;
        continue;
      }
      let newIdentation = indentation;
      if (newIdentation !== "") {
        newIdentation += options.indentBy;
      }
      const attStr = attr_to_str(tagObj[":@"], options);
      const tagStart = indentation + `<${tagName}${attStr}`;
      const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);
      if (options.unpairedTags.indexOf(tagName) !== -1) {
        if (options.suppressUnpairedNode) xmlStr += tagStart + ">";else xmlStr += tagStart + "/>";
      } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {
        xmlStr += tagStart + "/>";
      } else if (tagValue && tagValue.endsWith(">")) {
        xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
      } else {
        xmlStr += tagStart + ">";
        if (tagValue && indentation !== "" && (tagValue.includes("/>") || tagValue.includes("</"))) {
          xmlStr += indentation + options.indentBy + tagValue + indentation;
        } else {
          xmlStr += tagValue;
        }
        xmlStr += `</${tagName}>`;
      }
      isPreviousElementTag = true;
    }
    return xmlStr;
  }
  function propName(obj) {
    const keys = Object.keys(obj);
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      if (key !== ":@") return key;
    }
  }
  function attr_to_str(attrMap, options) {
    let attrStr = "";
    if (attrMap && !options.ignoreAttributes) {
      for (let attr in attrMap) {
        let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
        attrVal = replaceEntitiesValue(attrVal, options);
        if (attrVal === true && options.suppressBooleanAttributes) {
          attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
        } else {
          attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
        }
      }
    }
    return attrStr;
  }
  function isStopNode(jPath, options) {
    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
    let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
    for (let index in options.stopNodes) {
      if (options.stopNodes[index] === jPath || options.stopNodes[index] === "*." + tagName) return true;
    }
    return false;
  }
  function replaceEntitiesValue(textValue, options) {
    if (textValue && textValue.length > 0 && options.processEntities) {
      for (let i = 0; i < options.entities.length; i++) {
        const entity = options.entities[i];
        textValue = textValue.replace(entity.regex, entity.val);
      }
    }
    return textValue;
  }
  var orderedJs2Xml = toXml;

  //parse Empty Node as self closing node
  const buildFromOrderedJs = orderedJs2Xml;
  const defaultOptions = {
    attributeNamePrefix: '@_',
    attributesGroupName: false,
    textNodeName: '#text',
    ignoreAttributes: true,
    cdataPropName: false,
    format: false,
    indentBy: '  ',
    suppressEmptyNode: false,
    suppressUnpairedNode: true,
    suppressBooleanAttributes: true,
    tagValueProcessor: function (key, a) {
      return a;
    },
    attributeValueProcessor: function (attrName, a) {
      return a;
    },
    preserveOrder: false,
    commentPropName: false,
    unpairedTags: [],
    entities: [{
      regex: new RegExp("&", "g"),
      val: "&amp;"
    },
    //it must be on top
    {
      regex: new RegExp(">", "g"),
      val: "&gt;"
    }, {
      regex: new RegExp("<", "g"),
      val: "&lt;"
    }, {
      regex: new RegExp("\'", "g"),
      val: "&apos;"
    }, {
      regex: new RegExp("\"", "g"),
      val: "&quot;"
    }],
    processEntities: true,
    stopNodes: [],
    // transformTagName: false,
    // transformAttributeName: false,
    oneListGroup: false
  };
  function Builder(options) {
    this.options = Object.assign({}, defaultOptions, options);
    if (this.options.ignoreAttributes || this.options.attributesGroupName) {
      this.isAttribute = function /*a*/
      () {
        return false;
      };
    } else {
      this.attrPrefixLen = this.options.attributeNamePrefix.length;
      this.isAttribute = isAttribute;
    }
    this.processTextOrObjNode = processTextOrObjNode;
    if (this.options.format) {
      this.indentate = indentate;
      this.tagEndChar = '>\n';
      this.newLine = '\n';
    } else {
      this.indentate = function () {
        return '';
      };
      this.tagEndChar = '>';
      this.newLine = '';
    }
  }
  Builder.prototype.build = function (jObj) {
    if (this.options.preserveOrder) {
      return buildFromOrderedJs(jObj, this.options);
    } else {
      if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {
        jObj = {
          [this.options.arrayNodeName]: jObj
        };
      }
      return this.j2x(jObj, 0).val;
    }
  };
  Builder.prototype.j2x = function (jObj, level) {
    let attrStr = '';
    let val = '';
    for (let key in jObj) {
      if (typeof jObj[key] === 'undefined') ; else if (jObj[key] === null) {
        if (key[0] === "?") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;
        // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;
      } else if (jObj[key] instanceof Date) {
        val += this.buildTextValNode(jObj[key], key, '', level);
      } else if (typeof jObj[key] !== 'object') {
        //premitive type
        const attr = this.isAttribute(key);
        if (attr) {
          attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);
        } else {
          //tag value
          if (key === this.options.textNodeName) {
            let newval = this.options.tagValueProcessor(key, '' + jObj[key]);
            val += this.replaceEntitiesValue(newval);
          } else {
            val += this.buildTextValNode(jObj[key], key, '', level);
          }
        }
      } else if (Array.isArray(jObj[key])) {
        //repeated nodes
        const arrLen = jObj[key].length;
        let listTagVal = "";
        for (let j = 0; j < arrLen; j++) {
          const item = jObj[key][j];
          if (typeof item === 'undefined') ; else if (item === null) {
            if (key[0] === "?") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;
            // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;
          } else if (typeof item === 'object') {
            if (this.options.oneListGroup) {
              listTagVal += this.j2x(item, level + 1).val;
            } else {
              listTagVal += this.processTextOrObjNode(item, key, level);
            }
          } else {
            listTagVal += this.buildTextValNode(item, key, '', level);
          }
        }
        if (this.options.oneListGroup) {
          listTagVal = this.buildObjectNode(listTagVal, key, '', level);
        }
        val += listTagVal;
      } else {
        //nested node
        if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
          const Ks = Object.keys(jObj[key]);
          const L = Ks.length;
          for (let j = 0; j < L; j++) {
            attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);
          }
        } else {
          val += this.processTextOrObjNode(jObj[key], key, level);
        }
      }
    }
    return {
      attrStr: attrStr,
      val: val
    };
  };
  Builder.prototype.buildAttrPairStr = function (attrName, val) {
    val = this.options.attributeValueProcessor(attrName, '' + val);
    val = this.replaceEntitiesValue(val);
    if (this.options.suppressBooleanAttributes && val === "true") {
      return ' ' + attrName;
    } else return ' ' + attrName + '="' + val + '"';
  };
  function processTextOrObjNode(object, key, level) {
    const result = this.j2x(object, level + 1);
    if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {
      return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);
    } else {
      return this.buildObjectNode(result.val, key, result.attrStr, level);
    }
  }
  Builder.prototype.buildObjectNode = function (val, key, attrStr, level) {
    if (val === "") {
      if (key[0] === "?") return this.indentate(level) + '<' + key + attrStr + '?' + this.tagEndChar;else {
        return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;
      }
    } else {
      let tagEndExp = '</' + key + this.tagEndChar;
      let piClosingChar = "";
      if (key[0] === "?") {
        piClosingChar = "?";
        tagEndExp = "";
      }
      if (attrStr && val.indexOf('<') === -1) {
        return this.indentate(level) + '<' + key + attrStr + piClosingChar + '>' + val + tagEndExp;
      } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {
        return this.indentate(level) + `<!--${val}-->` + this.newLine;
      } else {
        return this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar + val + this.indentate(level) + tagEndExp;
      }
    }
  };
  Builder.prototype.closeTag = function (key) {
    let closeTag = "";
    if (this.options.unpairedTags.indexOf(key) !== -1) {
      //unpaired
      if (!this.options.suppressUnpairedNode) closeTag = "/";
    } else if (this.options.suppressEmptyNode) {
      //empty
      closeTag = "/";
    } else {
      closeTag = `></${key}`;
    }
    return closeTag;
  };

  Builder.prototype.buildTextValNode = function (val, key, attrStr, level) {
    if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {
      return this.indentate(level) + `<![CDATA[${val}]]>` + this.newLine;
    } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {
      return this.indentate(level) + `<!--${val}-->` + this.newLine;
    } else if (key[0] === "?") {
      //PI tag
      return this.indentate(level) + '<' + key + attrStr + '?' + this.tagEndChar;
    } else {
      let textValue = this.options.tagValueProcessor(key, val);
      textValue = this.replaceEntitiesValue(textValue);
      if (textValue === '') {
        return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;
      } else {
        return this.indentate(level) + '<' + key + attrStr + '>' + textValue + '</' + key + this.tagEndChar;
      }
    }
  };
  Builder.prototype.replaceEntitiesValue = function (textValue) {
    if (textValue && textValue.length > 0 && this.options.processEntities) {
      for (let i = 0; i < this.options.entities.length; i++) {
        const entity = this.options.entities[i];
        textValue = textValue.replace(entity.regex, entity.val);
      }
    }
    return textValue;
  };
  function indentate(level) {
    return this.options.indentBy.repeat(level);
  }
  function isAttribute(name /*, options*/) {
    if (name.startsWith(this.options.attributeNamePrefix)) {
      return name.substr(this.attrPrefixLen);
    } else {
      return false;
    }
  }
  var json2xml = Builder;

  const validator = validator$2;
  const XMLParser = XMLParser_1;
  const XMLBuilder = json2xml;
  var fxp = {
    XMLParser: XMLParser,
    XMLValidator: validator,
    XMLBuilder: XMLBuilder
  };

  class S3ServiceException extends ServiceException {
    constructor(options) {
      super(options);
      Object.setPrototypeOf(this, S3ServiceException.prototype);
    }
  }

  class NoSuchUpload extends S3ServiceException {
    constructor(opts) {
      super({
        name: "NoSuchUpload",
        $fault: "client",
        ...opts
      });
      this.name = "NoSuchUpload";
      this.$fault = "client";
      Object.setPrototypeOf(this, NoSuchUpload.prototype);
    }
  }
  class ObjectNotInActiveTierError extends S3ServiceException {
    constructor(opts) {
      super({
        name: "ObjectNotInActiveTierError",
        $fault: "client",
        ...opts
      });
      this.name = "ObjectNotInActiveTierError";
      this.$fault = "client";
      Object.setPrototypeOf(this, ObjectNotInActiveTierError.prototype);
    }
  }
  class BucketAlreadyExists extends S3ServiceException {
    constructor(opts) {
      super({
        name: "BucketAlreadyExists",
        $fault: "client",
        ...opts
      });
      this.name = "BucketAlreadyExists";
      this.$fault = "client";
      Object.setPrototypeOf(this, BucketAlreadyExists.prototype);
    }
  }
  class BucketAlreadyOwnedByYou extends S3ServiceException {
    constructor(opts) {
      super({
        name: "BucketAlreadyOwnedByYou",
        $fault: "client",
        ...opts
      });
      this.name = "BucketAlreadyOwnedByYou";
      this.$fault = "client";
      Object.setPrototypeOf(this, BucketAlreadyOwnedByYou.prototype);
    }
  }
  var AnalyticsFilter;
  (function (AnalyticsFilter) {
    AnalyticsFilter.visit = (value, visitor) => {
      if (value.Prefix !== undefined) return visitor.Prefix(value.Prefix);
      if (value.Tag !== undefined) return visitor.Tag(value.Tag);
      if (value.And !== undefined) return visitor.And(value.And);
      return visitor._(value.$unknown[0], value.$unknown[1]);
    };
  })(AnalyticsFilter || (AnalyticsFilter = {}));
  var LifecycleRuleFilter;
  (function (LifecycleRuleFilter) {
    LifecycleRuleFilter.visit = (value, visitor) => {
      if (value.Prefix !== undefined) return visitor.Prefix(value.Prefix);
      if (value.Tag !== undefined) return visitor.Tag(value.Tag);
      if (value.ObjectSizeGreaterThan !== undefined) return visitor.ObjectSizeGreaterThan(value.ObjectSizeGreaterThan);
      if (value.ObjectSizeLessThan !== undefined) return visitor.ObjectSizeLessThan(value.ObjectSizeLessThan);
      if (value.And !== undefined) return visitor.And(value.And);
      return visitor._(value.$unknown[0], value.$unknown[1]);
    };
  })(LifecycleRuleFilter || (LifecycleRuleFilter = {}));
  var MetricsFilter;
  (function (MetricsFilter) {
    MetricsFilter.visit = (value, visitor) => {
      if (value.Prefix !== undefined) return visitor.Prefix(value.Prefix);
      if (value.Tag !== undefined) return visitor.Tag(value.Tag);
      if (value.AccessPointArn !== undefined) return visitor.AccessPointArn(value.AccessPointArn);
      if (value.And !== undefined) return visitor.And(value.And);
      return visitor._(value.$unknown[0], value.$unknown[1]);
    };
  })(MetricsFilter || (MetricsFilter = {}));
  var ReplicationRuleFilter;
  (function (ReplicationRuleFilter) {
    ReplicationRuleFilter.visit = (value, visitor) => {
      if (value.Prefix !== undefined) return visitor.Prefix(value.Prefix);
      if (value.Tag !== undefined) return visitor.Tag(value.Tag);
      if (value.And !== undefined) return visitor.And(value.And);
      return visitor._(value.$unknown[0], value.$unknown[1]);
    };
  })(ReplicationRuleFilter || (ReplicationRuleFilter = {}));
  class InvalidObjectState extends S3ServiceException {
    constructor(opts) {
      super({
        name: "InvalidObjectState",
        $fault: "client",
        ...opts
      });
      this.name = "InvalidObjectState";
      this.$fault = "client";
      Object.setPrototypeOf(this, InvalidObjectState.prototype);
      this.StorageClass = opts.StorageClass;
      this.AccessTier = opts.AccessTier;
    }
  }
  class NoSuchKey extends S3ServiceException {
    constructor(opts) {
      super({
        name: "NoSuchKey",
        $fault: "client",
        ...opts
      });
      this.name = "NoSuchKey";
      this.$fault = "client";
      Object.setPrototypeOf(this, NoSuchKey.prototype);
    }
  }
  class NotFound extends S3ServiceException {
    constructor(opts) {
      super({
        name: "NotFound",
        $fault: "client",
        ...opts
      });
      this.name = "NotFound";
      this.$fault = "client";
      Object.setPrototypeOf(this, NotFound.prototype);
    }
  }
  class NoSuchBucket extends S3ServiceException {
    constructor(opts) {
      super({
        name: "NoSuchBucket",
        $fault: "client",
        ...opts
      });
      this.name = "NoSuchBucket";
      this.$fault = "client";
      Object.setPrototypeOf(this, NoSuchBucket.prototype);
    }
  }
  const CompleteMultipartUploadOutputFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.SSEKMSKeyId && {
      SSEKMSKeyId: SENSITIVE_STRING
    })
  });
  const CompleteMultipartUploadRequestFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.SSECustomerKey && {
      SSECustomerKey: SENSITIVE_STRING
    })
  });
  const CopyObjectOutputFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.SSEKMSKeyId && {
      SSEKMSKeyId: SENSITIVE_STRING
    }),
    ...(obj.SSEKMSEncryptionContext && {
      SSEKMSEncryptionContext: SENSITIVE_STRING
    })
  });
  const CopyObjectRequestFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.SSECustomerKey && {
      SSECustomerKey: SENSITIVE_STRING
    }),
    ...(obj.SSEKMSKeyId && {
      SSEKMSKeyId: SENSITIVE_STRING
    }),
    ...(obj.SSEKMSEncryptionContext && {
      SSEKMSEncryptionContext: SENSITIVE_STRING
    }),
    ...(obj.CopySourceSSECustomerKey && {
      CopySourceSSECustomerKey: SENSITIVE_STRING
    })
  });
  const CreateMultipartUploadOutputFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.SSEKMSKeyId && {
      SSEKMSKeyId: SENSITIVE_STRING
    }),
    ...(obj.SSEKMSEncryptionContext && {
      SSEKMSEncryptionContext: SENSITIVE_STRING
    })
  });
  const CreateMultipartUploadRequestFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.SSECustomerKey && {
      SSECustomerKey: SENSITIVE_STRING
    }),
    ...(obj.SSEKMSKeyId && {
      SSEKMSKeyId: SENSITIVE_STRING
    }),
    ...(obj.SSEKMSEncryptionContext && {
      SSEKMSEncryptionContext: SENSITIVE_STRING
    })
  });
  const ServerSideEncryptionByDefaultFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.KMSMasterKeyID && {
      KMSMasterKeyID: SENSITIVE_STRING
    })
  });
  const ServerSideEncryptionRuleFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.ApplyServerSideEncryptionByDefault && {
      ApplyServerSideEncryptionByDefault: ServerSideEncryptionByDefaultFilterSensitiveLog(obj.ApplyServerSideEncryptionByDefault)
    })
  });
  const ServerSideEncryptionConfigurationFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.Rules && {
      Rules: obj.Rules.map(item => ServerSideEncryptionRuleFilterSensitiveLog(item))
    })
  });
  const GetBucketEncryptionOutputFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.ServerSideEncryptionConfiguration && {
      ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(obj.ServerSideEncryptionConfiguration)
    })
  });
  const SSEKMSFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.KeyId && {
      KeyId: SENSITIVE_STRING
    })
  });
  const InventoryEncryptionFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.SSEKMS && {
      SSEKMS: SSEKMSFilterSensitiveLog(obj.SSEKMS)
    })
  });
  const InventoryS3BucketDestinationFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.Encryption && {
      Encryption: InventoryEncryptionFilterSensitiveLog(obj.Encryption)
    })
  });
  const InventoryDestinationFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.S3BucketDestination && {
      S3BucketDestination: InventoryS3BucketDestinationFilterSensitiveLog(obj.S3BucketDestination)
    })
  });
  const InventoryConfigurationFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.Destination && {
      Destination: InventoryDestinationFilterSensitiveLog(obj.Destination)
    })
  });
  const GetBucketInventoryConfigurationOutputFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.InventoryConfiguration && {
      InventoryConfiguration: InventoryConfigurationFilterSensitiveLog(obj.InventoryConfiguration)
    })
  });
  const GetObjectOutputFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.SSEKMSKeyId && {
      SSEKMSKeyId: SENSITIVE_STRING
    })
  });
  const GetObjectRequestFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.SSECustomerKey && {
      SSECustomerKey: SENSITIVE_STRING
    })
  });
  const GetObjectAttributesRequestFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.SSECustomerKey && {
      SSECustomerKey: SENSITIVE_STRING
    })
  });
  const GetObjectTorrentOutputFilterSensitiveLog = obj => ({
    ...obj
  });
  const HeadObjectOutputFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.SSEKMSKeyId && {
      SSEKMSKeyId: SENSITIVE_STRING
    })
  });
  const HeadObjectRequestFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.SSECustomerKey && {
      SSECustomerKey: SENSITIVE_STRING
    })
  });
  const ListBucketInventoryConfigurationsOutputFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.InventoryConfigurationList && {
      InventoryConfigurationList: obj.InventoryConfigurationList.map(item => InventoryConfigurationFilterSensitiveLog(item))
    })
  });
  const ListPartsRequestFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.SSECustomerKey && {
      SSECustomerKey: SENSITIVE_STRING
    })
  });
  const PutBucketEncryptionRequestFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.ServerSideEncryptionConfiguration && {
      ServerSideEncryptionConfiguration: ServerSideEncryptionConfigurationFilterSensitiveLog(obj.ServerSideEncryptionConfiguration)
    })
  });
  const PutBucketInventoryConfigurationRequestFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.InventoryConfiguration && {
      InventoryConfiguration: InventoryConfigurationFilterSensitiveLog(obj.InventoryConfiguration)
    })
  });
  const PutObjectOutputFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.SSEKMSKeyId && {
      SSEKMSKeyId: SENSITIVE_STRING
    }),
    ...(obj.SSEKMSEncryptionContext && {
      SSEKMSEncryptionContext: SENSITIVE_STRING
    })
  });
  const PutObjectRequestFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.SSECustomerKey && {
      SSECustomerKey: SENSITIVE_STRING
    }),
    ...(obj.SSEKMSKeyId && {
      SSEKMSKeyId: SENSITIVE_STRING
    }),
    ...(obj.SSEKMSEncryptionContext && {
      SSEKMSEncryptionContext: SENSITIVE_STRING
    })
  });

  class ObjectAlreadyInActiveTierError extends S3ServiceException {
    constructor(opts) {
      super({
        name: "ObjectAlreadyInActiveTierError",
        $fault: "client",
        ...opts
      });
      this.name = "ObjectAlreadyInActiveTierError";
      this.$fault = "client";
      Object.setPrototypeOf(this, ObjectAlreadyInActiveTierError.prototype);
    }
  }
  var SelectObjectContentEventStream;
  (function (SelectObjectContentEventStream) {
    SelectObjectContentEventStream.visit = (value, visitor) => {
      if (value.Records !== undefined) return visitor.Records(value.Records);
      if (value.Stats !== undefined) return visitor.Stats(value.Stats);
      if (value.Progress !== undefined) return visitor.Progress(value.Progress);
      if (value.Cont !== undefined) return visitor.Cont(value.Cont);
      if (value.End !== undefined) return visitor.End(value.End);
      return visitor._(value.$unknown[0], value.$unknown[1]);
    };
  })(SelectObjectContentEventStream || (SelectObjectContentEventStream = {}));
  const EncryptionFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.KMSKeyId && {
      KMSKeyId: SENSITIVE_STRING
    })
  });
  const S3LocationFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.Encryption && {
      Encryption: EncryptionFilterSensitiveLog(obj.Encryption)
    })
  });
  const OutputLocationFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.S3 && {
      S3: S3LocationFilterSensitiveLog(obj.S3)
    })
  });
  const RestoreRequestFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.OutputLocation && {
      OutputLocation: OutputLocationFilterSensitiveLog(obj.OutputLocation)
    })
  });
  const RestoreObjectRequestFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.RestoreRequest && {
      RestoreRequest: RestoreRequestFilterSensitiveLog(obj.RestoreRequest)
    })
  });
  const SelectObjectContentOutputFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.Payload && {
      Payload: "STREAMING_CONTENT"
    })
  });
  const SelectObjectContentRequestFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.SSECustomerKey && {
      SSECustomerKey: SENSITIVE_STRING
    })
  });
  const UploadPartOutputFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.SSEKMSKeyId && {
      SSEKMSKeyId: SENSITIVE_STRING
    })
  });
  const UploadPartRequestFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.SSECustomerKey && {
      SSECustomerKey: SENSITIVE_STRING
    })
  });
  const UploadPartCopyOutputFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.SSEKMSKeyId && {
      SSEKMSKeyId: SENSITIVE_STRING
    })
  });
  const UploadPartCopyRequestFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.SSECustomerKey && {
      SSECustomerKey: SENSITIVE_STRING
    }),
    ...(obj.CopySourceSSECustomerKey && {
      CopySourceSSECustomerKey: SENSITIVE_STRING
    })
  });
  const WriteGetObjectResponseRequestFilterSensitiveLog = obj => ({
    ...obj,
    ...(obj.SSEKMSKeyId && {
      SSEKMSKeyId: SENSITIVE_STRING
    })
  });

  const se_AbortMultipartUploadCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      "x-id": [, "AbortMultipartUpload"],
      uploadId: [, expectNonNull(input.UploadId, `UploadId`)]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_CompleteMultipartUploadCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "x-amz-checksum-crc32": input.ChecksumCRC32,
      "x-amz-checksum-crc32c": input.ChecksumCRC32C,
      "x-amz-checksum-sha1": input.ChecksumSHA1,
      "x-amz-checksum-sha256": input.ChecksumSHA256,
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
      "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
      "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
      "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      "x-id": [, "CompleteMultipartUpload"],
      uploadId: [, expectNonNull(input.UploadId, `UploadId`)]
    });
    let body;
    if (input.MultipartUpload !== undefined) {
      body = se_CompletedMultipartUpload(input.MultipartUpload);
    }
    let contents;
    if (input.MultipartUpload !== undefined) {
      contents = se_CompletedMultipartUpload(input.MultipartUpload);
      contents = contents.withName("CompleteMultipartUpload");
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "POST",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_CopyObjectCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-acl": input.ACL,
      "cache-control": input.CacheControl,
      "x-amz-checksum-algorithm": input.ChecksumAlgorithm,
      "content-disposition": input.ContentDisposition,
      "content-encoding": input.ContentEncoding,
      "content-language": input.ContentLanguage,
      "content-type": input.ContentType,
      "x-amz-copy-source": input.CopySource,
      "x-amz-copy-source-if-match": input.CopySourceIfMatch,
      "x-amz-copy-source-if-modified-since": [() => isSerializableHeaderValue(input.CopySourceIfModifiedSince), () => dateToUtcString(input.CopySourceIfModifiedSince).toString()],
      "x-amz-copy-source-if-none-match": input.CopySourceIfNoneMatch,
      "x-amz-copy-source-if-unmodified-since": [() => isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince), () => dateToUtcString(input.CopySourceIfUnmodifiedSince).toString()],
      expires: [() => isSerializableHeaderValue(input.Expires), () => dateToUtcString(input.Expires).toString()],
      "x-amz-grant-full-control": input.GrantFullControl,
      "x-amz-grant-read": input.GrantRead,
      "x-amz-grant-read-acp": input.GrantReadACP,
      "x-amz-grant-write-acp": input.GrantWriteACP,
      "x-amz-metadata-directive": input.MetadataDirective,
      "x-amz-tagging-directive": input.TaggingDirective,
      "x-amz-server-side-encryption": input.ServerSideEncryption,
      "x-amz-storage-class": input.StorageClass,
      "x-amz-website-redirect-location": input.WebsiteRedirectLocation,
      "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
      "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
      "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
      "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
      "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext,
      "x-amz-server-side-encryption-bucket-key-enabled": [() => isSerializableHeaderValue(input.BucketKeyEnabled), () => input.BucketKeyEnabled.toString()],
      "x-amz-copy-source-server-side-encryption-customer-algorithm": input.CopySourceSSECustomerAlgorithm,
      "x-amz-copy-source-server-side-encryption-customer-key": input.CopySourceSSECustomerKey,
      "x-amz-copy-source-server-side-encryption-customer-key-md5": input.CopySourceSSECustomerKeyMD5,
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-tagging": input.Tagging,
      "x-amz-object-lock-mode": input.ObjectLockMode,
      "x-amz-object-lock-retain-until-date": [() => isSerializableHeaderValue(input.ObjectLockRetainUntilDate), () => (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()],
      "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
      "x-amz-source-expected-bucket-owner": input.ExpectedSourceBucketOwner,
      ...(input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix) => {
        acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
        return acc;
      }, {}))
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      "x-id": [, "CopyObject"]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_CreateBucketCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "x-amz-acl": input.ACL,
      "x-amz-grant-full-control": input.GrantFullControl,
      "x-amz-grant-read": input.GrantRead,
      "x-amz-grant-read-acp": input.GrantReadACP,
      "x-amz-grant-write": input.GrantWrite,
      "x-amz-grant-write-acp": input.GrantWriteACP,
      "x-amz-bucket-object-lock-enabled": [() => isSerializableHeaderValue(input.ObjectLockEnabledForBucket), () => input.ObjectLockEnabledForBucket.toString()],
      "x-amz-object-ownership": input.ObjectOwnership
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    let body;
    if (input.CreateBucketConfiguration !== undefined) {
      body = se_CreateBucketConfiguration(input.CreateBucketConfiguration);
    }
    let contents;
    if (input.CreateBucketConfiguration !== undefined) {
      contents = se_CreateBucketConfiguration(input.CreateBucketConfiguration);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      body
    });
  };
  const se_CreateMultipartUploadCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-acl": input.ACL,
      "cache-control": input.CacheControl,
      "content-disposition": input.ContentDisposition,
      "content-encoding": input.ContentEncoding,
      "content-language": input.ContentLanguage,
      "content-type": input.ContentType,
      expires: [() => isSerializableHeaderValue(input.Expires), () => dateToUtcString(input.Expires).toString()],
      "x-amz-grant-full-control": input.GrantFullControl,
      "x-amz-grant-read": input.GrantRead,
      "x-amz-grant-read-acp": input.GrantReadACP,
      "x-amz-grant-write-acp": input.GrantWriteACP,
      "x-amz-server-side-encryption": input.ServerSideEncryption,
      "x-amz-storage-class": input.StorageClass,
      "x-amz-website-redirect-location": input.WebsiteRedirectLocation,
      "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
      "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
      "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
      "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
      "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext,
      "x-amz-server-side-encryption-bucket-key-enabled": [() => isSerializableHeaderValue(input.BucketKeyEnabled), () => input.BucketKeyEnabled.toString()],
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-tagging": input.Tagging,
      "x-amz-object-lock-mode": input.ObjectLockMode,
      "x-amz-object-lock-retain-until-date": [() => isSerializableHeaderValue(input.ObjectLockRetainUntilDate), () => (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()],
      "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
      "x-amz-checksum-algorithm": input.ChecksumAlgorithm,
      ...(input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix) => {
        acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
        return acc;
      }, {}))
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      uploads: [, ""],
      "x-id": [, "CreateMultipartUpload"]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "POST",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_DeleteBucketCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath$1,
      body
    });
  };
  const se_DeleteBucketAnalyticsConfigurationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      analytics: [, ""],
      id: [, expectNonNull(input.Id, `Id`)]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_DeleteBucketCorsCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      cors: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_DeleteBucketEncryptionCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      encryption: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_DeleteBucketIntelligentTieringConfigurationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = {};
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      "intelligent-tiering": [, ""],
      id: [, expectNonNull(input.Id, `Id`)]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_DeleteBucketInventoryConfigurationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      inventory: [, ""],
      id: [, expectNonNull(input.Id, `Id`)]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_DeleteBucketLifecycleCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      lifecycle: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_DeleteBucketMetricsConfigurationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      metrics: [, ""],
      id: [, expectNonNull(input.Id, `Id`)]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_DeleteBucketOwnershipControlsCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      ownershipControls: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_DeleteBucketPolicyCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      policy: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_DeleteBucketReplicationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      replication: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_DeleteBucketTaggingCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      tagging: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_DeleteBucketWebsiteCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      website: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_DeleteObjectCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-mfa": input.MFA,
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-bypass-governance-retention": [() => isSerializableHeaderValue(input.BypassGovernanceRetention), () => input.BypassGovernanceRetention.toString()],
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      "x-id": [, "DeleteObject"],
      versionId: [, input.VersionId]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_DeleteObjectsCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "x-amz-mfa": input.MFA,
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-bypass-governance-retention": [() => isSerializableHeaderValue(input.BypassGovernanceRetention), () => input.BypassGovernanceRetention.toString()],
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
      "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      delete: [, ""],
      "x-id": [, "DeleteObjects"]
    });
    let body;
    if (input.Delete !== undefined) {
      body = se_Delete(input.Delete);
    }
    let contents;
    if (input.Delete !== undefined) {
      contents = se_Delete(input.Delete);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "POST",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_DeleteObjectTaggingCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      tagging: [, ""],
      versionId: [, input.VersionId]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_DeletePublicAccessBlockCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      publicAccessBlock: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "DELETE",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetBucketAccelerateConfigurationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
      "x-amz-request-payer": input.RequestPayer
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      accelerate: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetBucketAclCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      acl: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetBucketAnalyticsConfigurationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      analytics: [, ""],
      "x-id": [, "GetBucketAnalyticsConfiguration"],
      id: [, expectNonNull(input.Id, `Id`)]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetBucketCorsCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      cors: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetBucketEncryptionCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      encryption: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetBucketIntelligentTieringConfigurationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = {};
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      "intelligent-tiering": [, ""],
      "x-id": [, "GetBucketIntelligentTieringConfiguration"],
      id: [, expectNonNull(input.Id, `Id`)]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetBucketInventoryConfigurationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      inventory: [, ""],
      "x-id": [, "GetBucketInventoryConfiguration"],
      id: [, expectNonNull(input.Id, `Id`)]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetBucketLifecycleConfigurationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      lifecycle: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetBucketLocationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      location: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetBucketLoggingCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      logging: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetBucketMetricsConfigurationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      metrics: [, ""],
      "x-id": [, "GetBucketMetricsConfiguration"],
      id: [, expectNonNull(input.Id, `Id`)]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetBucketNotificationConfigurationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      notification: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetBucketOwnershipControlsCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      ownershipControls: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetBucketPolicyCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      policy: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetBucketPolicyStatusCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      policyStatus: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetBucketReplicationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      replication: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetBucketRequestPaymentCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      requestPayment: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetBucketTaggingCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      tagging: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetBucketVersioningCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      versioning: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetBucketWebsiteCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      website: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetObjectCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "if-match": input.IfMatch,
      "if-modified-since": [() => isSerializableHeaderValue(input.IfModifiedSince), () => dateToUtcString(input.IfModifiedSince).toString()],
      "if-none-match": input.IfNoneMatch,
      "if-unmodified-since": [() => isSerializableHeaderValue(input.IfUnmodifiedSince), () => dateToUtcString(input.IfUnmodifiedSince).toString()],
      range: input.Range,
      "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
      "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
      "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
      "x-amz-checksum-mode": input.ChecksumMode
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      "x-id": [, "GetObject"],
      "response-cache-control": [, input.ResponseCacheControl],
      "response-content-disposition": [, input.ResponseContentDisposition],
      "response-content-encoding": [, input.ResponseContentEncoding],
      "response-content-language": [, input.ResponseContentLanguage],
      "response-content-type": [, input.ResponseContentType],
      "response-expires": [() => input.ResponseExpires !== void 0, () => dateToUtcString(input.ResponseExpires).toString()],
      versionId: [, input.VersionId],
      partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetObjectAclCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      acl: [, ""],
      versionId: [, input.VersionId]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetObjectAttributesCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-max-parts": [() => isSerializableHeaderValue(input.MaxParts), () => input.MaxParts.toString()],
      "x-amz-part-number-marker": input.PartNumberMarker,
      "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
      "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
      "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
      "x-amz-object-attributes": [() => isSerializableHeaderValue(input.ObjectAttributes), () => (input.ObjectAttributes || []).map(_entry => _entry).join(", ")]
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      attributes: [, ""],
      versionId: [, input.VersionId]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetObjectLegalHoldCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      "legal-hold": [, ""],
      versionId: [, input.VersionId]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetObjectLockConfigurationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      "object-lock": [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetObjectRetentionCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      retention: [, ""],
      versionId: [, input.VersionId]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetObjectTaggingCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
      "x-amz-request-payer": input.RequestPayer
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      tagging: [, ""],
      versionId: [, input.VersionId]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetObjectTorrentCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      torrent: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_GetPublicAccessBlockCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      publicAccessBlock: [, ""]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_HeadBucketCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "HEAD",
      headers,
      path: resolvedPath$1,
      body
    });
  };
  const se_HeadObjectCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "if-match": input.IfMatch,
      "if-modified-since": [() => isSerializableHeaderValue(input.IfModifiedSince), () => dateToUtcString(input.IfModifiedSince).toString()],
      "if-none-match": input.IfNoneMatch,
      "if-unmodified-since": [() => isSerializableHeaderValue(input.IfUnmodifiedSince), () => dateToUtcString(input.IfUnmodifiedSince).toString()],
      range: input.Range,
      "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
      "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
      "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
      "x-amz-checksum-mode": input.ChecksumMode
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      versionId: [, input.VersionId],
      partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "HEAD",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_ListBucketAnalyticsConfigurationsCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      analytics: [, ""],
      "x-id": [, "ListBucketAnalyticsConfigurations"],
      "continuation-token": [, input.ContinuationToken]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_ListBucketIntelligentTieringConfigurationsCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = {};
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      "intelligent-tiering": [, ""],
      "x-id": [, "ListBucketIntelligentTieringConfigurations"],
      "continuation-token": [, input.ContinuationToken]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_ListBucketInventoryConfigurationsCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      inventory: [, ""],
      "x-id": [, "ListBucketInventoryConfigurations"],
      "continuation-token": [, input.ContinuationToken]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_ListBucketMetricsConfigurationsCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      metrics: [, ""],
      "x-id": [, "ListBucketMetricsConfigurations"],
      "continuation-token": [, input.ContinuationToken]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_ListBucketsCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = {
      "content-type": "application/xml"
    };
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    let body;
    body = "";
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath,
      body
    });
  };
  const se_ListMultipartUploadsCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
      "x-amz-request-payer": input.RequestPayer
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      uploads: [, ""],
      delimiter: [, input.Delimiter],
      "encoding-type": [, input.EncodingType],
      "key-marker": [, input.KeyMarker],
      "max-uploads": [() => input.MaxUploads !== void 0, () => input.MaxUploads.toString()],
      prefix: [, input.Prefix],
      "upload-id-marker": [, input.UploadIdMarker]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_ListObjectsCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
      "x-amz-optional-object-attributes": [() => isSerializableHeaderValue(input.OptionalObjectAttributes), () => (input.OptionalObjectAttributes || []).map(_entry => _entry).join(", ")]
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      delimiter: [, input.Delimiter],
      "encoding-type": [, input.EncodingType],
      marker: [, input.Marker],
      "max-keys": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],
      prefix: [, input.Prefix]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_ListObjectsV2Command = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
      "x-amz-optional-object-attributes": [() => isSerializableHeaderValue(input.OptionalObjectAttributes), () => (input.OptionalObjectAttributes || []).map(_entry => _entry).join(", ")]
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      "list-type": [, "2"],
      delimiter: [, input.Delimiter],
      "encoding-type": [, input.EncodingType],
      "max-keys": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],
      prefix: [, input.Prefix],
      "continuation-token": [, input.ContinuationToken],
      "fetch-owner": [() => input.FetchOwner !== void 0, () => input.FetchOwner.toString()],
      "start-after": [, input.StartAfter]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_ListObjectVersionsCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-optional-object-attributes": [() => isSerializableHeaderValue(input.OptionalObjectAttributes), () => (input.OptionalObjectAttributes || []).map(_entry => _entry).join(", ")]
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      versions: [, ""],
      delimiter: [, input.Delimiter],
      "encoding-type": [, input.EncodingType],
      "key-marker": [, input.KeyMarker],
      "max-keys": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],
      prefix: [, input.Prefix],
      "version-id-marker": [, input.VersionIdMarker]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_ListPartsCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
      "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
      "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
      "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      "x-id": [, "ListParts"],
      "max-parts": [() => input.MaxParts !== void 0, () => input.MaxParts.toString()],
      "part-number-marker": [, input.PartNumberMarker],
      uploadId: [, expectNonNull(input.UploadId, `UploadId`)]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "GET",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutBucketAccelerateConfigurationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
      "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      accelerate: [, ""]
    });
    let body;
    if (input.AccelerateConfiguration !== undefined) {
      body = se_AccelerateConfiguration(input.AccelerateConfiguration);
    }
    let contents;
    if (input.AccelerateConfiguration !== undefined) {
      contents = se_AccelerateConfiguration(input.AccelerateConfiguration);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutBucketAclCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "x-amz-acl": input.ACL,
      "content-md5": input.ContentMD5,
      "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
      "x-amz-grant-full-control": input.GrantFullControl,
      "x-amz-grant-read": input.GrantRead,
      "x-amz-grant-read-acp": input.GrantReadACP,
      "x-amz-grant-write": input.GrantWrite,
      "x-amz-grant-write-acp": input.GrantWriteACP,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      acl: [, ""]
    });
    let body;
    if (input.AccessControlPolicy !== undefined) {
      body = se_AccessControlPolicy(input.AccessControlPolicy);
    }
    let contents;
    if (input.AccessControlPolicy !== undefined) {
      contents = se_AccessControlPolicy(input.AccessControlPolicy);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutBucketAnalyticsConfigurationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      analytics: [, ""],
      id: [, expectNonNull(input.Id, `Id`)]
    });
    let body;
    if (input.AnalyticsConfiguration !== undefined) {
      body = se_AnalyticsConfiguration(input.AnalyticsConfiguration);
    }
    let contents;
    if (input.AnalyticsConfiguration !== undefined) {
      contents = se_AnalyticsConfiguration(input.AnalyticsConfiguration);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutBucketCorsCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "content-md5": input.ContentMD5,
      "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      cors: [, ""]
    });
    let body;
    if (input.CORSConfiguration !== undefined) {
      body = se_CORSConfiguration(input.CORSConfiguration);
    }
    let contents;
    if (input.CORSConfiguration !== undefined) {
      contents = se_CORSConfiguration(input.CORSConfiguration);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutBucketEncryptionCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "content-md5": input.ContentMD5,
      "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      encryption: [, ""]
    });
    let body;
    if (input.ServerSideEncryptionConfiguration !== undefined) {
      body = se_ServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration);
    }
    let contents;
    if (input.ServerSideEncryptionConfiguration !== undefined) {
      contents = se_ServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutBucketIntelligentTieringConfigurationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = {
      "content-type": "application/xml"
    };
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      "intelligent-tiering": [, ""],
      id: [, expectNonNull(input.Id, `Id`)]
    });
    let body;
    if (input.IntelligentTieringConfiguration !== undefined) {
      body = se_IntelligentTieringConfiguration(input.IntelligentTieringConfiguration);
    }
    let contents;
    if (input.IntelligentTieringConfiguration !== undefined) {
      contents = se_IntelligentTieringConfiguration(input.IntelligentTieringConfiguration);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutBucketInventoryConfigurationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      inventory: [, ""],
      id: [, expectNonNull(input.Id, `Id`)]
    });
    let body;
    if (input.InventoryConfiguration !== undefined) {
      body = se_InventoryConfiguration(input.InventoryConfiguration);
    }
    let contents;
    if (input.InventoryConfiguration !== undefined) {
      contents = se_InventoryConfiguration(input.InventoryConfiguration);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutBucketLifecycleConfigurationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      lifecycle: [, ""]
    });
    let body;
    if (input.LifecycleConfiguration !== undefined) {
      body = se_BucketLifecycleConfiguration(input.LifecycleConfiguration);
    }
    let contents;
    if (input.LifecycleConfiguration !== undefined) {
      contents = se_BucketLifecycleConfiguration(input.LifecycleConfiguration);
      contents = contents.withName("LifecycleConfiguration");
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutBucketLoggingCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "content-md5": input.ContentMD5,
      "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      logging: [, ""]
    });
    let body;
    if (input.BucketLoggingStatus !== undefined) {
      body = se_BucketLoggingStatus(input.BucketLoggingStatus);
    }
    let contents;
    if (input.BucketLoggingStatus !== undefined) {
      contents = se_BucketLoggingStatus(input.BucketLoggingStatus);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutBucketMetricsConfigurationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      metrics: [, ""],
      id: [, expectNonNull(input.Id, `Id`)]
    });
    let body;
    if (input.MetricsConfiguration !== undefined) {
      body = se_MetricsConfiguration(input.MetricsConfiguration);
    }
    let contents;
    if (input.MetricsConfiguration !== undefined) {
      contents = se_MetricsConfiguration(input.MetricsConfiguration);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutBucketNotificationConfigurationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
      "x-amz-skip-destination-validation": [() => isSerializableHeaderValue(input.SkipDestinationValidation), () => input.SkipDestinationValidation.toString()]
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      notification: [, ""]
    });
    let body;
    if (input.NotificationConfiguration !== undefined) {
      body = se_NotificationConfiguration(input.NotificationConfiguration);
    }
    let contents;
    if (input.NotificationConfiguration !== undefined) {
      contents = se_NotificationConfiguration(input.NotificationConfiguration);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutBucketOwnershipControlsCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "content-md5": input.ContentMD5,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      ownershipControls: [, ""]
    });
    let body;
    if (input.OwnershipControls !== undefined) {
      body = se_OwnershipControls(input.OwnershipControls);
    }
    let contents;
    if (input.OwnershipControls !== undefined) {
      contents = se_OwnershipControls(input.OwnershipControls);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutBucketPolicyCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "text/plain",
      "content-md5": input.ContentMD5,
      "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
      "x-amz-confirm-remove-self-bucket-access": [() => isSerializableHeaderValue(input.ConfirmRemoveSelfBucketAccess), () => input.ConfirmRemoveSelfBucketAccess.toString()],
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      policy: [, ""]
    });
    let body;
    if (input.Policy !== undefined) {
      body = input.Policy;
    }
    let contents;
    if (input.Policy !== undefined) {
      contents = input.Policy;
      body = contents;
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutBucketReplicationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "content-md5": input.ContentMD5,
      "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
      "x-amz-bucket-object-lock-token": input.Token,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      replication: [, ""]
    });
    let body;
    if (input.ReplicationConfiguration !== undefined) {
      body = se_ReplicationConfiguration(input.ReplicationConfiguration);
    }
    let contents;
    if (input.ReplicationConfiguration !== undefined) {
      contents = se_ReplicationConfiguration(input.ReplicationConfiguration);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutBucketRequestPaymentCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "content-md5": input.ContentMD5,
      "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      requestPayment: [, ""]
    });
    let body;
    if (input.RequestPaymentConfiguration !== undefined) {
      body = se_RequestPaymentConfiguration(input.RequestPaymentConfiguration);
    }
    let contents;
    if (input.RequestPaymentConfiguration !== undefined) {
      contents = se_RequestPaymentConfiguration(input.RequestPaymentConfiguration);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutBucketTaggingCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "content-md5": input.ContentMD5,
      "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      tagging: [, ""]
    });
    let body;
    if (input.Tagging !== undefined) {
      body = se_Tagging(input.Tagging);
    }
    let contents;
    if (input.Tagging !== undefined) {
      contents = se_Tagging(input.Tagging);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutBucketVersioningCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "content-md5": input.ContentMD5,
      "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
      "x-amz-mfa": input.MFA,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      versioning: [, ""]
    });
    let body;
    if (input.VersioningConfiguration !== undefined) {
      body = se_VersioningConfiguration(input.VersioningConfiguration);
    }
    let contents;
    if (input.VersioningConfiguration !== undefined) {
      contents = se_VersioningConfiguration(input.VersioningConfiguration);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutBucketWebsiteCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "content-md5": input.ContentMD5,
      "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      website: [, ""]
    });
    let body;
    if (input.WebsiteConfiguration !== undefined) {
      body = se_WebsiteConfiguration(input.WebsiteConfiguration);
    }
    let contents;
    if (input.WebsiteConfiguration !== undefined) {
      contents = se_WebsiteConfiguration(input.WebsiteConfiguration);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutObjectCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": input.ContentType || "application/octet-stream",
      "x-amz-acl": input.ACL,
      "cache-control": input.CacheControl,
      "content-disposition": input.ContentDisposition,
      "content-encoding": input.ContentEncoding,
      "content-language": input.ContentLanguage,
      "content-length": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],
      "content-md5": input.ContentMD5,
      "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
      "x-amz-checksum-crc32": input.ChecksumCRC32,
      "x-amz-checksum-crc32c": input.ChecksumCRC32C,
      "x-amz-checksum-sha1": input.ChecksumSHA1,
      "x-amz-checksum-sha256": input.ChecksumSHA256,
      expires: [() => isSerializableHeaderValue(input.Expires), () => dateToUtcString(input.Expires).toString()],
      "x-amz-grant-full-control": input.GrantFullControl,
      "x-amz-grant-read": input.GrantRead,
      "x-amz-grant-read-acp": input.GrantReadACP,
      "x-amz-grant-write-acp": input.GrantWriteACP,
      "x-amz-server-side-encryption": input.ServerSideEncryption,
      "x-amz-storage-class": input.StorageClass,
      "x-amz-website-redirect-location": input.WebsiteRedirectLocation,
      "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
      "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
      "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
      "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
      "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext,
      "x-amz-server-side-encryption-bucket-key-enabled": [() => isSerializableHeaderValue(input.BucketKeyEnabled), () => input.BucketKeyEnabled.toString()],
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-tagging": input.Tagging,
      "x-amz-object-lock-mode": input.ObjectLockMode,
      "x-amz-object-lock-retain-until-date": [() => isSerializableHeaderValue(input.ObjectLockRetainUntilDate), () => (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()],
      "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
      ...(input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix) => {
        acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
        return acc;
      }, {}))
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      "x-id": [, "PutObject"]
    });
    let body;
    if (input.Body !== undefined) {
      body = input.Body;
    }
    let contents;
    if (input.Body !== undefined) {
      contents = input.Body;
      body = contents;
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutObjectAclCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "x-amz-acl": input.ACL,
      "content-md5": input.ContentMD5,
      "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
      "x-amz-grant-full-control": input.GrantFullControl,
      "x-amz-grant-read": input.GrantRead,
      "x-amz-grant-read-acp": input.GrantReadACP,
      "x-amz-grant-write": input.GrantWrite,
      "x-amz-grant-write-acp": input.GrantWriteACP,
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      acl: [, ""],
      versionId: [, input.VersionId]
    });
    let body;
    if (input.AccessControlPolicy !== undefined) {
      body = se_AccessControlPolicy(input.AccessControlPolicy);
    }
    let contents;
    if (input.AccessControlPolicy !== undefined) {
      contents = se_AccessControlPolicy(input.AccessControlPolicy);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutObjectLegalHoldCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "x-amz-request-payer": input.RequestPayer,
      "content-md5": input.ContentMD5,
      "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      "legal-hold": [, ""],
      versionId: [, input.VersionId]
    });
    let body;
    if (input.LegalHold !== undefined) {
      body = se_ObjectLockLegalHold(input.LegalHold);
    }
    let contents;
    if (input.LegalHold !== undefined) {
      contents = se_ObjectLockLegalHold(input.LegalHold);
      contents = contents.withName("LegalHold");
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutObjectLockConfigurationCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-bucket-object-lock-token": input.Token,
      "content-md5": input.ContentMD5,
      "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      "object-lock": [, ""]
    });
    let body;
    if (input.ObjectLockConfiguration !== undefined) {
      body = se_ObjectLockConfiguration(input.ObjectLockConfiguration);
    }
    let contents;
    if (input.ObjectLockConfiguration !== undefined) {
      contents = se_ObjectLockConfiguration(input.ObjectLockConfiguration);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutObjectRetentionCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-bypass-governance-retention": [() => isSerializableHeaderValue(input.BypassGovernanceRetention), () => input.BypassGovernanceRetention.toString()],
      "content-md5": input.ContentMD5,
      "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      retention: [, ""],
      versionId: [, input.VersionId]
    });
    let body;
    if (input.Retention !== undefined) {
      body = se_ObjectLockRetention(input.Retention);
    }
    let contents;
    if (input.Retention !== undefined) {
      contents = se_ObjectLockRetention(input.Retention);
      contents = contents.withName("Retention");
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutObjectTaggingCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "content-md5": input.ContentMD5,
      "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
      "x-amz-request-payer": input.RequestPayer
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      tagging: [, ""],
      versionId: [, input.VersionId]
    });
    let body;
    if (input.Tagging !== undefined) {
      body = se_Tagging(input.Tagging);
    }
    let contents;
    if (input.Tagging !== undefined) {
      contents = se_Tagging(input.Tagging);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_PutPublicAccessBlockCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "content-md5": input.ContentMD5,
      "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    const query = map({
      publicAccessBlock: [, ""]
    });
    let body;
    if (input.PublicAccessBlockConfiguration !== undefined) {
      body = se_PublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration);
    }
    let contents;
    if (input.PublicAccessBlockConfiguration !== undefined) {
      contents = se_PublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_RestoreObjectCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      restore: [, ""],
      "x-id": [, "RestoreObject"],
      versionId: [, input.VersionId]
    });
    let body;
    if (input.RestoreRequest !== undefined) {
      body = se_RestoreRequest(input.RestoreRequest);
    }
    let contents;
    if (input.RestoreRequest !== undefined) {
      contents = se_RestoreRequest(input.RestoreRequest);
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      body += contents.toString();
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "POST",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_SelectObjectContentCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/xml",
      "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
      "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
      "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      select: [, ""],
      "select-type": [, "2"],
      "x-id": [, "SelectObjectContent"]
    });
    let body;
    body = '<?xml version="1.0" encoding="UTF-8"?>';
    const bodyNode = new XmlNode$1("SelectObjectContentRequest");
    bodyNode.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
    if (input.Expression !== undefined) {
      const node = XmlNode$1.of("Expression", input.Expression).withName("Expression");
      bodyNode.addChildNode(node);
    }
    if (input.ExpressionType !== undefined) {
      const node = XmlNode$1.of("ExpressionType", input.ExpressionType).withName("ExpressionType");
      bodyNode.addChildNode(node);
    }
    if (input.InputSerialization !== undefined) {
      const node = se_InputSerialization(input.InputSerialization).withName("InputSerialization");
      bodyNode.addChildNode(node);
    }
    if (input.OutputSerialization !== undefined) {
      const node = se_OutputSerialization(input.OutputSerialization).withName("OutputSerialization");
      bodyNode.addChildNode(node);
    }
    if (input.RequestProgress !== undefined) {
      const node = se_RequestProgress(input.RequestProgress).withName("RequestProgress");
      bodyNode.addChildNode(node);
    }
    if (input.ScanRange !== undefined) {
      const node = se_ScanRange(input.ScanRange).withName("ScanRange");
      bodyNode.addChildNode(node);
    }
    body += bodyNode.toString();
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "POST",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_UploadPartCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "content-type": "application/octet-stream",
      "content-length": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],
      "content-md5": input.ContentMD5,
      "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
      "x-amz-checksum-crc32": input.ChecksumCRC32,
      "x-amz-checksum-crc32c": input.ChecksumCRC32C,
      "x-amz-checksum-sha1": input.ChecksumSHA1,
      "x-amz-checksum-sha256": input.ChecksumSHA256,
      "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
      "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
      "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      "x-id": [, "UploadPart"],
      partNumber: [expectNonNull(input.PartNumber, `PartNumber`) != null, () => input.PartNumber.toString()],
      uploadId: [, expectNonNull(input.UploadId, `UploadId`)]
    });
    let body;
    if (input.Body !== undefined) {
      body = input.Body;
    }
    let contents;
    if (input.Body !== undefined) {
      contents = input.Body;
      body = contents;
    }
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_UploadPartCopyCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-copy-source": input.CopySource,
      "x-amz-copy-source-if-match": input.CopySourceIfMatch,
      "x-amz-copy-source-if-modified-since": [() => isSerializableHeaderValue(input.CopySourceIfModifiedSince), () => dateToUtcString(input.CopySourceIfModifiedSince).toString()],
      "x-amz-copy-source-if-none-match": input.CopySourceIfNoneMatch,
      "x-amz-copy-source-if-unmodified-since": [() => isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince), () => dateToUtcString(input.CopySourceIfUnmodifiedSince).toString()],
      "x-amz-copy-source-range": input.CopySourceRange,
      "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
      "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
      "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
      "x-amz-copy-source-server-side-encryption-customer-algorithm": input.CopySourceSSECustomerAlgorithm,
      "x-amz-copy-source-server-side-encryption-customer-key": input.CopySourceSSECustomerKey,
      "x-amz-copy-source-server-side-encryption-customer-key-md5": input.CopySourceSSECustomerKeyMD5,
      "x-amz-request-payer": input.RequestPayer,
      "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
      "x-amz-source-expected-bucket-owner": input.ExpectedSourceBucketOwner
    });
    let resolvedPath$1 = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/{Key+}";
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Bucket", () => input.Bucket, "{Bucket}", false);
    resolvedPath$1 = resolvedPath(resolvedPath$1, input, "Key", () => input.Key, "{Key+}", true);
    const query = map({
      "x-id": [, "UploadPartCopy"],
      partNumber: [expectNonNull(input.PartNumber, `PartNumber`) != null, () => input.PartNumber.toString()],
      uploadId: [, expectNonNull(input.UploadId, `UploadId`)]
    });
    let body;
    return new HttpRequest({
      protocol,
      hostname,
      port,
      method: "PUT",
      headers,
      path: resolvedPath$1,
      query,
      body
    });
  };
  const se_WriteGetObjectResponseCommand = async (input, context) => {
    const {
      hostname,
      protocol = "https",
      port,
      path: basePath
    } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
      "x-amz-content-sha256": "UNSIGNED-PAYLOAD",
      "content-type": "application/octet-stream",
      "x-amz-request-route": input.RequestRoute,
      "x-amz-request-token": input.RequestToken,
      "x-amz-fwd-status": [() => isSerializableHeaderValue(input.StatusCode), () => input.StatusCode.toString()],
      "x-amz-fwd-error-code": input.ErrorCode,
      "x-amz-fwd-error-message": input.ErrorMessage,
      "x-amz-fwd-header-accept-ranges": input.AcceptRanges,
      "x-amz-fwd-header-cache-control": input.CacheControl,
      "x-amz-fwd-header-content-disposition": input.ContentDisposition,
      "x-amz-fwd-header-content-encoding": input.ContentEncoding,
      "x-amz-fwd-header-content-language": input.ContentLanguage,
      "content-length": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],
      "x-amz-fwd-header-content-range": input.ContentRange,
      "x-amz-fwd-header-content-type": input.ContentType,
      "x-amz-fwd-header-x-amz-checksum-crc32": input.ChecksumCRC32,
      "x-amz-fwd-header-x-amz-checksum-crc32c": input.ChecksumCRC32C,
      "x-amz-fwd-header-x-amz-checksum-sha1": input.ChecksumSHA1,
      "x-amz-fwd-header-x-amz-checksum-sha256": input.ChecksumSHA256,
      "x-amz-fwd-header-x-amz-delete-marker": [() => isSerializableHeaderValue(input.DeleteMarker), () => input.DeleteMarker.toString()],
      "x-amz-fwd-header-etag": input.ETag,
      "x-amz-fwd-header-expires": [() => isSerializableHeaderValue(input.Expires), () => dateToUtcString(input.Expires).toString()],
      "x-amz-fwd-header-x-amz-expiration": input.Expiration,
      "x-amz-fwd-header-last-modified": [() => isSerializableHeaderValue(input.LastModified), () => dateToUtcString(input.LastModified).toString()],
      "x-amz-fwd-header-x-amz-missing-meta": [() => isSerializableHeaderValue(input.MissingMeta), () => input.MissingMeta.toString()],
      "x-amz-fwd-header-x-amz-object-lock-mode": input.ObjectLockMode,
      "x-amz-fwd-header-x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
      "x-amz-fwd-header-x-amz-object-lock-retain-until-date": [() => isSerializableHeaderValue(input.ObjectLockRetainUntilDate), () => (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()],
      "x-amz-fwd-header-x-amz-mp-parts-count": [() => isSerializableHeaderValue(input.PartsCount), () => input.PartsCount.toString()],
      "x-amz-fwd-header-x-amz-replication-status": input.ReplicationStatus,
      "x-amz-fwd-header-x-amz-request-charged": input.RequestCharged,
      "x-amz-fwd-header-x-amz-restore": input.Restore,
      "x-amz-fwd-header-x-amz-server-side-encryption": input.ServerSideEncryption,
      "x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
      "x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
      "x-amz-fwd-header-x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
      "x-amz-fwd-header-x-amz-storage-class": input.StorageClass,
      "x-amz-fwd-header-x-amz-tagging-count": [() => isSerializableHeaderValue(input.TagCount), () => input.TagCount.toString()],
      "x-amz-fwd-header-x-amz-version-id": input.VersionId,
      "x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled": [() => isSerializableHeaderValue(input.BucketKeyEnabled), () => input.BucketKeyEnabled.toString()],
      ...(input.Metadata !== undefined && Object.keys(input.Metadata).reduce((acc, suffix) => {
        acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
        return acc;
      }, {}))
    });
    const resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/WriteGetObjectResponse";
    const query = map({
      "x-id": [, "WriteGetObjectResponse"]
    });
    let body;
    if (input.Body !== undefined) {
      body = input.Body;
    }
    let contents;
    if (input.Body !== undefined) {
      contents = input.Body;
      body = contents;
    }
    let {
      hostname: resolvedHostname
    } = await context.endpoint();
    if (context.disableHostPrefix !== true) {
      resolvedHostname = "{RequestRoute}." + resolvedHostname;
      if (input.RequestRoute === undefined) {
        throw new Error("Empty value provided for input host prefix: RequestRoute.");
      }
      resolvedHostname = resolvedHostname.replace("{RequestRoute}", input.RequestRoute);
      if (!isValidHostname(resolvedHostname)) {
        throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
      }
    }
    return new HttpRequest({
      protocol,
      hostname: resolvedHostname,
      port,
      method: "POST",
      headers,
      path: resolvedPath,
      query,
      body
    });
  };
  const de_AbortMultipartUploadCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_AbortMultipartUploadCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      RequestCharged: [, output.headers["x-amz-request-charged"]]
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_AbortMultipartUploadCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NoSuchUpload":
      case "com.amazonaws.s3#NoSuchUpload":
        throw await de_NoSuchUploadRes(parsedOutput);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  };
  const de_CompleteMultipartUploadCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CompleteMultipartUploadCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      Expiration: [, output.headers["x-amz-expiration"]],
      ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
      VersionId: [, output.headers["x-amz-version-id"]],
      SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
      BucketKeyEnabled: [() => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"], () => parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])],
      RequestCharged: [, output.headers["x-amz-request-charged"]]
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data["Bucket"] !== undefined) {
      contents.Bucket = expectString(data["Bucket"]);
    }
    if (data["ChecksumCRC32"] !== undefined) {
      contents.ChecksumCRC32 = expectString(data["ChecksumCRC32"]);
    }
    if (data["ChecksumCRC32C"] !== undefined) {
      contents.ChecksumCRC32C = expectString(data["ChecksumCRC32C"]);
    }
    if (data["ChecksumSHA1"] !== undefined) {
      contents.ChecksumSHA1 = expectString(data["ChecksumSHA1"]);
    }
    if (data["ChecksumSHA256"] !== undefined) {
      contents.ChecksumSHA256 = expectString(data["ChecksumSHA256"]);
    }
    if (data["ETag"] !== undefined) {
      contents.ETag = expectString(data["ETag"]);
    }
    if (data["Key"] !== undefined) {
      contents.Key = expectString(data["Key"]);
    }
    if (data["Location"] !== undefined) {
      contents.Location = expectString(data["Location"]);
    }
    return contents;
  };
  const de_CompleteMultipartUploadCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_CopyObjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CopyObjectCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      Expiration: [, output.headers["x-amz-expiration"]],
      CopySourceVersionId: [, output.headers["x-amz-copy-source-version-id"]],
      VersionId: [, output.headers["x-amz-version-id"]],
      ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
      SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
      SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
      SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
      SSEKMSEncryptionContext: [, output.headers["x-amz-server-side-encryption-context"]],
      BucketKeyEnabled: [() => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"], () => parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])],
      RequestCharged: [, output.headers["x-amz-request-charged"]]
    });
    const data = expectObject(await parseBody(output.body, context));
    contents.CopyObjectResult = de_CopyObjectResult(data);
    return contents;
  };
  const de_CopyObjectCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "ObjectNotInActiveTierError":
      case "com.amazonaws.s3#ObjectNotInActiveTierError":
        throw await de_ObjectNotInActiveTierErrorRes(parsedOutput);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  };
  const de_CreateBucketCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CreateBucketCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      Location: [, output.headers["location"]]
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_CreateBucketCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "BucketAlreadyExists":
      case "com.amazonaws.s3#BucketAlreadyExists":
        throw await de_BucketAlreadyExistsRes(parsedOutput);
      case "BucketAlreadyOwnedByYou":
      case "com.amazonaws.s3#BucketAlreadyOwnedByYou":
        throw await de_BucketAlreadyOwnedByYouRes(parsedOutput);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  };
  const de_CreateMultipartUploadCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_CreateMultipartUploadCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      AbortDate: [() => void 0 !== output.headers["x-amz-abort-date"], () => expectNonNull(parseRfc7231DateTime(output.headers["x-amz-abort-date"]))],
      AbortRuleId: [, output.headers["x-amz-abort-rule-id"]],
      ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
      SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
      SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
      SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
      SSEKMSEncryptionContext: [, output.headers["x-amz-server-side-encryption-context"]],
      BucketKeyEnabled: [() => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"], () => parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])],
      RequestCharged: [, output.headers["x-amz-request-charged"]],
      ChecksumAlgorithm: [, output.headers["x-amz-checksum-algorithm"]]
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data["Bucket"] !== undefined) {
      contents.Bucket = expectString(data["Bucket"]);
    }
    if (data["Key"] !== undefined) {
      contents.Key = expectString(data["Key"]);
    }
    if (data["UploadId"] !== undefined) {
      contents.UploadId = expectString(data["UploadId"]);
    }
    return contents;
  };
  const de_CreateMultipartUploadCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_DeleteBucketCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_DeleteBucketCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_DeleteBucketAnalyticsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketAnalyticsConfigurationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_DeleteBucketAnalyticsConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_DeleteBucketCorsCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketCorsCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_DeleteBucketCorsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_DeleteBucketEncryptionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketEncryptionCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_DeleteBucketEncryptionCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_DeleteBucketIntelligentTieringConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketIntelligentTieringConfigurationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_DeleteBucketIntelligentTieringConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_DeleteBucketInventoryConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketInventoryConfigurationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_DeleteBucketInventoryConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_DeleteBucketLifecycleCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketLifecycleCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_DeleteBucketLifecycleCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_DeleteBucketMetricsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketMetricsConfigurationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_DeleteBucketMetricsConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_DeleteBucketOwnershipControlsCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketOwnershipControlsCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_DeleteBucketOwnershipControlsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_DeleteBucketPolicyCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketPolicyCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_DeleteBucketPolicyCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_DeleteBucketReplicationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketReplicationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_DeleteBucketReplicationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_DeleteBucketTaggingCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketTaggingCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_DeleteBucketTaggingCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_DeleteBucketWebsiteCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteBucketWebsiteCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_DeleteBucketWebsiteCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_DeleteObjectCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteObjectCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      DeleteMarker: [() => void 0 !== output.headers["x-amz-delete-marker"], () => parseBoolean(output.headers["x-amz-delete-marker"])],
      VersionId: [, output.headers["x-amz-version-id"]],
      RequestCharged: [, output.headers["x-amz-request-charged"]]
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_DeleteObjectCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_DeleteObjectsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_DeleteObjectsCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      RequestCharged: [, output.headers["x-amz-request-charged"]]
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data.Deleted === "") {
      contents.Deleted = [];
    } else if (data["Deleted"] !== undefined) {
      contents.Deleted = de_DeletedObjects(getArrayIfSingleItem(data["Deleted"]));
    }
    if (data.Error === "") {
      contents.Errors = [];
    } else if (data["Error"] !== undefined) {
      contents.Errors = de_Errors(getArrayIfSingleItem(data["Error"]));
    }
    return contents;
  };
  const de_DeleteObjectsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_DeleteObjectTaggingCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeleteObjectTaggingCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      VersionId: [, output.headers["x-amz-version-id"]]
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_DeleteObjectTaggingCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_DeletePublicAccessBlockCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
      return de_DeletePublicAccessBlockCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_DeletePublicAccessBlockCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetBucketAccelerateConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketAccelerateConfigurationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      RequestCharged: [, output.headers["x-amz-request-charged"]]
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data["Status"] !== undefined) {
      contents.Status = expectString(data["Status"]);
    }
    return contents;
  };
  const de_GetBucketAccelerateConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetBucketAclCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketAclCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data.AccessControlList === "") {
      contents.Grants = [];
    } else if (data["AccessControlList"] !== undefined && data["AccessControlList"]["Grant"] !== undefined) {
      contents.Grants = de_Grants(getArrayIfSingleItem(data["AccessControlList"]["Grant"]));
    }
    if (data["Owner"] !== undefined) {
      contents.Owner = de_Owner(data["Owner"]);
    }
    return contents;
  };
  const de_GetBucketAclCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetBucketAnalyticsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketAnalyticsConfigurationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectObject(await parseBody(output.body, context));
    contents.AnalyticsConfiguration = de_AnalyticsConfiguration(data);
    return contents;
  };
  const de_GetBucketAnalyticsConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetBucketCorsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketCorsCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data.CORSRule === "") {
      contents.CORSRules = [];
    } else if (data["CORSRule"] !== undefined) {
      contents.CORSRules = de_CORSRules(getArrayIfSingleItem(data["CORSRule"]));
    }
    return contents;
  };
  const de_GetBucketCorsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetBucketEncryptionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketEncryptionCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectObject(await parseBody(output.body, context));
    contents.ServerSideEncryptionConfiguration = de_ServerSideEncryptionConfiguration(data);
    return contents;
  };
  const de_GetBucketEncryptionCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetBucketIntelligentTieringConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketIntelligentTieringConfigurationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectObject(await parseBody(output.body, context));
    contents.IntelligentTieringConfiguration = de_IntelligentTieringConfiguration(data);
    return contents;
  };
  const de_GetBucketIntelligentTieringConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetBucketInventoryConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketInventoryConfigurationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectObject(await parseBody(output.body, context));
    contents.InventoryConfiguration = de_InventoryConfiguration(data);
    return contents;
  };
  const de_GetBucketInventoryConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetBucketLifecycleConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketLifecycleConfigurationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data.Rule === "") {
      contents.Rules = [];
    } else if (data["Rule"] !== undefined) {
      contents.Rules = de_LifecycleRules(getArrayIfSingleItem(data["Rule"]));
    }
    return contents;
  };
  const de_GetBucketLifecycleConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetBucketLocationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketLocationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data["LocationConstraint"] !== undefined) {
      contents.LocationConstraint = expectString(data["LocationConstraint"]);
    }
    return contents;
  };
  const de_GetBucketLocationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetBucketLoggingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketLoggingCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data["LoggingEnabled"] !== undefined) {
      contents.LoggingEnabled = de_LoggingEnabled(data["LoggingEnabled"]);
    }
    return contents;
  };
  const de_GetBucketLoggingCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetBucketMetricsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketMetricsConfigurationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectObject(await parseBody(output.body, context));
    contents.MetricsConfiguration = de_MetricsConfiguration(data);
    return contents;
  };
  const de_GetBucketMetricsConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetBucketNotificationConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketNotificationConfigurationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data["EventBridgeConfiguration"] !== undefined) {
      contents.EventBridgeConfiguration = de_EventBridgeConfiguration(data["EventBridgeConfiguration"]);
    }
    if (data.CloudFunctionConfiguration === "") {
      contents.LambdaFunctionConfigurations = [];
    } else if (data["CloudFunctionConfiguration"] !== undefined) {
      contents.LambdaFunctionConfigurations = de_LambdaFunctionConfigurationList(getArrayIfSingleItem(data["CloudFunctionConfiguration"]));
    }
    if (data.QueueConfiguration === "") {
      contents.QueueConfigurations = [];
    } else if (data["QueueConfiguration"] !== undefined) {
      contents.QueueConfigurations = de_QueueConfigurationList(getArrayIfSingleItem(data["QueueConfiguration"]));
    }
    if (data.TopicConfiguration === "") {
      contents.TopicConfigurations = [];
    } else if (data["TopicConfiguration"] !== undefined) {
      contents.TopicConfigurations = de_TopicConfigurationList(getArrayIfSingleItem(data["TopicConfiguration"]));
    }
    return contents;
  };
  const de_GetBucketNotificationConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetBucketOwnershipControlsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketOwnershipControlsCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectObject(await parseBody(output.body, context));
    contents.OwnershipControls = de_OwnershipControls(data);
    return contents;
  };
  const de_GetBucketOwnershipControlsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetBucketPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketPolicyCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = await collectBodyString(output.body, context);
    contents.Policy = expectString(data);
    return contents;
  };
  const de_GetBucketPolicyCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetBucketPolicyStatusCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketPolicyStatusCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectObject(await parseBody(output.body, context));
    contents.PolicyStatus = de_PolicyStatus(data);
    return contents;
  };
  const de_GetBucketPolicyStatusCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetBucketReplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketReplicationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectObject(await parseBody(output.body, context));
    contents.ReplicationConfiguration = de_ReplicationConfiguration(data);
    return contents;
  };
  const de_GetBucketReplicationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetBucketRequestPaymentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketRequestPaymentCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data["Payer"] !== undefined) {
      contents.Payer = expectString(data["Payer"]);
    }
    return contents;
  };
  const de_GetBucketRequestPaymentCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetBucketTaggingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketTaggingCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data.TagSet === "") {
      contents.TagSet = [];
    } else if (data["TagSet"] !== undefined && data["TagSet"]["Tag"] !== undefined) {
      contents.TagSet = de_TagSet(getArrayIfSingleItem(data["TagSet"]["Tag"]));
    }
    return contents;
  };
  const de_GetBucketTaggingCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetBucketVersioningCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketVersioningCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data["MfaDelete"] !== undefined) {
      contents.MFADelete = expectString(data["MfaDelete"]);
    }
    if (data["Status"] !== undefined) {
      contents.Status = expectString(data["Status"]);
    }
    return contents;
  };
  const de_GetBucketVersioningCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetBucketWebsiteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetBucketWebsiteCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data["ErrorDocument"] !== undefined) {
      contents.ErrorDocument = de_ErrorDocument(data["ErrorDocument"]);
    }
    if (data["IndexDocument"] !== undefined) {
      contents.IndexDocument = de_IndexDocument(data["IndexDocument"]);
    }
    if (data["RedirectAllRequestsTo"] !== undefined) {
      contents.RedirectAllRequestsTo = de_RedirectAllRequestsTo(data["RedirectAllRequestsTo"]);
    }
    if (data.RoutingRules === "") {
      contents.RoutingRules = [];
    } else if (data["RoutingRules"] !== undefined && data["RoutingRules"]["RoutingRule"] !== undefined) {
      contents.RoutingRules = de_RoutingRules(getArrayIfSingleItem(data["RoutingRules"]["RoutingRule"]));
    }
    return contents;
  };
  const de_GetBucketWebsiteCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetObjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetObjectCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      DeleteMarker: [() => void 0 !== output.headers["x-amz-delete-marker"], () => parseBoolean(output.headers["x-amz-delete-marker"])],
      AcceptRanges: [, output.headers["accept-ranges"]],
      Expiration: [, output.headers["x-amz-expiration"]],
      Restore: [, output.headers["x-amz-restore"]],
      LastModified: [() => void 0 !== output.headers["last-modified"], () => expectNonNull(parseRfc7231DateTime(output.headers["last-modified"]))],
      ContentLength: [() => void 0 !== output.headers["content-length"], () => strictParseLong(output.headers["content-length"])],
      ETag: [, output.headers["etag"]],
      ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
      ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
      ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
      ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
      MissingMeta: [() => void 0 !== output.headers["x-amz-missing-meta"], () => strictParseInt32(output.headers["x-amz-missing-meta"])],
      VersionId: [, output.headers["x-amz-version-id"]],
      CacheControl: [, output.headers["cache-control"]],
      ContentDisposition: [, output.headers["content-disposition"]],
      ContentEncoding: [, output.headers["content-encoding"]],
      ContentLanguage: [, output.headers["content-language"]],
      ContentRange: [, output.headers["content-range"]],
      ContentType: [, output.headers["content-type"]],
      Expires: [() => void 0 !== output.headers["expires"], () => expectNonNull(parseRfc7231DateTime(output.headers["expires"]))],
      WebsiteRedirectLocation: [, output.headers["x-amz-website-redirect-location"]],
      ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
      SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
      SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
      SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
      BucketKeyEnabled: [() => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"], () => parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])],
      StorageClass: [, output.headers["x-amz-storage-class"]],
      RequestCharged: [, output.headers["x-amz-request-charged"]],
      ReplicationStatus: [, output.headers["x-amz-replication-status"]],
      PartsCount: [() => void 0 !== output.headers["x-amz-mp-parts-count"], () => strictParseInt32(output.headers["x-amz-mp-parts-count"])],
      TagCount: [() => void 0 !== output.headers["x-amz-tagging-count"], () => strictParseInt32(output.headers["x-amz-tagging-count"])],
      ObjectLockMode: [, output.headers["x-amz-object-lock-mode"]],
      ObjectLockRetainUntilDate: [() => void 0 !== output.headers["x-amz-object-lock-retain-until-date"], () => expectNonNull(parseRfc3339DateTimeWithOffset(output.headers["x-amz-object-lock-retain-until-date"]))],
      ObjectLockLegalHoldStatus: [, output.headers["x-amz-object-lock-legal-hold"]],
      Metadata: [, Object.keys(output.headers).filter(header => header.startsWith("x-amz-meta-")).reduce((acc, header) => {
        acc[header.substring(11)] = output.headers[header];
        return acc;
      }, {})]
    });
    const data = output.body;
    context.sdkStreamMixin(data);
    contents.Body = data;
    return contents;
  };
  const de_GetObjectCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "InvalidObjectState":
      case "com.amazonaws.s3#InvalidObjectState":
        throw await de_InvalidObjectStateRes(parsedOutput);
      case "NoSuchKey":
      case "com.amazonaws.s3#NoSuchKey":
        throw await de_NoSuchKeyRes(parsedOutput);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  };
  const de_GetObjectAclCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetObjectAclCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      RequestCharged: [, output.headers["x-amz-request-charged"]]
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data.AccessControlList === "") {
      contents.Grants = [];
    } else if (data["AccessControlList"] !== undefined && data["AccessControlList"]["Grant"] !== undefined) {
      contents.Grants = de_Grants(getArrayIfSingleItem(data["AccessControlList"]["Grant"]));
    }
    if (data["Owner"] !== undefined) {
      contents.Owner = de_Owner(data["Owner"]);
    }
    return contents;
  };
  const de_GetObjectAclCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NoSuchKey":
      case "com.amazonaws.s3#NoSuchKey":
        throw await de_NoSuchKeyRes(parsedOutput);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  };
  const de_GetObjectAttributesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetObjectAttributesCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      DeleteMarker: [() => void 0 !== output.headers["x-amz-delete-marker"], () => parseBoolean(output.headers["x-amz-delete-marker"])],
      LastModified: [() => void 0 !== output.headers["last-modified"], () => expectNonNull(parseRfc7231DateTime(output.headers["last-modified"]))],
      VersionId: [, output.headers["x-amz-version-id"]],
      RequestCharged: [, output.headers["x-amz-request-charged"]]
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data["Checksum"] !== undefined) {
      contents.Checksum = de_Checksum(data["Checksum"]);
    }
    if (data["ETag"] !== undefined) {
      contents.ETag = expectString(data["ETag"]);
    }
    if (data["ObjectParts"] !== undefined) {
      contents.ObjectParts = de_GetObjectAttributesParts(data["ObjectParts"]);
    }
    if (data["ObjectSize"] !== undefined) {
      contents.ObjectSize = strictParseLong(data["ObjectSize"]);
    }
    if (data["StorageClass"] !== undefined) {
      contents.StorageClass = expectString(data["StorageClass"]);
    }
    return contents;
  };
  const de_GetObjectAttributesCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NoSuchKey":
      case "com.amazonaws.s3#NoSuchKey":
        throw await de_NoSuchKeyRes(parsedOutput);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  };
  const de_GetObjectLegalHoldCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetObjectLegalHoldCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectObject(await parseBody(output.body, context));
    contents.LegalHold = de_ObjectLockLegalHold(data);
    return contents;
  };
  const de_GetObjectLegalHoldCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetObjectLockConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetObjectLockConfigurationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectObject(await parseBody(output.body, context));
    contents.ObjectLockConfiguration = de_ObjectLockConfiguration(data);
    return contents;
  };
  const de_GetObjectLockConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetObjectRetentionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetObjectRetentionCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectObject(await parseBody(output.body, context));
    contents.Retention = de_ObjectLockRetention(data);
    return contents;
  };
  const de_GetObjectRetentionCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetObjectTaggingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetObjectTaggingCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      VersionId: [, output.headers["x-amz-version-id"]]
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data.TagSet === "") {
      contents.TagSet = [];
    } else if (data["TagSet"] !== undefined && data["TagSet"]["Tag"] !== undefined) {
      contents.TagSet = de_TagSet(getArrayIfSingleItem(data["TagSet"]["Tag"]));
    }
    return contents;
  };
  const de_GetObjectTaggingCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetObjectTorrentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetObjectTorrentCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      RequestCharged: [, output.headers["x-amz-request-charged"]]
    });
    const data = output.body;
    context.sdkStreamMixin(data);
    contents.Body = data;
    return contents;
  };
  const de_GetObjectTorrentCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_GetPublicAccessBlockCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_GetPublicAccessBlockCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectObject(await parseBody(output.body, context));
    contents.PublicAccessBlockConfiguration = de_PublicAccessBlockConfiguration(data);
    return contents;
  };
  const de_GetPublicAccessBlockCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_HeadBucketCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_HeadBucketCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_HeadBucketCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NotFound":
      case "com.amazonaws.s3#NotFound":
        throw await de_NotFoundRes(parsedOutput);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  };
  const de_HeadObjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_HeadObjectCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      DeleteMarker: [() => void 0 !== output.headers["x-amz-delete-marker"], () => parseBoolean(output.headers["x-amz-delete-marker"])],
      AcceptRanges: [, output.headers["accept-ranges"]],
      Expiration: [, output.headers["x-amz-expiration"]],
      Restore: [, output.headers["x-amz-restore"]],
      ArchiveStatus: [, output.headers["x-amz-archive-status"]],
      LastModified: [() => void 0 !== output.headers["last-modified"], () => expectNonNull(parseRfc7231DateTime(output.headers["last-modified"]))],
      ContentLength: [() => void 0 !== output.headers["content-length"], () => strictParseLong(output.headers["content-length"])],
      ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
      ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
      ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
      ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
      ETag: [, output.headers["etag"]],
      MissingMeta: [() => void 0 !== output.headers["x-amz-missing-meta"], () => strictParseInt32(output.headers["x-amz-missing-meta"])],
      VersionId: [, output.headers["x-amz-version-id"]],
      CacheControl: [, output.headers["cache-control"]],
      ContentDisposition: [, output.headers["content-disposition"]],
      ContentEncoding: [, output.headers["content-encoding"]],
      ContentLanguage: [, output.headers["content-language"]],
      ContentType: [, output.headers["content-type"]],
      Expires: [() => void 0 !== output.headers["expires"], () => expectNonNull(parseRfc7231DateTime(output.headers["expires"]))],
      WebsiteRedirectLocation: [, output.headers["x-amz-website-redirect-location"]],
      ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
      SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
      SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
      SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
      BucketKeyEnabled: [() => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"], () => parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])],
      StorageClass: [, output.headers["x-amz-storage-class"]],
      RequestCharged: [, output.headers["x-amz-request-charged"]],
      ReplicationStatus: [, output.headers["x-amz-replication-status"]],
      PartsCount: [() => void 0 !== output.headers["x-amz-mp-parts-count"], () => strictParseInt32(output.headers["x-amz-mp-parts-count"])],
      ObjectLockMode: [, output.headers["x-amz-object-lock-mode"]],
      ObjectLockRetainUntilDate: [() => void 0 !== output.headers["x-amz-object-lock-retain-until-date"], () => expectNonNull(parseRfc3339DateTimeWithOffset(output.headers["x-amz-object-lock-retain-until-date"]))],
      ObjectLockLegalHoldStatus: [, output.headers["x-amz-object-lock-legal-hold"]],
      Metadata: [, Object.keys(output.headers).filter(header => header.startsWith("x-amz-meta-")).reduce((acc, header) => {
        acc[header.substring(11)] = output.headers[header];
        return acc;
      }, {})]
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_HeadObjectCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NotFound":
      case "com.amazonaws.s3#NotFound":
        throw await de_NotFoundRes(parsedOutput);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  };
  const de_ListBucketAnalyticsConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_ListBucketAnalyticsConfigurationsCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data.AnalyticsConfiguration === "") {
      contents.AnalyticsConfigurationList = [];
    } else if (data["AnalyticsConfiguration"] !== undefined) {
      contents.AnalyticsConfigurationList = de_AnalyticsConfigurationList(getArrayIfSingleItem(data["AnalyticsConfiguration"]));
    }
    if (data["ContinuationToken"] !== undefined) {
      contents.ContinuationToken = expectString(data["ContinuationToken"]);
    }
    if (data["IsTruncated"] !== undefined) {
      contents.IsTruncated = parseBoolean(data["IsTruncated"]);
    }
    if (data["NextContinuationToken"] !== undefined) {
      contents.NextContinuationToken = expectString(data["NextContinuationToken"]);
    }
    return contents;
  };
  const de_ListBucketAnalyticsConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_ListBucketIntelligentTieringConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_ListBucketIntelligentTieringConfigurationsCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data["ContinuationToken"] !== undefined) {
      contents.ContinuationToken = expectString(data["ContinuationToken"]);
    }
    if (data.IntelligentTieringConfiguration === "") {
      contents.IntelligentTieringConfigurationList = [];
    } else if (data["IntelligentTieringConfiguration"] !== undefined) {
      contents.IntelligentTieringConfigurationList = de_IntelligentTieringConfigurationList(getArrayIfSingleItem(data["IntelligentTieringConfiguration"]));
    }
    if (data["IsTruncated"] !== undefined) {
      contents.IsTruncated = parseBoolean(data["IsTruncated"]);
    }
    if (data["NextContinuationToken"] !== undefined) {
      contents.NextContinuationToken = expectString(data["NextContinuationToken"]);
    }
    return contents;
  };
  const de_ListBucketIntelligentTieringConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_ListBucketInventoryConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_ListBucketInventoryConfigurationsCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data["ContinuationToken"] !== undefined) {
      contents.ContinuationToken = expectString(data["ContinuationToken"]);
    }
    if (data.InventoryConfiguration === "") {
      contents.InventoryConfigurationList = [];
    } else if (data["InventoryConfiguration"] !== undefined) {
      contents.InventoryConfigurationList = de_InventoryConfigurationList(getArrayIfSingleItem(data["InventoryConfiguration"]));
    }
    if (data["IsTruncated"] !== undefined) {
      contents.IsTruncated = parseBoolean(data["IsTruncated"]);
    }
    if (data["NextContinuationToken"] !== undefined) {
      contents.NextContinuationToken = expectString(data["NextContinuationToken"]);
    }
    return contents;
  };
  const de_ListBucketInventoryConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_ListBucketMetricsConfigurationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_ListBucketMetricsConfigurationsCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data["ContinuationToken"] !== undefined) {
      contents.ContinuationToken = expectString(data["ContinuationToken"]);
    }
    if (data["IsTruncated"] !== undefined) {
      contents.IsTruncated = parseBoolean(data["IsTruncated"]);
    }
    if (data.MetricsConfiguration === "") {
      contents.MetricsConfigurationList = [];
    } else if (data["MetricsConfiguration"] !== undefined) {
      contents.MetricsConfigurationList = de_MetricsConfigurationList(getArrayIfSingleItem(data["MetricsConfiguration"]));
    }
    if (data["NextContinuationToken"] !== undefined) {
      contents.NextContinuationToken = expectString(data["NextContinuationToken"]);
    }
    return contents;
  };
  const de_ListBucketMetricsConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_ListBucketsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_ListBucketsCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data.Buckets === "") {
      contents.Buckets = [];
    } else if (data["Buckets"] !== undefined && data["Buckets"]["Bucket"] !== undefined) {
      contents.Buckets = de_Buckets(getArrayIfSingleItem(data["Buckets"]["Bucket"]));
    }
    if (data["Owner"] !== undefined) {
      contents.Owner = de_Owner(data["Owner"]);
    }
    return contents;
  };
  const de_ListBucketsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_ListMultipartUploadsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_ListMultipartUploadsCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      RequestCharged: [, output.headers["x-amz-request-charged"]]
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data["Bucket"] !== undefined) {
      contents.Bucket = expectString(data["Bucket"]);
    }
    if (data.CommonPrefixes === "") {
      contents.CommonPrefixes = [];
    } else if (data["CommonPrefixes"] !== undefined) {
      contents.CommonPrefixes = de_CommonPrefixList(getArrayIfSingleItem(data["CommonPrefixes"]));
    }
    if (data["Delimiter"] !== undefined) {
      contents.Delimiter = expectString(data["Delimiter"]);
    }
    if (data["EncodingType"] !== undefined) {
      contents.EncodingType = expectString(data["EncodingType"]);
    }
    if (data["IsTruncated"] !== undefined) {
      contents.IsTruncated = parseBoolean(data["IsTruncated"]);
    }
    if (data["KeyMarker"] !== undefined) {
      contents.KeyMarker = expectString(data["KeyMarker"]);
    }
    if (data["MaxUploads"] !== undefined) {
      contents.MaxUploads = strictParseInt32(data["MaxUploads"]);
    }
    if (data["NextKeyMarker"] !== undefined) {
      contents.NextKeyMarker = expectString(data["NextKeyMarker"]);
    }
    if (data["NextUploadIdMarker"] !== undefined) {
      contents.NextUploadIdMarker = expectString(data["NextUploadIdMarker"]);
    }
    if (data["Prefix"] !== undefined) {
      contents.Prefix = expectString(data["Prefix"]);
    }
    if (data["UploadIdMarker"] !== undefined) {
      contents.UploadIdMarker = expectString(data["UploadIdMarker"]);
    }
    if (data.Upload === "") {
      contents.Uploads = [];
    } else if (data["Upload"] !== undefined) {
      contents.Uploads = de_MultipartUploadList(getArrayIfSingleItem(data["Upload"]));
    }
    return contents;
  };
  const de_ListMultipartUploadsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_ListObjectsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_ListObjectsCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      RequestCharged: [, output.headers["x-amz-request-charged"]]
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data.CommonPrefixes === "") {
      contents.CommonPrefixes = [];
    } else if (data["CommonPrefixes"] !== undefined) {
      contents.CommonPrefixes = de_CommonPrefixList(getArrayIfSingleItem(data["CommonPrefixes"]));
    }
    if (data.Contents === "") {
      contents.Contents = [];
    } else if (data["Contents"] !== undefined) {
      contents.Contents = de_ObjectList(getArrayIfSingleItem(data["Contents"]));
    }
    if (data["Delimiter"] !== undefined) {
      contents.Delimiter = expectString(data["Delimiter"]);
    }
    if (data["EncodingType"] !== undefined) {
      contents.EncodingType = expectString(data["EncodingType"]);
    }
    if (data["IsTruncated"] !== undefined) {
      contents.IsTruncated = parseBoolean(data["IsTruncated"]);
    }
    if (data["Marker"] !== undefined) {
      contents.Marker = expectString(data["Marker"]);
    }
    if (data["MaxKeys"] !== undefined) {
      contents.MaxKeys = strictParseInt32(data["MaxKeys"]);
    }
    if (data["Name"] !== undefined) {
      contents.Name = expectString(data["Name"]);
    }
    if (data["NextMarker"] !== undefined) {
      contents.NextMarker = expectString(data["NextMarker"]);
    }
    if (data["Prefix"] !== undefined) {
      contents.Prefix = expectString(data["Prefix"]);
    }
    return contents;
  };
  const de_ListObjectsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NoSuchBucket":
      case "com.amazonaws.s3#NoSuchBucket":
        throw await de_NoSuchBucketRes(parsedOutput);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  };
  const de_ListObjectsV2Command = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_ListObjectsV2CommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      RequestCharged: [, output.headers["x-amz-request-charged"]]
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data.CommonPrefixes === "") {
      contents.CommonPrefixes = [];
    } else if (data["CommonPrefixes"] !== undefined) {
      contents.CommonPrefixes = de_CommonPrefixList(getArrayIfSingleItem(data["CommonPrefixes"]));
    }
    if (data.Contents === "") {
      contents.Contents = [];
    } else if (data["Contents"] !== undefined) {
      contents.Contents = de_ObjectList(getArrayIfSingleItem(data["Contents"]));
    }
    if (data["ContinuationToken"] !== undefined) {
      contents.ContinuationToken = expectString(data["ContinuationToken"]);
    }
    if (data["Delimiter"] !== undefined) {
      contents.Delimiter = expectString(data["Delimiter"]);
    }
    if (data["EncodingType"] !== undefined) {
      contents.EncodingType = expectString(data["EncodingType"]);
    }
    if (data["IsTruncated"] !== undefined) {
      contents.IsTruncated = parseBoolean(data["IsTruncated"]);
    }
    if (data["KeyCount"] !== undefined) {
      contents.KeyCount = strictParseInt32(data["KeyCount"]);
    }
    if (data["MaxKeys"] !== undefined) {
      contents.MaxKeys = strictParseInt32(data["MaxKeys"]);
    }
    if (data["Name"] !== undefined) {
      contents.Name = expectString(data["Name"]);
    }
    if (data["NextContinuationToken"] !== undefined) {
      contents.NextContinuationToken = expectString(data["NextContinuationToken"]);
    }
    if (data["Prefix"] !== undefined) {
      contents.Prefix = expectString(data["Prefix"]);
    }
    if (data["StartAfter"] !== undefined) {
      contents.StartAfter = expectString(data["StartAfter"]);
    }
    return contents;
  };
  const de_ListObjectsV2CommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NoSuchBucket":
      case "com.amazonaws.s3#NoSuchBucket":
        throw await de_NoSuchBucketRes(parsedOutput);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  };
  const de_ListObjectVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_ListObjectVersionsCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      RequestCharged: [, output.headers["x-amz-request-charged"]]
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data.CommonPrefixes === "") {
      contents.CommonPrefixes = [];
    } else if (data["CommonPrefixes"] !== undefined) {
      contents.CommonPrefixes = de_CommonPrefixList(getArrayIfSingleItem(data["CommonPrefixes"]));
    }
    if (data.DeleteMarker === "") {
      contents.DeleteMarkers = [];
    } else if (data["DeleteMarker"] !== undefined) {
      contents.DeleteMarkers = de_DeleteMarkers(getArrayIfSingleItem(data["DeleteMarker"]));
    }
    if (data["Delimiter"] !== undefined) {
      contents.Delimiter = expectString(data["Delimiter"]);
    }
    if (data["EncodingType"] !== undefined) {
      contents.EncodingType = expectString(data["EncodingType"]);
    }
    if (data["IsTruncated"] !== undefined) {
      contents.IsTruncated = parseBoolean(data["IsTruncated"]);
    }
    if (data["KeyMarker"] !== undefined) {
      contents.KeyMarker = expectString(data["KeyMarker"]);
    }
    if (data["MaxKeys"] !== undefined) {
      contents.MaxKeys = strictParseInt32(data["MaxKeys"]);
    }
    if (data["Name"] !== undefined) {
      contents.Name = expectString(data["Name"]);
    }
    if (data["NextKeyMarker"] !== undefined) {
      contents.NextKeyMarker = expectString(data["NextKeyMarker"]);
    }
    if (data["NextVersionIdMarker"] !== undefined) {
      contents.NextVersionIdMarker = expectString(data["NextVersionIdMarker"]);
    }
    if (data["Prefix"] !== undefined) {
      contents.Prefix = expectString(data["Prefix"]);
    }
    if (data["VersionIdMarker"] !== undefined) {
      contents.VersionIdMarker = expectString(data["VersionIdMarker"]);
    }
    if (data.Version === "") {
      contents.Versions = [];
    } else if (data["Version"] !== undefined) {
      contents.Versions = de_ObjectVersionList(getArrayIfSingleItem(data["Version"]));
    }
    return contents;
  };
  const de_ListObjectVersionsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_ListPartsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_ListPartsCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      AbortDate: [() => void 0 !== output.headers["x-amz-abort-date"], () => expectNonNull(parseRfc7231DateTime(output.headers["x-amz-abort-date"]))],
      AbortRuleId: [, output.headers["x-amz-abort-rule-id"]],
      RequestCharged: [, output.headers["x-amz-request-charged"]]
    });
    const data = expectNonNull(expectObject(await parseBody(output.body, context)), "body");
    if (data["Bucket"] !== undefined) {
      contents.Bucket = expectString(data["Bucket"]);
    }
    if (data["ChecksumAlgorithm"] !== undefined) {
      contents.ChecksumAlgorithm = expectString(data["ChecksumAlgorithm"]);
    }
    if (data["Initiator"] !== undefined) {
      contents.Initiator = de_Initiator(data["Initiator"]);
    }
    if (data["IsTruncated"] !== undefined) {
      contents.IsTruncated = parseBoolean(data["IsTruncated"]);
    }
    if (data["Key"] !== undefined) {
      contents.Key = expectString(data["Key"]);
    }
    if (data["MaxParts"] !== undefined) {
      contents.MaxParts = strictParseInt32(data["MaxParts"]);
    }
    if (data["NextPartNumberMarker"] !== undefined) {
      contents.NextPartNumberMarker = expectString(data["NextPartNumberMarker"]);
    }
    if (data["Owner"] !== undefined) {
      contents.Owner = de_Owner(data["Owner"]);
    }
    if (data["PartNumberMarker"] !== undefined) {
      contents.PartNumberMarker = expectString(data["PartNumberMarker"]);
    }
    if (data.Part === "") {
      contents.Parts = [];
    } else if (data["Part"] !== undefined) {
      contents.Parts = de_Parts(getArrayIfSingleItem(data["Part"]));
    }
    if (data["StorageClass"] !== undefined) {
      contents.StorageClass = expectString(data["StorageClass"]);
    }
    if (data["UploadId"] !== undefined) {
      contents.UploadId = expectString(data["UploadId"]);
    }
    return contents;
  };
  const de_ListPartsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutBucketAccelerateConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketAccelerateConfigurationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutBucketAccelerateConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutBucketAclCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketAclCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutBucketAclCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutBucketAnalyticsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketAnalyticsConfigurationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutBucketAnalyticsConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutBucketCorsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketCorsCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutBucketCorsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutBucketEncryptionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketEncryptionCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutBucketEncryptionCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutBucketIntelligentTieringConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketIntelligentTieringConfigurationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutBucketIntelligentTieringConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutBucketInventoryConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketInventoryConfigurationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutBucketInventoryConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutBucketLifecycleConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketLifecycleConfigurationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutBucketLifecycleConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutBucketLoggingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketLoggingCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutBucketLoggingCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutBucketMetricsConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketMetricsConfigurationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutBucketMetricsConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutBucketNotificationConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketNotificationConfigurationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutBucketNotificationConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutBucketOwnershipControlsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketOwnershipControlsCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutBucketOwnershipControlsCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutBucketPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketPolicyCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutBucketPolicyCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutBucketReplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketReplicationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutBucketReplicationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutBucketRequestPaymentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketRequestPaymentCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutBucketRequestPaymentCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutBucketTaggingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketTaggingCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutBucketTaggingCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutBucketVersioningCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketVersioningCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutBucketVersioningCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutBucketWebsiteCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutBucketWebsiteCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutBucketWebsiteCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutObjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutObjectCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      Expiration: [, output.headers["x-amz-expiration"]],
      ETag: [, output.headers["etag"]],
      ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
      ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
      ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
      ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
      ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
      VersionId: [, output.headers["x-amz-version-id"]],
      SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
      SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
      SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
      SSEKMSEncryptionContext: [, output.headers["x-amz-server-side-encryption-context"]],
      BucketKeyEnabled: [() => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"], () => parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])],
      RequestCharged: [, output.headers["x-amz-request-charged"]]
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutObjectCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutObjectAclCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutObjectAclCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      RequestCharged: [, output.headers["x-amz-request-charged"]]
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutObjectAclCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "NoSuchKey":
      case "com.amazonaws.s3#NoSuchKey":
        throw await de_NoSuchKeyRes(parsedOutput);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  };
  const de_PutObjectLegalHoldCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutObjectLegalHoldCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      RequestCharged: [, output.headers["x-amz-request-charged"]]
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutObjectLegalHoldCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutObjectLockConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutObjectLockConfigurationCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      RequestCharged: [, output.headers["x-amz-request-charged"]]
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutObjectLockConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutObjectRetentionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutObjectRetentionCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      RequestCharged: [, output.headers["x-amz-request-charged"]]
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutObjectRetentionCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutObjectTaggingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutObjectTaggingCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      VersionId: [, output.headers["x-amz-version-id"]]
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutObjectTaggingCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_PutPublicAccessBlockCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_PutPublicAccessBlockCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_PutPublicAccessBlockCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_RestoreObjectCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_RestoreObjectCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      RequestCharged: [, output.headers["x-amz-request-charged"]],
      RestoreOutputPath: [, output.headers["x-amz-restore-output-path"]]
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_RestoreObjectCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    switch (errorCode) {
      case "ObjectAlreadyInActiveTierError":
      case "com.amazonaws.s3#ObjectAlreadyInActiveTierError":
        throw await de_ObjectAlreadyInActiveTierErrorRes(parsedOutput);
      default:
        const parsedBody = parsedOutput.body;
        return throwDefaultError({
          output,
          parsedBody,
          errorCode
        });
    }
  };
  const de_SelectObjectContentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_SelectObjectContentCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    const data = output.body;
    contents.Payload = de_SelectObjectContentEventStream(data, context);
    return contents;
  };
  const de_SelectObjectContentCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_UploadPartCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_UploadPartCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
      ETag: [, output.headers["etag"]],
      ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
      ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
      ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
      ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
      SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
      SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
      SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
      BucketKeyEnabled: [() => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"], () => parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])],
      RequestCharged: [, output.headers["x-amz-request-charged"]]
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_UploadPartCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_UploadPartCopyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_UploadPartCopyCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output),
      CopySourceVersionId: [, output.headers["x-amz-copy-source-version-id"]],
      ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
      SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
      SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
      SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
      BucketKeyEnabled: [() => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"], () => parseBoolean(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])],
      RequestCharged: [, output.headers["x-amz-request-charged"]]
    });
    const data = expectObject(await parseBody(output.body, context));
    contents.CopyPartResult = de_CopyPartResult(data);
    return contents;
  };
  const de_UploadPartCopyCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const de_WriteGetObjectResponseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
      return de_WriteGetObjectResponseCommandError(output, context);
    }
    const contents = map({
      $metadata: deserializeMetadata(output)
    });
    await collectBody(output.body, context);
    return contents;
  };
  const de_WriteGetObjectResponseCommandError = async (output, context) => {
    const parsedOutput = {
      ...output,
      body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
      output,
      parsedBody,
      errorCode
    });
  };
  const throwDefaultError = withBaseException(S3ServiceException);
  const de_BucketAlreadyExistsRes = async (parsedOutput, context) => {
    const contents = map({});
    parsedOutput.body;
    const exception = new BucketAlreadyExists({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return decorateServiceException(exception, parsedOutput.body);
  };
  const de_BucketAlreadyOwnedByYouRes = async (parsedOutput, context) => {
    const contents = map({});
    parsedOutput.body;
    const exception = new BucketAlreadyOwnedByYou({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return decorateServiceException(exception, parsedOutput.body);
  };
  const de_InvalidObjectStateRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data["AccessTier"] !== undefined) {
      contents.AccessTier = expectString(data["AccessTier"]);
    }
    if (data["StorageClass"] !== undefined) {
      contents.StorageClass = expectString(data["StorageClass"]);
    }
    const exception = new InvalidObjectState({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return decorateServiceException(exception, parsedOutput.body);
  };
  const de_NoSuchBucketRes = async (parsedOutput, context) => {
    const contents = map({});
    parsedOutput.body;
    const exception = new NoSuchBucket({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return decorateServiceException(exception, parsedOutput.body);
  };
  const de_NoSuchKeyRes = async (parsedOutput, context) => {
    const contents = map({});
    parsedOutput.body;
    const exception = new NoSuchKey({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return decorateServiceException(exception, parsedOutput.body);
  };
  const de_NoSuchUploadRes = async (parsedOutput, context) => {
    const contents = map({});
    parsedOutput.body;
    const exception = new NoSuchUpload({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return decorateServiceException(exception, parsedOutput.body);
  };
  const de_NotFoundRes = async (parsedOutput, context) => {
    const contents = map({});
    parsedOutput.body;
    const exception = new NotFound({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return decorateServiceException(exception, parsedOutput.body);
  };
  const de_ObjectAlreadyInActiveTierErrorRes = async (parsedOutput, context) => {
    const contents = map({});
    parsedOutput.body;
    const exception = new ObjectAlreadyInActiveTierError({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return decorateServiceException(exception, parsedOutput.body);
  };
  const de_ObjectNotInActiveTierErrorRes = async (parsedOutput, context) => {
    const contents = map({});
    parsedOutput.body;
    const exception = new ObjectNotInActiveTierError({
      $metadata: deserializeMetadata(parsedOutput),
      ...contents
    });
    return decorateServiceException(exception, parsedOutput.body);
  };
  const de_SelectObjectContentEventStream = (output, context) => {
    return context.eventStreamMarshaller.deserialize(output, async event => {
      if (event["Records"] != null) {
        return {
          Records: await de_RecordsEvent_event(event["Records"])
        };
      }
      if (event["Stats"] != null) {
        return {
          Stats: await de_StatsEvent_event(event["Stats"], context)
        };
      }
      if (event["Progress"] != null) {
        return {
          Progress: await de_ProgressEvent_event(event["Progress"], context)
        };
      }
      if (event["Cont"] != null) {
        return {
          Cont: await de_ContinuationEvent_event(event["Cont"], context)
        };
      }
      if (event["End"] != null) {
        return {
          End: await de_EndEvent_event(event["End"], context)
        };
      }
      return {
        $unknown: output
      };
    });
  };
  const de_ContinuationEvent_event = async (output, context) => {
    const contents = {};
    await parseBody(output.body, context);
    Object.assign(contents, de_ContinuationEvent());
    return contents;
  };
  const de_EndEvent_event = async (output, context) => {
    const contents = {};
    await parseBody(output.body, context);
    Object.assign(contents, de_EndEvent());
    return contents;
  };
  const de_ProgressEvent_event = async (output, context) => {
    const contents = {};
    const data = await parseBody(output.body, context);
    contents.Details = de_Progress(data);
    return contents;
  };
  const de_RecordsEvent_event = async (output, context) => {
    const contents = {};
    contents.Payload = output.body;
    return contents;
  };
  const de_StatsEvent_event = async (output, context) => {
    const contents = {};
    const data = await parseBody(output.body, context);
    contents.Details = de_Stats(data);
    return contents;
  };
  const se_AbortIncompleteMultipartUpload = (input, context) => {
    const bodyNode = new XmlNode$1("AbortIncompleteMultipartUpload");
    if (input.DaysAfterInitiation != null) {
      const node = XmlNode$1.of("DaysAfterInitiation", String(input.DaysAfterInitiation)).withName("DaysAfterInitiation");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_AccelerateConfiguration = (input, context) => {
    const bodyNode = new XmlNode$1("AccelerateConfiguration");
    if (input.Status != null) {
      const node = XmlNode$1.of("BucketAccelerateStatus", input.Status).withName("Status");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_AccessControlPolicy = (input, context) => {
    const bodyNode = new XmlNode$1("AccessControlPolicy");
    if (input.Grants != null) {
      const nodes = se_Grants(input.Grants);
      const containerNode = new XmlNode$1("AccessControlList");
      nodes.map(node => {
        containerNode.addChildNode(node);
      });
      bodyNode.addChildNode(containerNode);
    }
    if (input.Owner != null) {
      const node = se_Owner(input.Owner).withName("Owner");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_AccessControlTranslation = (input, context) => {
    const bodyNode = new XmlNode$1("AccessControlTranslation");
    if (input.Owner != null) {
      const node = XmlNode$1.of("OwnerOverride", input.Owner).withName("Owner");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_AllowedHeaders = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = XmlNode$1.of("AllowedHeader", entry);
      return node.withName("member");
    });
  };
  const se_AllowedMethods = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = XmlNode$1.of("AllowedMethod", entry);
      return node.withName("member");
    });
  };
  const se_AllowedOrigins = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = XmlNode$1.of("AllowedOrigin", entry);
      return node.withName("member");
    });
  };
  const se_AnalyticsAndOperator = (input, context) => {
    const bodyNode = new XmlNode$1("AnalyticsAndOperator");
    if (input.Prefix != null) {
      const node = XmlNode$1.of("Prefix", input.Prefix).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    if (input.Tags != null) {
      const nodes = se_TagSet(input.Tags);
      nodes.map(node => {
        node = node.withName("Tag");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  const se_AnalyticsConfiguration = (input, context) => {
    const bodyNode = new XmlNode$1("AnalyticsConfiguration");
    if (input.Id != null) {
      const node = XmlNode$1.of("AnalyticsId", input.Id).withName("Id");
      bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
      const node = se_AnalyticsFilter(input.Filter).withName("Filter");
      bodyNode.addChildNode(node);
    }
    if (input.StorageClassAnalysis != null) {
      const node = se_StorageClassAnalysis(input.StorageClassAnalysis).withName("StorageClassAnalysis");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_AnalyticsExportDestination = (input, context) => {
    const bodyNode = new XmlNode$1("AnalyticsExportDestination");
    if (input.S3BucketDestination != null) {
      const node = se_AnalyticsS3BucketDestination(input.S3BucketDestination).withName("S3BucketDestination");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_AnalyticsFilter = (input, context) => {
    const bodyNode = new XmlNode$1("AnalyticsFilter");
    AnalyticsFilter.visit(input, {
      Prefix: value => {
        const node = XmlNode$1.of("Prefix", value).withName("Prefix");
        bodyNode.addChildNode(node);
      },
      Tag: value => {
        const node = se_Tag(value).withName("Tag");
        bodyNode.addChildNode(node);
      },
      And: value => {
        const node = se_AnalyticsAndOperator(value).withName("And");
        bodyNode.addChildNode(node);
      },
      _: (name, value) => {
        if (!(value instanceof XmlNode$1 || value instanceof XmlText)) {
          throw new Error("Unable to serialize unknown union members in XML.");
        }
        bodyNode.addChildNode(new XmlNode$1(name).addChildNode(value));
      }
    });
    return bodyNode;
  };
  const se_AnalyticsS3BucketDestination = (input, context) => {
    const bodyNode = new XmlNode$1("AnalyticsS3BucketDestination");
    if (input.Format != null) {
      const node = XmlNode$1.of("AnalyticsS3ExportFileFormat", input.Format).withName("Format");
      bodyNode.addChildNode(node);
    }
    if (input.BucketAccountId != null) {
      const node = XmlNode$1.of("AccountId", input.BucketAccountId).withName("BucketAccountId");
      bodyNode.addChildNode(node);
    }
    if (input.Bucket != null) {
      const node = XmlNode$1.of("BucketName", input.Bucket).withName("Bucket");
      bodyNode.addChildNode(node);
    }
    if (input.Prefix != null) {
      const node = XmlNode$1.of("Prefix", input.Prefix).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_BucketLifecycleConfiguration = (input, context) => {
    const bodyNode = new XmlNode$1("BucketLifecycleConfiguration");
    if (input.Rules != null) {
      const nodes = se_LifecycleRules(input.Rules);
      nodes.map(node => {
        node = node.withName("Rule");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  const se_BucketLoggingStatus = (input, context) => {
    const bodyNode = new XmlNode$1("BucketLoggingStatus");
    if (input.LoggingEnabled != null) {
      const node = se_LoggingEnabled(input.LoggingEnabled).withName("LoggingEnabled");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_CompletedMultipartUpload = (input, context) => {
    const bodyNode = new XmlNode$1("CompletedMultipartUpload");
    if (input.Parts != null) {
      const nodes = se_CompletedPartList(input.Parts);
      nodes.map(node => {
        node = node.withName("Part");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  const se_CompletedPart = (input, context) => {
    const bodyNode = new XmlNode$1("CompletedPart");
    if (input.ETag != null) {
      const node = XmlNode$1.of("ETag", input.ETag).withName("ETag");
      bodyNode.addChildNode(node);
    }
    if (input.ChecksumCRC32 != null) {
      const node = XmlNode$1.of("ChecksumCRC32", input.ChecksumCRC32).withName("ChecksumCRC32");
      bodyNode.addChildNode(node);
    }
    if (input.ChecksumCRC32C != null) {
      const node = XmlNode$1.of("ChecksumCRC32C", input.ChecksumCRC32C).withName("ChecksumCRC32C");
      bodyNode.addChildNode(node);
    }
    if (input.ChecksumSHA1 != null) {
      const node = XmlNode$1.of("ChecksumSHA1", input.ChecksumSHA1).withName("ChecksumSHA1");
      bodyNode.addChildNode(node);
    }
    if (input.ChecksumSHA256 != null) {
      const node = XmlNode$1.of("ChecksumSHA256", input.ChecksumSHA256).withName("ChecksumSHA256");
      bodyNode.addChildNode(node);
    }
    if (input.PartNumber != null) {
      const node = XmlNode$1.of("PartNumber", String(input.PartNumber)).withName("PartNumber");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_CompletedPartList = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = se_CompletedPart(entry);
      return node.withName("member");
    });
  };
  const se_Condition = (input, context) => {
    const bodyNode = new XmlNode$1("Condition");
    if (input.HttpErrorCodeReturnedEquals != null) {
      const node = XmlNode$1.of("HttpErrorCodeReturnedEquals", input.HttpErrorCodeReturnedEquals).withName("HttpErrorCodeReturnedEquals");
      bodyNode.addChildNode(node);
    }
    if (input.KeyPrefixEquals != null) {
      const node = XmlNode$1.of("KeyPrefixEquals", input.KeyPrefixEquals).withName("KeyPrefixEquals");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_CORSConfiguration = (input, context) => {
    const bodyNode = new XmlNode$1("CORSConfiguration");
    if (input.CORSRules != null) {
      const nodes = se_CORSRules(input.CORSRules);
      nodes.map(node => {
        node = node.withName("CORSRule");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  const se_CORSRule = (input, context) => {
    const bodyNode = new XmlNode$1("CORSRule");
    if (input.ID != null) {
      const node = XmlNode$1.of("ID", input.ID).withName("ID");
      bodyNode.addChildNode(node);
    }
    if (input.AllowedHeaders != null) {
      const nodes = se_AllowedHeaders(input.AllowedHeaders);
      nodes.map(node => {
        node = node.withName("AllowedHeader");
        bodyNode.addChildNode(node);
      });
    }
    if (input.AllowedMethods != null) {
      const nodes = se_AllowedMethods(input.AllowedMethods);
      nodes.map(node => {
        node = node.withName("AllowedMethod");
        bodyNode.addChildNode(node);
      });
    }
    if (input.AllowedOrigins != null) {
      const nodes = se_AllowedOrigins(input.AllowedOrigins);
      nodes.map(node => {
        node = node.withName("AllowedOrigin");
        bodyNode.addChildNode(node);
      });
    }
    if (input.ExposeHeaders != null) {
      const nodes = se_ExposeHeaders(input.ExposeHeaders);
      nodes.map(node => {
        node = node.withName("ExposeHeader");
        bodyNode.addChildNode(node);
      });
    }
    if (input.MaxAgeSeconds != null) {
      const node = XmlNode$1.of("MaxAgeSeconds", String(input.MaxAgeSeconds)).withName("MaxAgeSeconds");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_CORSRules = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = se_CORSRule(entry);
      return node.withName("member");
    });
  };
  const se_CreateBucketConfiguration = (input, context) => {
    const bodyNode = new XmlNode$1("CreateBucketConfiguration");
    if (input.LocationConstraint != null) {
      const node = XmlNode$1.of("BucketLocationConstraint", input.LocationConstraint).withName("LocationConstraint");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_CSVInput = (input, context) => {
    const bodyNode = new XmlNode$1("CSVInput");
    if (input.FileHeaderInfo != null) {
      const node = XmlNode$1.of("FileHeaderInfo", input.FileHeaderInfo).withName("FileHeaderInfo");
      bodyNode.addChildNode(node);
    }
    if (input.Comments != null) {
      const node = XmlNode$1.of("Comments", input.Comments).withName("Comments");
      bodyNode.addChildNode(node);
    }
    if (input.QuoteEscapeCharacter != null) {
      const node = XmlNode$1.of("QuoteEscapeCharacter", input.QuoteEscapeCharacter).withName("QuoteEscapeCharacter");
      bodyNode.addChildNode(node);
    }
    if (input.RecordDelimiter != null) {
      const node = XmlNode$1.of("RecordDelimiter", input.RecordDelimiter).withName("RecordDelimiter");
      bodyNode.addChildNode(node);
    }
    if (input.FieldDelimiter != null) {
      const node = XmlNode$1.of("FieldDelimiter", input.FieldDelimiter).withName("FieldDelimiter");
      bodyNode.addChildNode(node);
    }
    if (input.QuoteCharacter != null) {
      const node = XmlNode$1.of("QuoteCharacter", input.QuoteCharacter).withName("QuoteCharacter");
      bodyNode.addChildNode(node);
    }
    if (input.AllowQuotedRecordDelimiter != null) {
      const node = XmlNode$1.of("AllowQuotedRecordDelimiter", String(input.AllowQuotedRecordDelimiter)).withName("AllowQuotedRecordDelimiter");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_CSVOutput = (input, context) => {
    const bodyNode = new XmlNode$1("CSVOutput");
    if (input.QuoteFields != null) {
      const node = XmlNode$1.of("QuoteFields", input.QuoteFields).withName("QuoteFields");
      bodyNode.addChildNode(node);
    }
    if (input.QuoteEscapeCharacter != null) {
      const node = XmlNode$1.of("QuoteEscapeCharacter", input.QuoteEscapeCharacter).withName("QuoteEscapeCharacter");
      bodyNode.addChildNode(node);
    }
    if (input.RecordDelimiter != null) {
      const node = XmlNode$1.of("RecordDelimiter", input.RecordDelimiter).withName("RecordDelimiter");
      bodyNode.addChildNode(node);
    }
    if (input.FieldDelimiter != null) {
      const node = XmlNode$1.of("FieldDelimiter", input.FieldDelimiter).withName("FieldDelimiter");
      bodyNode.addChildNode(node);
    }
    if (input.QuoteCharacter != null) {
      const node = XmlNode$1.of("QuoteCharacter", input.QuoteCharacter).withName("QuoteCharacter");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_DefaultRetention = (input, context) => {
    const bodyNode = new XmlNode$1("DefaultRetention");
    if (input.Mode != null) {
      const node = XmlNode$1.of("ObjectLockRetentionMode", input.Mode).withName("Mode");
      bodyNode.addChildNode(node);
    }
    if (input.Days != null) {
      const node = XmlNode$1.of("Days", String(input.Days)).withName("Days");
      bodyNode.addChildNode(node);
    }
    if (input.Years != null) {
      const node = XmlNode$1.of("Years", String(input.Years)).withName("Years");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_Delete = (input, context) => {
    const bodyNode = new XmlNode$1("Delete");
    if (input.Objects != null) {
      const nodes = se_ObjectIdentifierList(input.Objects);
      nodes.map(node => {
        node = node.withName("Object");
        bodyNode.addChildNode(node);
      });
    }
    if (input.Quiet != null) {
      const node = XmlNode$1.of("Quiet", String(input.Quiet)).withName("Quiet");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_DeleteMarkerReplication = (input, context) => {
    const bodyNode = new XmlNode$1("DeleteMarkerReplication");
    if (input.Status != null) {
      const node = XmlNode$1.of("DeleteMarkerReplicationStatus", input.Status).withName("Status");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_Destination = (input, context) => {
    const bodyNode = new XmlNode$1("Destination");
    if (input.Bucket != null) {
      const node = XmlNode$1.of("BucketName", input.Bucket).withName("Bucket");
      bodyNode.addChildNode(node);
    }
    if (input.Account != null) {
      const node = XmlNode$1.of("AccountId", input.Account).withName("Account");
      bodyNode.addChildNode(node);
    }
    if (input.StorageClass != null) {
      const node = XmlNode$1.of("StorageClass", input.StorageClass).withName("StorageClass");
      bodyNode.addChildNode(node);
    }
    if (input.AccessControlTranslation != null) {
      const node = se_AccessControlTranslation(input.AccessControlTranslation).withName("AccessControlTranslation");
      bodyNode.addChildNode(node);
    }
    if (input.EncryptionConfiguration != null) {
      const node = se_EncryptionConfiguration(input.EncryptionConfiguration).withName("EncryptionConfiguration");
      bodyNode.addChildNode(node);
    }
    if (input.ReplicationTime != null) {
      const node = se_ReplicationTime(input.ReplicationTime).withName("ReplicationTime");
      bodyNode.addChildNode(node);
    }
    if (input.Metrics != null) {
      const node = se_Metrics(input.Metrics).withName("Metrics");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_Encryption = (input, context) => {
    const bodyNode = new XmlNode$1("Encryption");
    if (input.EncryptionType != null) {
      const node = XmlNode$1.of("ServerSideEncryption", input.EncryptionType).withName("EncryptionType");
      bodyNode.addChildNode(node);
    }
    if (input.KMSKeyId != null) {
      const node = XmlNode$1.of("SSEKMSKeyId", input.KMSKeyId).withName("KMSKeyId");
      bodyNode.addChildNode(node);
    }
    if (input.KMSContext != null) {
      const node = XmlNode$1.of("KMSContext", input.KMSContext).withName("KMSContext");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_EncryptionConfiguration = (input, context) => {
    const bodyNode = new XmlNode$1("EncryptionConfiguration");
    if (input.ReplicaKmsKeyID != null) {
      const node = XmlNode$1.of("ReplicaKmsKeyID", input.ReplicaKmsKeyID).withName("ReplicaKmsKeyID");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_ErrorDocument = (input, context) => {
    const bodyNode = new XmlNode$1("ErrorDocument");
    if (input.Key != null) {
      const node = XmlNode$1.of("ObjectKey", input.Key).withName("Key");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_EventBridgeConfiguration = (input, context) => {
    const bodyNode = new XmlNode$1("EventBridgeConfiguration");
    return bodyNode;
  };
  const se_EventList = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = XmlNode$1.of("Event", entry);
      return node.withName("member");
    });
  };
  const se_ExistingObjectReplication = (input, context) => {
    const bodyNode = new XmlNode$1("ExistingObjectReplication");
    if (input.Status != null) {
      const node = XmlNode$1.of("ExistingObjectReplicationStatus", input.Status).withName("Status");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_ExposeHeaders = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = XmlNode$1.of("ExposeHeader", entry);
      return node.withName("member");
    });
  };
  const se_FilterRule = (input, context) => {
    const bodyNode = new XmlNode$1("FilterRule");
    if (input.Name != null) {
      const node = XmlNode$1.of("FilterRuleName", input.Name).withName("Name");
      bodyNode.addChildNode(node);
    }
    if (input.Value != null) {
      const node = XmlNode$1.of("FilterRuleValue", input.Value).withName("Value");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_FilterRuleList = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = se_FilterRule(entry);
      return node.withName("member");
    });
  };
  const se_GlacierJobParameters = (input, context) => {
    const bodyNode = new XmlNode$1("GlacierJobParameters");
    if (input.Tier != null) {
      const node = XmlNode$1.of("Tier", input.Tier).withName("Tier");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_Grant = (input, context) => {
    const bodyNode = new XmlNode$1("Grant");
    if (input.Grantee != null) {
      const node = se_Grantee(input.Grantee).withName("Grantee");
      node.addAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
      bodyNode.addChildNode(node);
    }
    if (input.Permission != null) {
      const node = XmlNode$1.of("Permission", input.Permission).withName("Permission");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_Grantee = (input, context) => {
    const bodyNode = new XmlNode$1("Grantee");
    if (input.DisplayName != null) {
      const node = XmlNode$1.of("DisplayName", input.DisplayName).withName("DisplayName");
      bodyNode.addChildNode(node);
    }
    if (input.EmailAddress != null) {
      const node = XmlNode$1.of("EmailAddress", input.EmailAddress).withName("EmailAddress");
      bodyNode.addChildNode(node);
    }
    if (input.ID != null) {
      const node = XmlNode$1.of("ID", input.ID).withName("ID");
      bodyNode.addChildNode(node);
    }
    if (input.URI != null) {
      const node = XmlNode$1.of("URI", input.URI).withName("URI");
      bodyNode.addChildNode(node);
    }
    if (input.Type != null) {
      bodyNode.addAttribute("xsi:type", input.Type);
    }
    return bodyNode;
  };
  const se_Grants = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = se_Grant(entry);
      return node.withName("Grant");
    });
  };
  const se_IndexDocument = (input, context) => {
    const bodyNode = new XmlNode$1("IndexDocument");
    if (input.Suffix != null) {
      const node = XmlNode$1.of("Suffix", input.Suffix).withName("Suffix");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_InputSerialization = (input, context) => {
    const bodyNode = new XmlNode$1("InputSerialization");
    if (input.CSV != null) {
      const node = se_CSVInput(input.CSV).withName("CSV");
      bodyNode.addChildNode(node);
    }
    if (input.CompressionType != null) {
      const node = XmlNode$1.of("CompressionType", input.CompressionType).withName("CompressionType");
      bodyNode.addChildNode(node);
    }
    if (input.JSON != null) {
      const node = se_JSONInput(input.JSON).withName("JSON");
      bodyNode.addChildNode(node);
    }
    if (input.Parquet != null) {
      const node = se_ParquetInput(input.Parquet).withName("Parquet");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_IntelligentTieringAndOperator = (input, context) => {
    const bodyNode = new XmlNode$1("IntelligentTieringAndOperator");
    if (input.Prefix != null) {
      const node = XmlNode$1.of("Prefix", input.Prefix).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    if (input.Tags != null) {
      const nodes = se_TagSet(input.Tags);
      nodes.map(node => {
        node = node.withName("Tag");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  const se_IntelligentTieringConfiguration = (input, context) => {
    const bodyNode = new XmlNode$1("IntelligentTieringConfiguration");
    if (input.Id != null) {
      const node = XmlNode$1.of("IntelligentTieringId", input.Id).withName("Id");
      bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
      const node = se_IntelligentTieringFilter(input.Filter).withName("Filter");
      bodyNode.addChildNode(node);
    }
    if (input.Status != null) {
      const node = XmlNode$1.of("IntelligentTieringStatus", input.Status).withName("Status");
      bodyNode.addChildNode(node);
    }
    if (input.Tierings != null) {
      const nodes = se_TieringList(input.Tierings);
      nodes.map(node => {
        node = node.withName("Tiering");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  const se_IntelligentTieringFilter = (input, context) => {
    const bodyNode = new XmlNode$1("IntelligentTieringFilter");
    if (input.Prefix != null) {
      const node = XmlNode$1.of("Prefix", input.Prefix).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    if (input.Tag != null) {
      const node = se_Tag(input.Tag).withName("Tag");
      bodyNode.addChildNode(node);
    }
    if (input.And != null) {
      const node = se_IntelligentTieringAndOperator(input.And).withName("And");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_InventoryConfiguration = (input, context) => {
    const bodyNode = new XmlNode$1("InventoryConfiguration");
    if (input.Destination != null) {
      const node = se_InventoryDestination(input.Destination).withName("Destination");
      bodyNode.addChildNode(node);
    }
    if (input.IsEnabled != null) {
      const node = XmlNode$1.of("IsEnabled", String(input.IsEnabled)).withName("IsEnabled");
      bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
      const node = se_InventoryFilter(input.Filter).withName("Filter");
      bodyNode.addChildNode(node);
    }
    if (input.Id != null) {
      const node = XmlNode$1.of("InventoryId", input.Id).withName("Id");
      bodyNode.addChildNode(node);
    }
    if (input.IncludedObjectVersions != null) {
      const node = XmlNode$1.of("InventoryIncludedObjectVersions", input.IncludedObjectVersions).withName("IncludedObjectVersions");
      bodyNode.addChildNode(node);
    }
    if (input.OptionalFields != null) {
      const nodes = se_InventoryOptionalFields(input.OptionalFields);
      const containerNode = new XmlNode$1("OptionalFields");
      nodes.map(node => {
        containerNode.addChildNode(node);
      });
      bodyNode.addChildNode(containerNode);
    }
    if (input.Schedule != null) {
      const node = se_InventorySchedule(input.Schedule).withName("Schedule");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_InventoryDestination = (input, context) => {
    const bodyNode = new XmlNode$1("InventoryDestination");
    if (input.S3BucketDestination != null) {
      const node = se_InventoryS3BucketDestination(input.S3BucketDestination).withName("S3BucketDestination");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_InventoryEncryption = (input, context) => {
    const bodyNode = new XmlNode$1("InventoryEncryption");
    if (input.SSES3 != null) {
      const node = se_SSES3(input.SSES3).withName("SSE-S3");
      bodyNode.addChildNode(node);
    }
    if (input.SSEKMS != null) {
      const node = se_SSEKMS(input.SSEKMS).withName("SSE-KMS");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_InventoryFilter = (input, context) => {
    const bodyNode = new XmlNode$1("InventoryFilter");
    if (input.Prefix != null) {
      const node = XmlNode$1.of("Prefix", input.Prefix).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_InventoryOptionalFields = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = XmlNode$1.of("InventoryOptionalField", entry);
      return node.withName("Field");
    });
  };
  const se_InventoryS3BucketDestination = (input, context) => {
    const bodyNode = new XmlNode$1("InventoryS3BucketDestination");
    if (input.AccountId != null) {
      const node = XmlNode$1.of("AccountId", input.AccountId).withName("AccountId");
      bodyNode.addChildNode(node);
    }
    if (input.Bucket != null) {
      const node = XmlNode$1.of("BucketName", input.Bucket).withName("Bucket");
      bodyNode.addChildNode(node);
    }
    if (input.Format != null) {
      const node = XmlNode$1.of("InventoryFormat", input.Format).withName("Format");
      bodyNode.addChildNode(node);
    }
    if (input.Prefix != null) {
      const node = XmlNode$1.of("Prefix", input.Prefix).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    if (input.Encryption != null) {
      const node = se_InventoryEncryption(input.Encryption).withName("Encryption");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_InventorySchedule = (input, context) => {
    const bodyNode = new XmlNode$1("InventorySchedule");
    if (input.Frequency != null) {
      const node = XmlNode$1.of("InventoryFrequency", input.Frequency).withName("Frequency");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_JSONInput = (input, context) => {
    const bodyNode = new XmlNode$1("JSONInput");
    if (input.Type != null) {
      const node = XmlNode$1.of("JSONType", input.Type).withName("Type");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_JSONOutput = (input, context) => {
    const bodyNode = new XmlNode$1("JSONOutput");
    if (input.RecordDelimiter != null) {
      const node = XmlNode$1.of("RecordDelimiter", input.RecordDelimiter).withName("RecordDelimiter");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_LambdaFunctionConfiguration = (input, context) => {
    const bodyNode = new XmlNode$1("LambdaFunctionConfiguration");
    if (input.Id != null) {
      const node = XmlNode$1.of("NotificationId", input.Id).withName("Id");
      bodyNode.addChildNode(node);
    }
    if (input.LambdaFunctionArn != null) {
      const node = XmlNode$1.of("LambdaFunctionArn", input.LambdaFunctionArn).withName("CloudFunction");
      bodyNode.addChildNode(node);
    }
    if (input.Events != null) {
      const nodes = se_EventList(input.Events);
      nodes.map(node => {
        node = node.withName("Event");
        bodyNode.addChildNode(node);
      });
    }
    if (input.Filter != null) {
      const node = se_NotificationConfigurationFilter(input.Filter).withName("Filter");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_LambdaFunctionConfigurationList = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = se_LambdaFunctionConfiguration(entry);
      return node.withName("member");
    });
  };
  const se_LifecycleExpiration = (input, context) => {
    const bodyNode = new XmlNode$1("LifecycleExpiration");
    if (input.Date != null) {
      const node = XmlNode$1.of("Date", (input.Date.toISOString().split(".")[0] + "Z").toString()).withName("Date");
      bodyNode.addChildNode(node);
    }
    if (input.Days != null) {
      const node = XmlNode$1.of("Days", String(input.Days)).withName("Days");
      bodyNode.addChildNode(node);
    }
    if (input.ExpiredObjectDeleteMarker != null) {
      const node = XmlNode$1.of("ExpiredObjectDeleteMarker", String(input.ExpiredObjectDeleteMarker)).withName("ExpiredObjectDeleteMarker");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_LifecycleRule = (input, context) => {
    const bodyNode = new XmlNode$1("LifecycleRule");
    if (input.Expiration != null) {
      const node = se_LifecycleExpiration(input.Expiration).withName("Expiration");
      bodyNode.addChildNode(node);
    }
    if (input.ID != null) {
      const node = XmlNode$1.of("ID", input.ID).withName("ID");
      bodyNode.addChildNode(node);
    }
    if (input.Prefix != null) {
      const node = XmlNode$1.of("Prefix", input.Prefix).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
      const node = se_LifecycleRuleFilter(input.Filter).withName("Filter");
      bodyNode.addChildNode(node);
    }
    if (input.Status != null) {
      const node = XmlNode$1.of("ExpirationStatus", input.Status).withName("Status");
      bodyNode.addChildNode(node);
    }
    if (input.Transitions != null) {
      const nodes = se_TransitionList(input.Transitions);
      nodes.map(node => {
        node = node.withName("Transition");
        bodyNode.addChildNode(node);
      });
    }
    if (input.NoncurrentVersionTransitions != null) {
      const nodes = se_NoncurrentVersionTransitionList(input.NoncurrentVersionTransitions);
      nodes.map(node => {
        node = node.withName("NoncurrentVersionTransition");
        bodyNode.addChildNode(node);
      });
    }
    if (input.NoncurrentVersionExpiration != null) {
      const node = se_NoncurrentVersionExpiration(input.NoncurrentVersionExpiration).withName("NoncurrentVersionExpiration");
      bodyNode.addChildNode(node);
    }
    if (input.AbortIncompleteMultipartUpload != null) {
      const node = se_AbortIncompleteMultipartUpload(input.AbortIncompleteMultipartUpload).withName("AbortIncompleteMultipartUpload");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_LifecycleRuleAndOperator = (input, context) => {
    const bodyNode = new XmlNode$1("LifecycleRuleAndOperator");
    if (input.Prefix != null) {
      const node = XmlNode$1.of("Prefix", input.Prefix).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    if (input.Tags != null) {
      const nodes = se_TagSet(input.Tags);
      nodes.map(node => {
        node = node.withName("Tag");
        bodyNode.addChildNode(node);
      });
    }
    if (input.ObjectSizeGreaterThan != null) {
      const node = XmlNode$1.of("ObjectSizeGreaterThanBytes", String(input.ObjectSizeGreaterThan)).withName("ObjectSizeGreaterThan");
      bodyNode.addChildNode(node);
    }
    if (input.ObjectSizeLessThan != null) {
      const node = XmlNode$1.of("ObjectSizeLessThanBytes", String(input.ObjectSizeLessThan)).withName("ObjectSizeLessThan");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_LifecycleRuleFilter = (input, context) => {
    const bodyNode = new XmlNode$1("LifecycleRuleFilter");
    LifecycleRuleFilter.visit(input, {
      Prefix: value => {
        const node = XmlNode$1.of("Prefix", value).withName("Prefix");
        bodyNode.addChildNode(node);
      },
      Tag: value => {
        const node = se_Tag(value).withName("Tag");
        bodyNode.addChildNode(node);
      },
      ObjectSizeGreaterThan: value => {
        const node = XmlNode$1.of("ObjectSizeGreaterThanBytes", String(value)).withName("ObjectSizeGreaterThan");
        bodyNode.addChildNode(node);
      },
      ObjectSizeLessThan: value => {
        const node = XmlNode$1.of("ObjectSizeLessThanBytes", String(value)).withName("ObjectSizeLessThan");
        bodyNode.addChildNode(node);
      },
      And: value => {
        const node = se_LifecycleRuleAndOperator(value).withName("And");
        bodyNode.addChildNode(node);
      },
      _: (name, value) => {
        if (!(value instanceof XmlNode$1 || value instanceof XmlText)) {
          throw new Error("Unable to serialize unknown union members in XML.");
        }
        bodyNode.addChildNode(new XmlNode$1(name).addChildNode(value));
      }
    });
    return bodyNode;
  };
  const se_LifecycleRules = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = se_LifecycleRule(entry);
      return node.withName("member");
    });
  };
  const se_LoggingEnabled = (input, context) => {
    const bodyNode = new XmlNode$1("LoggingEnabled");
    if (input.TargetBucket != null) {
      const node = XmlNode$1.of("TargetBucket", input.TargetBucket).withName("TargetBucket");
      bodyNode.addChildNode(node);
    }
    if (input.TargetGrants != null) {
      const nodes = se_TargetGrants(input.TargetGrants);
      const containerNode = new XmlNode$1("TargetGrants");
      nodes.map(node => {
        containerNode.addChildNode(node);
      });
      bodyNode.addChildNode(containerNode);
    }
    if (input.TargetPrefix != null) {
      const node = XmlNode$1.of("TargetPrefix", input.TargetPrefix).withName("TargetPrefix");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_MetadataEntry = (input, context) => {
    const bodyNode = new XmlNode$1("MetadataEntry");
    if (input.Name != null) {
      const node = XmlNode$1.of("MetadataKey", input.Name).withName("Name");
      bodyNode.addChildNode(node);
    }
    if (input.Value != null) {
      const node = XmlNode$1.of("MetadataValue", input.Value).withName("Value");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_Metrics = (input, context) => {
    const bodyNode = new XmlNode$1("Metrics");
    if (input.Status != null) {
      const node = XmlNode$1.of("MetricsStatus", input.Status).withName("Status");
      bodyNode.addChildNode(node);
    }
    if (input.EventThreshold != null) {
      const node = se_ReplicationTimeValue(input.EventThreshold).withName("EventThreshold");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_MetricsAndOperator = (input, context) => {
    const bodyNode = new XmlNode$1("MetricsAndOperator");
    if (input.Prefix != null) {
      const node = XmlNode$1.of("Prefix", input.Prefix).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    if (input.Tags != null) {
      const nodes = se_TagSet(input.Tags);
      nodes.map(node => {
        node = node.withName("Tag");
        bodyNode.addChildNode(node);
      });
    }
    if (input.AccessPointArn != null) {
      const node = XmlNode$1.of("AccessPointArn", input.AccessPointArn).withName("AccessPointArn");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_MetricsConfiguration = (input, context) => {
    const bodyNode = new XmlNode$1("MetricsConfiguration");
    if (input.Id != null) {
      const node = XmlNode$1.of("MetricsId", input.Id).withName("Id");
      bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
      const node = se_MetricsFilter(input.Filter).withName("Filter");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_MetricsFilter = (input, context) => {
    const bodyNode = new XmlNode$1("MetricsFilter");
    MetricsFilter.visit(input, {
      Prefix: value => {
        const node = XmlNode$1.of("Prefix", value).withName("Prefix");
        bodyNode.addChildNode(node);
      },
      Tag: value => {
        const node = se_Tag(value).withName("Tag");
        bodyNode.addChildNode(node);
      },
      AccessPointArn: value => {
        const node = XmlNode$1.of("AccessPointArn", value).withName("AccessPointArn");
        bodyNode.addChildNode(node);
      },
      And: value => {
        const node = se_MetricsAndOperator(value).withName("And");
        bodyNode.addChildNode(node);
      },
      _: (name, value) => {
        if (!(value instanceof XmlNode$1 || value instanceof XmlText)) {
          throw new Error("Unable to serialize unknown union members in XML.");
        }
        bodyNode.addChildNode(new XmlNode$1(name).addChildNode(value));
      }
    });
    return bodyNode;
  };
  const se_NoncurrentVersionExpiration = (input, context) => {
    const bodyNode = new XmlNode$1("NoncurrentVersionExpiration");
    if (input.NoncurrentDays != null) {
      const node = XmlNode$1.of("Days", String(input.NoncurrentDays)).withName("NoncurrentDays");
      bodyNode.addChildNode(node);
    }
    if (input.NewerNoncurrentVersions != null) {
      const node = XmlNode$1.of("VersionCount", String(input.NewerNoncurrentVersions)).withName("NewerNoncurrentVersions");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_NoncurrentVersionTransition = (input, context) => {
    const bodyNode = new XmlNode$1("NoncurrentVersionTransition");
    if (input.NoncurrentDays != null) {
      const node = XmlNode$1.of("Days", String(input.NoncurrentDays)).withName("NoncurrentDays");
      bodyNode.addChildNode(node);
    }
    if (input.StorageClass != null) {
      const node = XmlNode$1.of("TransitionStorageClass", input.StorageClass).withName("StorageClass");
      bodyNode.addChildNode(node);
    }
    if (input.NewerNoncurrentVersions != null) {
      const node = XmlNode$1.of("VersionCount", String(input.NewerNoncurrentVersions)).withName("NewerNoncurrentVersions");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_NoncurrentVersionTransitionList = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = se_NoncurrentVersionTransition(entry);
      return node.withName("member");
    });
  };
  const se_NotificationConfiguration = (input, context) => {
    const bodyNode = new XmlNode$1("NotificationConfiguration");
    if (input.TopicConfigurations != null) {
      const nodes = se_TopicConfigurationList(input.TopicConfigurations);
      nodes.map(node => {
        node = node.withName("TopicConfiguration");
        bodyNode.addChildNode(node);
      });
    }
    if (input.QueueConfigurations != null) {
      const nodes = se_QueueConfigurationList(input.QueueConfigurations);
      nodes.map(node => {
        node = node.withName("QueueConfiguration");
        bodyNode.addChildNode(node);
      });
    }
    if (input.LambdaFunctionConfigurations != null) {
      const nodes = se_LambdaFunctionConfigurationList(input.LambdaFunctionConfigurations);
      nodes.map(node => {
        node = node.withName("CloudFunctionConfiguration");
        bodyNode.addChildNode(node);
      });
    }
    if (input.EventBridgeConfiguration != null) {
      const node = se_EventBridgeConfiguration(input.EventBridgeConfiguration).withName("EventBridgeConfiguration");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_NotificationConfigurationFilter = (input, context) => {
    const bodyNode = new XmlNode$1("NotificationConfigurationFilter");
    if (input.Key != null) {
      const node = se_S3KeyFilter(input.Key).withName("S3Key");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_ObjectIdentifier = (input, context) => {
    const bodyNode = new XmlNode$1("ObjectIdentifier");
    if (input.Key != null) {
      const node = XmlNode$1.of("ObjectKey", input.Key).withName("Key");
      bodyNode.addChildNode(node);
    }
    if (input.VersionId != null) {
      const node = XmlNode$1.of("ObjectVersionId", input.VersionId).withName("VersionId");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_ObjectIdentifierList = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = se_ObjectIdentifier(entry);
      return node.withName("member");
    });
  };
  const se_ObjectLockConfiguration = (input, context) => {
    const bodyNode = new XmlNode$1("ObjectLockConfiguration");
    if (input.ObjectLockEnabled != null) {
      const node = XmlNode$1.of("ObjectLockEnabled", input.ObjectLockEnabled).withName("ObjectLockEnabled");
      bodyNode.addChildNode(node);
    }
    if (input.Rule != null) {
      const node = se_ObjectLockRule(input.Rule).withName("Rule");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_ObjectLockLegalHold = (input, context) => {
    const bodyNode = new XmlNode$1("ObjectLockLegalHold");
    if (input.Status != null) {
      const node = XmlNode$1.of("ObjectLockLegalHoldStatus", input.Status).withName("Status");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_ObjectLockRetention = (input, context) => {
    const bodyNode = new XmlNode$1("ObjectLockRetention");
    if (input.Mode != null) {
      const node = XmlNode$1.of("ObjectLockRetentionMode", input.Mode).withName("Mode");
      bodyNode.addChildNode(node);
    }
    if (input.RetainUntilDate != null) {
      const node = XmlNode$1.of("Date", (input.RetainUntilDate.toISOString().split(".")[0] + "Z").toString()).withName("RetainUntilDate");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_ObjectLockRule = (input, context) => {
    const bodyNode = new XmlNode$1("ObjectLockRule");
    if (input.DefaultRetention != null) {
      const node = se_DefaultRetention(input.DefaultRetention).withName("DefaultRetention");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_OutputLocation = (input, context) => {
    const bodyNode = new XmlNode$1("OutputLocation");
    if (input.S3 != null) {
      const node = se_S3Location(input.S3).withName("S3");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_OutputSerialization = (input, context) => {
    const bodyNode = new XmlNode$1("OutputSerialization");
    if (input.CSV != null) {
      const node = se_CSVOutput(input.CSV).withName("CSV");
      bodyNode.addChildNode(node);
    }
    if (input.JSON != null) {
      const node = se_JSONOutput(input.JSON).withName("JSON");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_Owner = (input, context) => {
    const bodyNode = new XmlNode$1("Owner");
    if (input.DisplayName != null) {
      const node = XmlNode$1.of("DisplayName", input.DisplayName).withName("DisplayName");
      bodyNode.addChildNode(node);
    }
    if (input.ID != null) {
      const node = XmlNode$1.of("ID", input.ID).withName("ID");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_OwnershipControls = (input, context) => {
    const bodyNode = new XmlNode$1("OwnershipControls");
    if (input.Rules != null) {
      const nodes = se_OwnershipControlsRules(input.Rules);
      nodes.map(node => {
        node = node.withName("Rule");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  const se_OwnershipControlsRule = (input, context) => {
    const bodyNode = new XmlNode$1("OwnershipControlsRule");
    if (input.ObjectOwnership != null) {
      const node = XmlNode$1.of("ObjectOwnership", input.ObjectOwnership).withName("ObjectOwnership");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_OwnershipControlsRules = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = se_OwnershipControlsRule(entry);
      return node.withName("member");
    });
  };
  const se_ParquetInput = (input, context) => {
    const bodyNode = new XmlNode$1("ParquetInput");
    return bodyNode;
  };
  const se_PublicAccessBlockConfiguration = (input, context) => {
    const bodyNode = new XmlNode$1("PublicAccessBlockConfiguration");
    if (input.BlockPublicAcls != null) {
      const node = XmlNode$1.of("Setting", String(input.BlockPublicAcls)).withName("BlockPublicAcls");
      bodyNode.addChildNode(node);
    }
    if (input.IgnorePublicAcls != null) {
      const node = XmlNode$1.of("Setting", String(input.IgnorePublicAcls)).withName("IgnorePublicAcls");
      bodyNode.addChildNode(node);
    }
    if (input.BlockPublicPolicy != null) {
      const node = XmlNode$1.of("Setting", String(input.BlockPublicPolicy)).withName("BlockPublicPolicy");
      bodyNode.addChildNode(node);
    }
    if (input.RestrictPublicBuckets != null) {
      const node = XmlNode$1.of("Setting", String(input.RestrictPublicBuckets)).withName("RestrictPublicBuckets");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_QueueConfiguration = (input, context) => {
    const bodyNode = new XmlNode$1("QueueConfiguration");
    if (input.Id != null) {
      const node = XmlNode$1.of("NotificationId", input.Id).withName("Id");
      bodyNode.addChildNode(node);
    }
    if (input.QueueArn != null) {
      const node = XmlNode$1.of("QueueArn", input.QueueArn).withName("Queue");
      bodyNode.addChildNode(node);
    }
    if (input.Events != null) {
      const nodes = se_EventList(input.Events);
      nodes.map(node => {
        node = node.withName("Event");
        bodyNode.addChildNode(node);
      });
    }
    if (input.Filter != null) {
      const node = se_NotificationConfigurationFilter(input.Filter).withName("Filter");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_QueueConfigurationList = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = se_QueueConfiguration(entry);
      return node.withName("member");
    });
  };
  const se_Redirect = (input, context) => {
    const bodyNode = new XmlNode$1("Redirect");
    if (input.HostName != null) {
      const node = XmlNode$1.of("HostName", input.HostName).withName("HostName");
      bodyNode.addChildNode(node);
    }
    if (input.HttpRedirectCode != null) {
      const node = XmlNode$1.of("HttpRedirectCode", input.HttpRedirectCode).withName("HttpRedirectCode");
      bodyNode.addChildNode(node);
    }
    if (input.Protocol != null) {
      const node = XmlNode$1.of("Protocol", input.Protocol).withName("Protocol");
      bodyNode.addChildNode(node);
    }
    if (input.ReplaceKeyPrefixWith != null) {
      const node = XmlNode$1.of("ReplaceKeyPrefixWith", input.ReplaceKeyPrefixWith).withName("ReplaceKeyPrefixWith");
      bodyNode.addChildNode(node);
    }
    if (input.ReplaceKeyWith != null) {
      const node = XmlNode$1.of("ReplaceKeyWith", input.ReplaceKeyWith).withName("ReplaceKeyWith");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_RedirectAllRequestsTo = (input, context) => {
    const bodyNode = new XmlNode$1("RedirectAllRequestsTo");
    if (input.HostName != null) {
      const node = XmlNode$1.of("HostName", input.HostName).withName("HostName");
      bodyNode.addChildNode(node);
    }
    if (input.Protocol != null) {
      const node = XmlNode$1.of("Protocol", input.Protocol).withName("Protocol");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_ReplicaModifications = (input, context) => {
    const bodyNode = new XmlNode$1("ReplicaModifications");
    if (input.Status != null) {
      const node = XmlNode$1.of("ReplicaModificationsStatus", input.Status).withName("Status");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_ReplicationConfiguration = (input, context) => {
    const bodyNode = new XmlNode$1("ReplicationConfiguration");
    if (input.Role != null) {
      const node = XmlNode$1.of("Role", input.Role).withName("Role");
      bodyNode.addChildNode(node);
    }
    if (input.Rules != null) {
      const nodes = se_ReplicationRules(input.Rules);
      nodes.map(node => {
        node = node.withName("Rule");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  const se_ReplicationRule = (input, context) => {
    const bodyNode = new XmlNode$1("ReplicationRule");
    if (input.ID != null) {
      const node = XmlNode$1.of("ID", input.ID).withName("ID");
      bodyNode.addChildNode(node);
    }
    if (input.Priority != null) {
      const node = XmlNode$1.of("Priority", String(input.Priority)).withName("Priority");
      bodyNode.addChildNode(node);
    }
    if (input.Prefix != null) {
      const node = XmlNode$1.of("Prefix", input.Prefix).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    if (input.Filter != null) {
      const node = se_ReplicationRuleFilter(input.Filter).withName("Filter");
      bodyNode.addChildNode(node);
    }
    if (input.Status != null) {
      const node = XmlNode$1.of("ReplicationRuleStatus", input.Status).withName("Status");
      bodyNode.addChildNode(node);
    }
    if (input.SourceSelectionCriteria != null) {
      const node = se_SourceSelectionCriteria(input.SourceSelectionCriteria).withName("SourceSelectionCriteria");
      bodyNode.addChildNode(node);
    }
    if (input.ExistingObjectReplication != null) {
      const node = se_ExistingObjectReplication(input.ExistingObjectReplication).withName("ExistingObjectReplication");
      bodyNode.addChildNode(node);
    }
    if (input.Destination != null) {
      const node = se_Destination(input.Destination).withName("Destination");
      bodyNode.addChildNode(node);
    }
    if (input.DeleteMarkerReplication != null) {
      const node = se_DeleteMarkerReplication(input.DeleteMarkerReplication).withName("DeleteMarkerReplication");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_ReplicationRuleAndOperator = (input, context) => {
    const bodyNode = new XmlNode$1("ReplicationRuleAndOperator");
    if (input.Prefix != null) {
      const node = XmlNode$1.of("Prefix", input.Prefix).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    if (input.Tags != null) {
      const nodes = se_TagSet(input.Tags);
      nodes.map(node => {
        node = node.withName("Tag");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  const se_ReplicationRuleFilter = (input, context) => {
    const bodyNode = new XmlNode$1("ReplicationRuleFilter");
    ReplicationRuleFilter.visit(input, {
      Prefix: value => {
        const node = XmlNode$1.of("Prefix", value).withName("Prefix");
        bodyNode.addChildNode(node);
      },
      Tag: value => {
        const node = se_Tag(value).withName("Tag");
        bodyNode.addChildNode(node);
      },
      And: value => {
        const node = se_ReplicationRuleAndOperator(value).withName("And");
        bodyNode.addChildNode(node);
      },
      _: (name, value) => {
        if (!(value instanceof XmlNode$1 || value instanceof XmlText)) {
          throw new Error("Unable to serialize unknown union members in XML.");
        }
        bodyNode.addChildNode(new XmlNode$1(name).addChildNode(value));
      }
    });
    return bodyNode;
  };
  const se_ReplicationRules = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = se_ReplicationRule(entry);
      return node.withName("member");
    });
  };
  const se_ReplicationTime = (input, context) => {
    const bodyNode = new XmlNode$1("ReplicationTime");
    if (input.Status != null) {
      const node = XmlNode$1.of("ReplicationTimeStatus", input.Status).withName("Status");
      bodyNode.addChildNode(node);
    }
    if (input.Time != null) {
      const node = se_ReplicationTimeValue(input.Time).withName("Time");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_ReplicationTimeValue = (input, context) => {
    const bodyNode = new XmlNode$1("ReplicationTimeValue");
    if (input.Minutes != null) {
      const node = XmlNode$1.of("Minutes", String(input.Minutes)).withName("Minutes");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_RequestPaymentConfiguration = (input, context) => {
    const bodyNode = new XmlNode$1("RequestPaymentConfiguration");
    if (input.Payer != null) {
      const node = XmlNode$1.of("Payer", input.Payer).withName("Payer");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_RequestProgress = (input, context) => {
    const bodyNode = new XmlNode$1("RequestProgress");
    if (input.Enabled != null) {
      const node = XmlNode$1.of("EnableRequestProgress", String(input.Enabled)).withName("Enabled");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_RestoreRequest = (input, context) => {
    const bodyNode = new XmlNode$1("RestoreRequest");
    if (input.Days != null) {
      const node = XmlNode$1.of("Days", String(input.Days)).withName("Days");
      bodyNode.addChildNode(node);
    }
    if (input.GlacierJobParameters != null) {
      const node = se_GlacierJobParameters(input.GlacierJobParameters).withName("GlacierJobParameters");
      bodyNode.addChildNode(node);
    }
    if (input.Type != null) {
      const node = XmlNode$1.of("RestoreRequestType", input.Type).withName("Type");
      bodyNode.addChildNode(node);
    }
    if (input.Tier != null) {
      const node = XmlNode$1.of("Tier", input.Tier).withName("Tier");
      bodyNode.addChildNode(node);
    }
    if (input.Description != null) {
      const node = XmlNode$1.of("Description", input.Description).withName("Description");
      bodyNode.addChildNode(node);
    }
    if (input.SelectParameters != null) {
      const node = se_SelectParameters(input.SelectParameters).withName("SelectParameters");
      bodyNode.addChildNode(node);
    }
    if (input.OutputLocation != null) {
      const node = se_OutputLocation(input.OutputLocation).withName("OutputLocation");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_RoutingRule = (input, context) => {
    const bodyNode = new XmlNode$1("RoutingRule");
    if (input.Condition != null) {
      const node = se_Condition(input.Condition).withName("Condition");
      bodyNode.addChildNode(node);
    }
    if (input.Redirect != null) {
      const node = se_Redirect(input.Redirect).withName("Redirect");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_RoutingRules = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = se_RoutingRule(entry);
      return node.withName("RoutingRule");
    });
  };
  const se_S3KeyFilter = (input, context) => {
    const bodyNode = new XmlNode$1("S3KeyFilter");
    if (input.FilterRules != null) {
      const nodes = se_FilterRuleList(input.FilterRules);
      nodes.map(node => {
        node = node.withName("FilterRule");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  const se_S3Location = (input, context) => {
    const bodyNode = new XmlNode$1("S3Location");
    if (input.BucketName != null) {
      const node = XmlNode$1.of("BucketName", input.BucketName).withName("BucketName");
      bodyNode.addChildNode(node);
    }
    if (input.Prefix != null) {
      const node = XmlNode$1.of("LocationPrefix", input.Prefix).withName("Prefix");
      bodyNode.addChildNode(node);
    }
    if (input.Encryption != null) {
      const node = se_Encryption(input.Encryption).withName("Encryption");
      bodyNode.addChildNode(node);
    }
    if (input.CannedACL != null) {
      const node = XmlNode$1.of("ObjectCannedACL", input.CannedACL).withName("CannedACL");
      bodyNode.addChildNode(node);
    }
    if (input.AccessControlList != null) {
      const nodes = se_Grants(input.AccessControlList);
      const containerNode = new XmlNode$1("AccessControlList");
      nodes.map(node => {
        containerNode.addChildNode(node);
      });
      bodyNode.addChildNode(containerNode);
    }
    if (input.Tagging != null) {
      const node = se_Tagging(input.Tagging).withName("Tagging");
      bodyNode.addChildNode(node);
    }
    if (input.UserMetadata != null) {
      const nodes = se_UserMetadata(input.UserMetadata);
      const containerNode = new XmlNode$1("UserMetadata");
      nodes.map(node => {
        containerNode.addChildNode(node);
      });
      bodyNode.addChildNode(containerNode);
    }
    if (input.StorageClass != null) {
      const node = XmlNode$1.of("StorageClass", input.StorageClass).withName("StorageClass");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_ScanRange = (input, context) => {
    const bodyNode = new XmlNode$1("ScanRange");
    if (input.Start != null) {
      const node = XmlNode$1.of("Start", String(input.Start)).withName("Start");
      bodyNode.addChildNode(node);
    }
    if (input.End != null) {
      const node = XmlNode$1.of("End", String(input.End)).withName("End");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_SelectParameters = (input, context) => {
    const bodyNode = new XmlNode$1("SelectParameters");
    if (input.InputSerialization != null) {
      const node = se_InputSerialization(input.InputSerialization).withName("InputSerialization");
      bodyNode.addChildNode(node);
    }
    if (input.ExpressionType != null) {
      const node = XmlNode$1.of("ExpressionType", input.ExpressionType).withName("ExpressionType");
      bodyNode.addChildNode(node);
    }
    if (input.Expression != null) {
      const node = XmlNode$1.of("Expression", input.Expression).withName("Expression");
      bodyNode.addChildNode(node);
    }
    if (input.OutputSerialization != null) {
      const node = se_OutputSerialization(input.OutputSerialization).withName("OutputSerialization");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_ServerSideEncryptionByDefault = (input, context) => {
    const bodyNode = new XmlNode$1("ServerSideEncryptionByDefault");
    if (input.SSEAlgorithm != null) {
      const node = XmlNode$1.of("ServerSideEncryption", input.SSEAlgorithm).withName("SSEAlgorithm");
      bodyNode.addChildNode(node);
    }
    if (input.KMSMasterKeyID != null) {
      const node = XmlNode$1.of("SSEKMSKeyId", input.KMSMasterKeyID).withName("KMSMasterKeyID");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_ServerSideEncryptionConfiguration = (input, context) => {
    const bodyNode = new XmlNode$1("ServerSideEncryptionConfiguration");
    if (input.Rules != null) {
      const nodes = se_ServerSideEncryptionRules(input.Rules);
      nodes.map(node => {
        node = node.withName("Rule");
        bodyNode.addChildNode(node);
      });
    }
    return bodyNode;
  };
  const se_ServerSideEncryptionRule = (input, context) => {
    const bodyNode = new XmlNode$1("ServerSideEncryptionRule");
    if (input.ApplyServerSideEncryptionByDefault != null) {
      const node = se_ServerSideEncryptionByDefault(input.ApplyServerSideEncryptionByDefault).withName("ApplyServerSideEncryptionByDefault");
      bodyNode.addChildNode(node);
    }
    if (input.BucketKeyEnabled != null) {
      const node = XmlNode$1.of("BucketKeyEnabled", String(input.BucketKeyEnabled)).withName("BucketKeyEnabled");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_ServerSideEncryptionRules = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = se_ServerSideEncryptionRule(entry);
      return node.withName("member");
    });
  };
  const se_SourceSelectionCriteria = (input, context) => {
    const bodyNode = new XmlNode$1("SourceSelectionCriteria");
    if (input.SseKmsEncryptedObjects != null) {
      const node = se_SseKmsEncryptedObjects(input.SseKmsEncryptedObjects).withName("SseKmsEncryptedObjects");
      bodyNode.addChildNode(node);
    }
    if (input.ReplicaModifications != null) {
      const node = se_ReplicaModifications(input.ReplicaModifications).withName("ReplicaModifications");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_SSEKMS = (input, context) => {
    const bodyNode = new XmlNode$1("SSE-KMS");
    if (input.KeyId != null) {
      const node = XmlNode$1.of("SSEKMSKeyId", input.KeyId).withName("KeyId");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_SseKmsEncryptedObjects = (input, context) => {
    const bodyNode = new XmlNode$1("SseKmsEncryptedObjects");
    if (input.Status != null) {
      const node = XmlNode$1.of("SseKmsEncryptedObjectsStatus", input.Status).withName("Status");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_SSES3 = (input, context) => {
    const bodyNode = new XmlNode$1("SSE-S3");
    return bodyNode;
  };
  const se_StorageClassAnalysis = (input, context) => {
    const bodyNode = new XmlNode$1("StorageClassAnalysis");
    if (input.DataExport != null) {
      const node = se_StorageClassAnalysisDataExport(input.DataExport).withName("DataExport");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_StorageClassAnalysisDataExport = (input, context) => {
    const bodyNode = new XmlNode$1("StorageClassAnalysisDataExport");
    if (input.OutputSchemaVersion != null) {
      const node = XmlNode$1.of("StorageClassAnalysisSchemaVersion", input.OutputSchemaVersion).withName("OutputSchemaVersion");
      bodyNode.addChildNode(node);
    }
    if (input.Destination != null) {
      const node = se_AnalyticsExportDestination(input.Destination).withName("Destination");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_Tag = (input, context) => {
    const bodyNode = new XmlNode$1("Tag");
    if (input.Key != null) {
      const node = XmlNode$1.of("ObjectKey", input.Key).withName("Key");
      bodyNode.addChildNode(node);
    }
    if (input.Value != null) {
      const node = XmlNode$1.of("Value", input.Value).withName("Value");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_Tagging = (input, context) => {
    const bodyNode = new XmlNode$1("Tagging");
    if (input.TagSet != null) {
      const nodes = se_TagSet(input.TagSet);
      const containerNode = new XmlNode$1("TagSet");
      nodes.map(node => {
        containerNode.addChildNode(node);
      });
      bodyNode.addChildNode(containerNode);
    }
    return bodyNode;
  };
  const se_TagSet = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = se_Tag(entry);
      return node.withName("Tag");
    });
  };
  const se_TargetGrant = (input, context) => {
    const bodyNode = new XmlNode$1("TargetGrant");
    if (input.Grantee != null) {
      const node = se_Grantee(input.Grantee).withName("Grantee");
      node.addAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
      bodyNode.addChildNode(node);
    }
    if (input.Permission != null) {
      const node = XmlNode$1.of("BucketLogsPermission", input.Permission).withName("Permission");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_TargetGrants = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = se_TargetGrant(entry);
      return node.withName("Grant");
    });
  };
  const se_Tiering = (input, context) => {
    const bodyNode = new XmlNode$1("Tiering");
    if (input.Days != null) {
      const node = XmlNode$1.of("IntelligentTieringDays", String(input.Days)).withName("Days");
      bodyNode.addChildNode(node);
    }
    if (input.AccessTier != null) {
      const node = XmlNode$1.of("IntelligentTieringAccessTier", input.AccessTier).withName("AccessTier");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_TieringList = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = se_Tiering(entry);
      return node.withName("member");
    });
  };
  const se_TopicConfiguration = (input, context) => {
    const bodyNode = new XmlNode$1("TopicConfiguration");
    if (input.Id != null) {
      const node = XmlNode$1.of("NotificationId", input.Id).withName("Id");
      bodyNode.addChildNode(node);
    }
    if (input.TopicArn != null) {
      const node = XmlNode$1.of("TopicArn", input.TopicArn).withName("Topic");
      bodyNode.addChildNode(node);
    }
    if (input.Events != null) {
      const nodes = se_EventList(input.Events);
      nodes.map(node => {
        node = node.withName("Event");
        bodyNode.addChildNode(node);
      });
    }
    if (input.Filter != null) {
      const node = se_NotificationConfigurationFilter(input.Filter).withName("Filter");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_TopicConfigurationList = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = se_TopicConfiguration(entry);
      return node.withName("member");
    });
  };
  const se_Transition = (input, context) => {
    const bodyNode = new XmlNode$1("Transition");
    if (input.Date != null) {
      const node = XmlNode$1.of("Date", (input.Date.toISOString().split(".")[0] + "Z").toString()).withName("Date");
      bodyNode.addChildNode(node);
    }
    if (input.Days != null) {
      const node = XmlNode$1.of("Days", String(input.Days)).withName("Days");
      bodyNode.addChildNode(node);
    }
    if (input.StorageClass != null) {
      const node = XmlNode$1.of("TransitionStorageClass", input.StorageClass).withName("StorageClass");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_TransitionList = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = se_Transition(entry);
      return node.withName("member");
    });
  };
  const se_UserMetadata = (input, context) => {
    return input.filter(e => e != null).map(entry => {
      const node = se_MetadataEntry(entry);
      return node.withName("MetadataEntry");
    });
  };
  const se_VersioningConfiguration = (input, context) => {
    const bodyNode = new XmlNode$1("VersioningConfiguration");
    if (input.MFADelete != null) {
      const node = XmlNode$1.of("MFADelete", input.MFADelete).withName("MfaDelete");
      bodyNode.addChildNode(node);
    }
    if (input.Status != null) {
      const node = XmlNode$1.of("BucketVersioningStatus", input.Status).withName("Status");
      bodyNode.addChildNode(node);
    }
    return bodyNode;
  };
  const se_WebsiteConfiguration = (input, context) => {
    const bodyNode = new XmlNode$1("WebsiteConfiguration");
    if (input.ErrorDocument != null) {
      const node = se_ErrorDocument(input.ErrorDocument).withName("ErrorDocument");
      bodyNode.addChildNode(node);
    }
    if (input.IndexDocument != null) {
      const node = se_IndexDocument(input.IndexDocument).withName("IndexDocument");
      bodyNode.addChildNode(node);
    }
    if (input.RedirectAllRequestsTo != null) {
      const node = se_RedirectAllRequestsTo(input.RedirectAllRequestsTo).withName("RedirectAllRequestsTo");
      bodyNode.addChildNode(node);
    }
    if (input.RoutingRules != null) {
      const nodes = se_RoutingRules(input.RoutingRules);
      const containerNode = new XmlNode$1("RoutingRules");
      nodes.map(node => {
        containerNode.addChildNode(node);
      });
      bodyNode.addChildNode(containerNode);
    }
    return bodyNode;
  };
  const de_AbortIncompleteMultipartUpload = (output, context) => {
    const contents = {};
    if (output["DaysAfterInitiation"] !== undefined) {
      contents.DaysAfterInitiation = strictParseInt32(output["DaysAfterInitiation"]);
    }
    return contents;
  };
  const de_AccessControlTranslation = (output, context) => {
    const contents = {};
    if (output["Owner"] !== undefined) {
      contents.Owner = expectString(output["Owner"]);
    }
    return contents;
  };
  const de_AllowedHeaders = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return expectString(entry);
    });
  };
  const de_AllowedMethods = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return expectString(entry);
    });
  };
  const de_AllowedOrigins = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return expectString(entry);
    });
  };
  const de_AnalyticsAndOperator = (output, context) => {
    const contents = {};
    if (output["Prefix"] !== undefined) {
      contents.Prefix = expectString(output["Prefix"]);
    }
    if (output.Tag === "") {
      contents.Tags = [];
    } else if (output["Tag"] !== undefined) {
      contents.Tags = de_TagSet(getArrayIfSingleItem(output["Tag"]));
    }
    return contents;
  };
  const de_AnalyticsConfiguration = (output, context) => {
    const contents = {};
    if (output["Id"] !== undefined) {
      contents.Id = expectString(output["Id"]);
    }
    if (output.Filter === "") ; else if (output["Filter"] !== undefined) {
      contents.Filter = de_AnalyticsFilter(expectUnion(output["Filter"]));
    }
    if (output["StorageClassAnalysis"] !== undefined) {
      contents.StorageClassAnalysis = de_StorageClassAnalysis(output["StorageClassAnalysis"]);
    }
    return contents;
  };
  const de_AnalyticsConfigurationList = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_AnalyticsConfiguration(entry);
    });
  };
  const de_AnalyticsExportDestination = (output, context) => {
    const contents = {};
    if (output["S3BucketDestination"] !== undefined) {
      contents.S3BucketDestination = de_AnalyticsS3BucketDestination(output["S3BucketDestination"]);
    }
    return contents;
  };
  const de_AnalyticsFilter = (output, context) => {
    if (output["Prefix"] !== undefined) {
      return {
        Prefix: expectString(output["Prefix"])
      };
    }
    if (output["Tag"] !== undefined) {
      return {
        Tag: de_Tag(output["Tag"])
      };
    }
    if (output["And"] !== undefined) {
      return {
        And: de_AnalyticsAndOperator(output["And"])
      };
    }
    return {
      $unknown: Object.entries(output)[0]
    };
  };
  const de_AnalyticsS3BucketDestination = (output, context) => {
    const contents = {};
    if (output["Format"] !== undefined) {
      contents.Format = expectString(output["Format"]);
    }
    if (output["BucketAccountId"] !== undefined) {
      contents.BucketAccountId = expectString(output["BucketAccountId"]);
    }
    if (output["Bucket"] !== undefined) {
      contents.Bucket = expectString(output["Bucket"]);
    }
    if (output["Prefix"] !== undefined) {
      contents.Prefix = expectString(output["Prefix"]);
    }
    return contents;
  };
  const de_Bucket = (output, context) => {
    const contents = {};
    if (output["Name"] !== undefined) {
      contents.Name = expectString(output["Name"]);
    }
    if (output["CreationDate"] !== undefined) {
      contents.CreationDate = expectNonNull(parseRfc3339DateTimeWithOffset(output["CreationDate"]));
    }
    return contents;
  };
  const de_Buckets = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_Bucket(entry);
    });
  };
  const de_Checksum = (output, context) => {
    const contents = {};
    if (output["ChecksumCRC32"] !== undefined) {
      contents.ChecksumCRC32 = expectString(output["ChecksumCRC32"]);
    }
    if (output["ChecksumCRC32C"] !== undefined) {
      contents.ChecksumCRC32C = expectString(output["ChecksumCRC32C"]);
    }
    if (output["ChecksumSHA1"] !== undefined) {
      contents.ChecksumSHA1 = expectString(output["ChecksumSHA1"]);
    }
    if (output["ChecksumSHA256"] !== undefined) {
      contents.ChecksumSHA256 = expectString(output["ChecksumSHA256"]);
    }
    return contents;
  };
  const de_ChecksumAlgorithmList = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return expectString(entry);
    });
  };
  const de_CommonPrefix = (output, context) => {
    const contents = {};
    if (output["Prefix"] !== undefined) {
      contents.Prefix = expectString(output["Prefix"]);
    }
    return contents;
  };
  const de_CommonPrefixList = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_CommonPrefix(entry);
    });
  };
  const de_Condition = (output, context) => {
    const contents = {};
    if (output["HttpErrorCodeReturnedEquals"] !== undefined) {
      contents.HttpErrorCodeReturnedEquals = expectString(output["HttpErrorCodeReturnedEquals"]);
    }
    if (output["KeyPrefixEquals"] !== undefined) {
      contents.KeyPrefixEquals = expectString(output["KeyPrefixEquals"]);
    }
    return contents;
  };
  const de_ContinuationEvent = (output, context) => {
    const contents = {};
    return contents;
  };
  const de_CopyObjectResult = (output, context) => {
    const contents = {};
    if (output["ETag"] !== undefined) {
      contents.ETag = expectString(output["ETag"]);
    }
    if (output["LastModified"] !== undefined) {
      contents.LastModified = expectNonNull(parseRfc3339DateTimeWithOffset(output["LastModified"]));
    }
    if (output["ChecksumCRC32"] !== undefined) {
      contents.ChecksumCRC32 = expectString(output["ChecksumCRC32"]);
    }
    if (output["ChecksumCRC32C"] !== undefined) {
      contents.ChecksumCRC32C = expectString(output["ChecksumCRC32C"]);
    }
    if (output["ChecksumSHA1"] !== undefined) {
      contents.ChecksumSHA1 = expectString(output["ChecksumSHA1"]);
    }
    if (output["ChecksumSHA256"] !== undefined) {
      contents.ChecksumSHA256 = expectString(output["ChecksumSHA256"]);
    }
    return contents;
  };
  const de_CopyPartResult = (output, context) => {
    const contents = {};
    if (output["ETag"] !== undefined) {
      contents.ETag = expectString(output["ETag"]);
    }
    if (output["LastModified"] !== undefined) {
      contents.LastModified = expectNonNull(parseRfc3339DateTimeWithOffset(output["LastModified"]));
    }
    if (output["ChecksumCRC32"] !== undefined) {
      contents.ChecksumCRC32 = expectString(output["ChecksumCRC32"]);
    }
    if (output["ChecksumCRC32C"] !== undefined) {
      contents.ChecksumCRC32C = expectString(output["ChecksumCRC32C"]);
    }
    if (output["ChecksumSHA1"] !== undefined) {
      contents.ChecksumSHA1 = expectString(output["ChecksumSHA1"]);
    }
    if (output["ChecksumSHA256"] !== undefined) {
      contents.ChecksumSHA256 = expectString(output["ChecksumSHA256"]);
    }
    return contents;
  };
  const de_CORSRule = (output, context) => {
    const contents = {};
    if (output["ID"] !== undefined) {
      contents.ID = expectString(output["ID"]);
    }
    if (output.AllowedHeader === "") {
      contents.AllowedHeaders = [];
    } else if (output["AllowedHeader"] !== undefined) {
      contents.AllowedHeaders = de_AllowedHeaders(getArrayIfSingleItem(output["AllowedHeader"]));
    }
    if (output.AllowedMethod === "") {
      contents.AllowedMethods = [];
    } else if (output["AllowedMethod"] !== undefined) {
      contents.AllowedMethods = de_AllowedMethods(getArrayIfSingleItem(output["AllowedMethod"]));
    }
    if (output.AllowedOrigin === "") {
      contents.AllowedOrigins = [];
    } else if (output["AllowedOrigin"] !== undefined) {
      contents.AllowedOrigins = de_AllowedOrigins(getArrayIfSingleItem(output["AllowedOrigin"]));
    }
    if (output.ExposeHeader === "") {
      contents.ExposeHeaders = [];
    } else if (output["ExposeHeader"] !== undefined) {
      contents.ExposeHeaders = de_ExposeHeaders(getArrayIfSingleItem(output["ExposeHeader"]));
    }
    if (output["MaxAgeSeconds"] !== undefined) {
      contents.MaxAgeSeconds = strictParseInt32(output["MaxAgeSeconds"]);
    }
    return contents;
  };
  const de_CORSRules = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_CORSRule(entry);
    });
  };
  const de_DefaultRetention = (output, context) => {
    const contents = {};
    if (output["Mode"] !== undefined) {
      contents.Mode = expectString(output["Mode"]);
    }
    if (output["Days"] !== undefined) {
      contents.Days = strictParseInt32(output["Days"]);
    }
    if (output["Years"] !== undefined) {
      contents.Years = strictParseInt32(output["Years"]);
    }
    return contents;
  };
  const de_DeletedObject = (output, context) => {
    const contents = {};
    if (output["Key"] !== undefined) {
      contents.Key = expectString(output["Key"]);
    }
    if (output["VersionId"] !== undefined) {
      contents.VersionId = expectString(output["VersionId"]);
    }
    if (output["DeleteMarker"] !== undefined) {
      contents.DeleteMarker = parseBoolean(output["DeleteMarker"]);
    }
    if (output["DeleteMarkerVersionId"] !== undefined) {
      contents.DeleteMarkerVersionId = expectString(output["DeleteMarkerVersionId"]);
    }
    return contents;
  };
  const de_DeletedObjects = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_DeletedObject(entry);
    });
  };
  const de_DeleteMarkerEntry = (output, context) => {
    const contents = {};
    if (output["Owner"] !== undefined) {
      contents.Owner = de_Owner(output["Owner"]);
    }
    if (output["Key"] !== undefined) {
      contents.Key = expectString(output["Key"]);
    }
    if (output["VersionId"] !== undefined) {
      contents.VersionId = expectString(output["VersionId"]);
    }
    if (output["IsLatest"] !== undefined) {
      contents.IsLatest = parseBoolean(output["IsLatest"]);
    }
    if (output["LastModified"] !== undefined) {
      contents.LastModified = expectNonNull(parseRfc3339DateTimeWithOffset(output["LastModified"]));
    }
    return contents;
  };
  const de_DeleteMarkerReplication = (output, context) => {
    const contents = {};
    if (output["Status"] !== undefined) {
      contents.Status = expectString(output["Status"]);
    }
    return contents;
  };
  const de_DeleteMarkers = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_DeleteMarkerEntry(entry);
    });
  };
  const de_Destination = (output, context) => {
    const contents = {};
    if (output["Bucket"] !== undefined) {
      contents.Bucket = expectString(output["Bucket"]);
    }
    if (output["Account"] !== undefined) {
      contents.Account = expectString(output["Account"]);
    }
    if (output["StorageClass"] !== undefined) {
      contents.StorageClass = expectString(output["StorageClass"]);
    }
    if (output["AccessControlTranslation"] !== undefined) {
      contents.AccessControlTranslation = de_AccessControlTranslation(output["AccessControlTranslation"]);
    }
    if (output["EncryptionConfiguration"] !== undefined) {
      contents.EncryptionConfiguration = de_EncryptionConfiguration(output["EncryptionConfiguration"]);
    }
    if (output["ReplicationTime"] !== undefined) {
      contents.ReplicationTime = de_ReplicationTime(output["ReplicationTime"]);
    }
    if (output["Metrics"] !== undefined) {
      contents.Metrics = de_Metrics(output["Metrics"]);
    }
    return contents;
  };
  const de_EncryptionConfiguration = (output, context) => {
    const contents = {};
    if (output["ReplicaKmsKeyID"] !== undefined) {
      contents.ReplicaKmsKeyID = expectString(output["ReplicaKmsKeyID"]);
    }
    return contents;
  };
  const de_EndEvent = (output, context) => {
    const contents = {};
    return contents;
  };
  const de__Error = (output, context) => {
    const contents = {};
    if (output["Key"] !== undefined) {
      contents.Key = expectString(output["Key"]);
    }
    if (output["VersionId"] !== undefined) {
      contents.VersionId = expectString(output["VersionId"]);
    }
    if (output["Code"] !== undefined) {
      contents.Code = expectString(output["Code"]);
    }
    if (output["Message"] !== undefined) {
      contents.Message = expectString(output["Message"]);
    }
    return contents;
  };
  const de_ErrorDocument = (output, context) => {
    const contents = {};
    if (output["Key"] !== undefined) {
      contents.Key = expectString(output["Key"]);
    }
    return contents;
  };
  const de_Errors = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de__Error(entry);
    });
  };
  const de_EventBridgeConfiguration = (output, context) => {
    const contents = {};
    return contents;
  };
  const de_EventList = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return expectString(entry);
    });
  };
  const de_ExistingObjectReplication = (output, context) => {
    const contents = {};
    if (output["Status"] !== undefined) {
      contents.Status = expectString(output["Status"]);
    }
    return contents;
  };
  const de_ExposeHeaders = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return expectString(entry);
    });
  };
  const de_FilterRule = (output, context) => {
    const contents = {};
    if (output["Name"] !== undefined) {
      contents.Name = expectString(output["Name"]);
    }
    if (output["Value"] !== undefined) {
      contents.Value = expectString(output["Value"]);
    }
    return contents;
  };
  const de_FilterRuleList = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_FilterRule(entry);
    });
  };
  const de_GetObjectAttributesParts = (output, context) => {
    const contents = {};
    if (output["PartsCount"] !== undefined) {
      contents.TotalPartsCount = strictParseInt32(output["PartsCount"]);
    }
    if (output["PartNumberMarker"] !== undefined) {
      contents.PartNumberMarker = expectString(output["PartNumberMarker"]);
    }
    if (output["NextPartNumberMarker"] !== undefined) {
      contents.NextPartNumberMarker = expectString(output["NextPartNumberMarker"]);
    }
    if (output["MaxParts"] !== undefined) {
      contents.MaxParts = strictParseInt32(output["MaxParts"]);
    }
    if (output["IsTruncated"] !== undefined) {
      contents.IsTruncated = parseBoolean(output["IsTruncated"]);
    }
    if (output.Part === "") {
      contents.Parts = [];
    } else if (output["Part"] !== undefined) {
      contents.Parts = de_PartsList(getArrayIfSingleItem(output["Part"]));
    }
    return contents;
  };
  const de_Grant = (output, context) => {
    const contents = {};
    if (output["Grantee"] !== undefined) {
      contents.Grantee = de_Grantee(output["Grantee"]);
    }
    if (output["Permission"] !== undefined) {
      contents.Permission = expectString(output["Permission"]);
    }
    return contents;
  };
  const de_Grantee = (output, context) => {
    const contents = {};
    if (output["DisplayName"] !== undefined) {
      contents.DisplayName = expectString(output["DisplayName"]);
    }
    if (output["EmailAddress"] !== undefined) {
      contents.EmailAddress = expectString(output["EmailAddress"]);
    }
    if (output["ID"] !== undefined) {
      contents.ID = expectString(output["ID"]);
    }
    if (output["URI"] !== undefined) {
      contents.URI = expectString(output["URI"]);
    }
    if (output["xsi:type"] !== undefined) {
      contents.Type = expectString(output["xsi:type"]);
    }
    return contents;
  };
  const de_Grants = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_Grant(entry);
    });
  };
  const de_IndexDocument = (output, context) => {
    const contents = {};
    if (output["Suffix"] !== undefined) {
      contents.Suffix = expectString(output["Suffix"]);
    }
    return contents;
  };
  const de_Initiator = (output, context) => {
    const contents = {};
    if (output["ID"] !== undefined) {
      contents.ID = expectString(output["ID"]);
    }
    if (output["DisplayName"] !== undefined) {
      contents.DisplayName = expectString(output["DisplayName"]);
    }
    return contents;
  };
  const de_IntelligentTieringAndOperator = (output, context) => {
    const contents = {};
    if (output["Prefix"] !== undefined) {
      contents.Prefix = expectString(output["Prefix"]);
    }
    if (output.Tag === "") {
      contents.Tags = [];
    } else if (output["Tag"] !== undefined) {
      contents.Tags = de_TagSet(getArrayIfSingleItem(output["Tag"]));
    }
    return contents;
  };
  const de_IntelligentTieringConfiguration = (output, context) => {
    const contents = {};
    if (output["Id"] !== undefined) {
      contents.Id = expectString(output["Id"]);
    }
    if (output["Filter"] !== undefined) {
      contents.Filter = de_IntelligentTieringFilter(output["Filter"]);
    }
    if (output["Status"] !== undefined) {
      contents.Status = expectString(output["Status"]);
    }
    if (output.Tiering === "") {
      contents.Tierings = [];
    } else if (output["Tiering"] !== undefined) {
      contents.Tierings = de_TieringList(getArrayIfSingleItem(output["Tiering"]));
    }
    return contents;
  };
  const de_IntelligentTieringConfigurationList = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_IntelligentTieringConfiguration(entry);
    });
  };
  const de_IntelligentTieringFilter = (output, context) => {
    const contents = {};
    if (output["Prefix"] !== undefined) {
      contents.Prefix = expectString(output["Prefix"]);
    }
    if (output["Tag"] !== undefined) {
      contents.Tag = de_Tag(output["Tag"]);
    }
    if (output["And"] !== undefined) {
      contents.And = de_IntelligentTieringAndOperator(output["And"]);
    }
    return contents;
  };
  const de_InventoryConfiguration = (output, context) => {
    const contents = {};
    if (output["Destination"] !== undefined) {
      contents.Destination = de_InventoryDestination(output["Destination"]);
    }
    if (output["IsEnabled"] !== undefined) {
      contents.IsEnabled = parseBoolean(output["IsEnabled"]);
    }
    if (output["Filter"] !== undefined) {
      contents.Filter = de_InventoryFilter(output["Filter"]);
    }
    if (output["Id"] !== undefined) {
      contents.Id = expectString(output["Id"]);
    }
    if (output["IncludedObjectVersions"] !== undefined) {
      contents.IncludedObjectVersions = expectString(output["IncludedObjectVersions"]);
    }
    if (output.OptionalFields === "") {
      contents.OptionalFields = [];
    } else if (output["OptionalFields"] !== undefined && output["OptionalFields"]["Field"] !== undefined) {
      contents.OptionalFields = de_InventoryOptionalFields(getArrayIfSingleItem(output["OptionalFields"]["Field"]));
    }
    if (output["Schedule"] !== undefined) {
      contents.Schedule = de_InventorySchedule(output["Schedule"]);
    }
    return contents;
  };
  const de_InventoryConfigurationList = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_InventoryConfiguration(entry);
    });
  };
  const de_InventoryDestination = (output, context) => {
    const contents = {};
    if (output["S3BucketDestination"] !== undefined) {
      contents.S3BucketDestination = de_InventoryS3BucketDestination(output["S3BucketDestination"]);
    }
    return contents;
  };
  const de_InventoryEncryption = (output, context) => {
    const contents = {};
    if (output["SSE-S3"] !== undefined) {
      contents.SSES3 = de_SSES3(output["SSE-S3"]);
    }
    if (output["SSE-KMS"] !== undefined) {
      contents.SSEKMS = de_SSEKMS(output["SSE-KMS"]);
    }
    return contents;
  };
  const de_InventoryFilter = (output, context) => {
    const contents = {};
    if (output["Prefix"] !== undefined) {
      contents.Prefix = expectString(output["Prefix"]);
    }
    return contents;
  };
  const de_InventoryOptionalFields = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return expectString(entry);
    });
  };
  const de_InventoryS3BucketDestination = (output, context) => {
    const contents = {};
    if (output["AccountId"] !== undefined) {
      contents.AccountId = expectString(output["AccountId"]);
    }
    if (output["Bucket"] !== undefined) {
      contents.Bucket = expectString(output["Bucket"]);
    }
    if (output["Format"] !== undefined) {
      contents.Format = expectString(output["Format"]);
    }
    if (output["Prefix"] !== undefined) {
      contents.Prefix = expectString(output["Prefix"]);
    }
    if (output["Encryption"] !== undefined) {
      contents.Encryption = de_InventoryEncryption(output["Encryption"]);
    }
    return contents;
  };
  const de_InventorySchedule = (output, context) => {
    const contents = {};
    if (output["Frequency"] !== undefined) {
      contents.Frequency = expectString(output["Frequency"]);
    }
    return contents;
  };
  const de_LambdaFunctionConfiguration = (output, context) => {
    const contents = {};
    if (output["Id"] !== undefined) {
      contents.Id = expectString(output["Id"]);
    }
    if (output["CloudFunction"] !== undefined) {
      contents.LambdaFunctionArn = expectString(output["CloudFunction"]);
    }
    if (output.Event === "") {
      contents.Events = [];
    } else if (output["Event"] !== undefined) {
      contents.Events = de_EventList(getArrayIfSingleItem(output["Event"]));
    }
    if (output["Filter"] !== undefined) {
      contents.Filter = de_NotificationConfigurationFilter(output["Filter"]);
    }
    return contents;
  };
  const de_LambdaFunctionConfigurationList = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_LambdaFunctionConfiguration(entry);
    });
  };
  const de_LifecycleExpiration = (output, context) => {
    const contents = {};
    if (output["Date"] !== undefined) {
      contents.Date = expectNonNull(parseRfc3339DateTimeWithOffset(output["Date"]));
    }
    if (output["Days"] !== undefined) {
      contents.Days = strictParseInt32(output["Days"]);
    }
    if (output["ExpiredObjectDeleteMarker"] !== undefined) {
      contents.ExpiredObjectDeleteMarker = parseBoolean(output["ExpiredObjectDeleteMarker"]);
    }
    return contents;
  };
  const de_LifecycleRule = (output, context) => {
    const contents = {};
    if (output["Expiration"] !== undefined) {
      contents.Expiration = de_LifecycleExpiration(output["Expiration"]);
    }
    if (output["ID"] !== undefined) {
      contents.ID = expectString(output["ID"]);
    }
    if (output["Prefix"] !== undefined) {
      contents.Prefix = expectString(output["Prefix"]);
    }
    if (output.Filter === "") ; else if (output["Filter"] !== undefined) {
      contents.Filter = de_LifecycleRuleFilter(expectUnion(output["Filter"]));
    }
    if (output["Status"] !== undefined) {
      contents.Status = expectString(output["Status"]);
    }
    if (output.Transition === "") {
      contents.Transitions = [];
    } else if (output["Transition"] !== undefined) {
      contents.Transitions = de_TransitionList(getArrayIfSingleItem(output["Transition"]));
    }
    if (output.NoncurrentVersionTransition === "") {
      contents.NoncurrentVersionTransitions = [];
    } else if (output["NoncurrentVersionTransition"] !== undefined) {
      contents.NoncurrentVersionTransitions = de_NoncurrentVersionTransitionList(getArrayIfSingleItem(output["NoncurrentVersionTransition"]));
    }
    if (output["NoncurrentVersionExpiration"] !== undefined) {
      contents.NoncurrentVersionExpiration = de_NoncurrentVersionExpiration(output["NoncurrentVersionExpiration"]);
    }
    if (output["AbortIncompleteMultipartUpload"] !== undefined) {
      contents.AbortIncompleteMultipartUpload = de_AbortIncompleteMultipartUpload(output["AbortIncompleteMultipartUpload"]);
    }
    return contents;
  };
  const de_LifecycleRuleAndOperator = (output, context) => {
    const contents = {};
    if (output["Prefix"] !== undefined) {
      contents.Prefix = expectString(output["Prefix"]);
    }
    if (output.Tag === "") {
      contents.Tags = [];
    } else if (output["Tag"] !== undefined) {
      contents.Tags = de_TagSet(getArrayIfSingleItem(output["Tag"]));
    }
    if (output["ObjectSizeGreaterThan"] !== undefined) {
      contents.ObjectSizeGreaterThan = strictParseLong(output["ObjectSizeGreaterThan"]);
    }
    if (output["ObjectSizeLessThan"] !== undefined) {
      contents.ObjectSizeLessThan = strictParseLong(output["ObjectSizeLessThan"]);
    }
    return contents;
  };
  const de_LifecycleRuleFilter = (output, context) => {
    if (output["Prefix"] !== undefined) {
      return {
        Prefix: expectString(output["Prefix"])
      };
    }
    if (output["Tag"] !== undefined) {
      return {
        Tag: de_Tag(output["Tag"])
      };
    }
    if (output["ObjectSizeGreaterThan"] !== undefined) {
      return {
        ObjectSizeGreaterThan: strictParseLong(output["ObjectSizeGreaterThan"])
      };
    }
    if (output["ObjectSizeLessThan"] !== undefined) {
      return {
        ObjectSizeLessThan: strictParseLong(output["ObjectSizeLessThan"])
      };
    }
    if (output["And"] !== undefined) {
      return {
        And: de_LifecycleRuleAndOperator(output["And"])
      };
    }
    return {
      $unknown: Object.entries(output)[0]
    };
  };
  const de_LifecycleRules = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_LifecycleRule(entry);
    });
  };
  const de_LoggingEnabled = (output, context) => {
    const contents = {};
    if (output["TargetBucket"] !== undefined) {
      contents.TargetBucket = expectString(output["TargetBucket"]);
    }
    if (output.TargetGrants === "") {
      contents.TargetGrants = [];
    } else if (output["TargetGrants"] !== undefined && output["TargetGrants"]["Grant"] !== undefined) {
      contents.TargetGrants = de_TargetGrants(getArrayIfSingleItem(output["TargetGrants"]["Grant"]));
    }
    if (output["TargetPrefix"] !== undefined) {
      contents.TargetPrefix = expectString(output["TargetPrefix"]);
    }
    return contents;
  };
  const de_Metrics = (output, context) => {
    const contents = {};
    if (output["Status"] !== undefined) {
      contents.Status = expectString(output["Status"]);
    }
    if (output["EventThreshold"] !== undefined) {
      contents.EventThreshold = de_ReplicationTimeValue(output["EventThreshold"]);
    }
    return contents;
  };
  const de_MetricsAndOperator = (output, context) => {
    const contents = {};
    if (output["Prefix"] !== undefined) {
      contents.Prefix = expectString(output["Prefix"]);
    }
    if (output.Tag === "") {
      contents.Tags = [];
    } else if (output["Tag"] !== undefined) {
      contents.Tags = de_TagSet(getArrayIfSingleItem(output["Tag"]));
    }
    if (output["AccessPointArn"] !== undefined) {
      contents.AccessPointArn = expectString(output["AccessPointArn"]);
    }
    return contents;
  };
  const de_MetricsConfiguration = (output, context) => {
    const contents = {};
    if (output["Id"] !== undefined) {
      contents.Id = expectString(output["Id"]);
    }
    if (output.Filter === "") ; else if (output["Filter"] !== undefined) {
      contents.Filter = de_MetricsFilter(expectUnion(output["Filter"]));
    }
    return contents;
  };
  const de_MetricsConfigurationList = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_MetricsConfiguration(entry);
    });
  };
  const de_MetricsFilter = (output, context) => {
    if (output["Prefix"] !== undefined) {
      return {
        Prefix: expectString(output["Prefix"])
      };
    }
    if (output["Tag"] !== undefined) {
      return {
        Tag: de_Tag(output["Tag"])
      };
    }
    if (output["AccessPointArn"] !== undefined) {
      return {
        AccessPointArn: expectString(output["AccessPointArn"])
      };
    }
    if (output["And"] !== undefined) {
      return {
        And: de_MetricsAndOperator(output["And"])
      };
    }
    return {
      $unknown: Object.entries(output)[0]
    };
  };
  const de_MultipartUpload = (output, context) => {
    const contents = {};
    if (output["UploadId"] !== undefined) {
      contents.UploadId = expectString(output["UploadId"]);
    }
    if (output["Key"] !== undefined) {
      contents.Key = expectString(output["Key"]);
    }
    if (output["Initiated"] !== undefined) {
      contents.Initiated = expectNonNull(parseRfc3339DateTimeWithOffset(output["Initiated"]));
    }
    if (output["StorageClass"] !== undefined) {
      contents.StorageClass = expectString(output["StorageClass"]);
    }
    if (output["Owner"] !== undefined) {
      contents.Owner = de_Owner(output["Owner"]);
    }
    if (output["Initiator"] !== undefined) {
      contents.Initiator = de_Initiator(output["Initiator"]);
    }
    if (output["ChecksumAlgorithm"] !== undefined) {
      contents.ChecksumAlgorithm = expectString(output["ChecksumAlgorithm"]);
    }
    return contents;
  };
  const de_MultipartUploadList = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_MultipartUpload(entry);
    });
  };
  const de_NoncurrentVersionExpiration = (output, context) => {
    const contents = {};
    if (output["NoncurrentDays"] !== undefined) {
      contents.NoncurrentDays = strictParseInt32(output["NoncurrentDays"]);
    }
    if (output["NewerNoncurrentVersions"] !== undefined) {
      contents.NewerNoncurrentVersions = strictParseInt32(output["NewerNoncurrentVersions"]);
    }
    return contents;
  };
  const de_NoncurrentVersionTransition = (output, context) => {
    const contents = {};
    if (output["NoncurrentDays"] !== undefined) {
      contents.NoncurrentDays = strictParseInt32(output["NoncurrentDays"]);
    }
    if (output["StorageClass"] !== undefined) {
      contents.StorageClass = expectString(output["StorageClass"]);
    }
    if (output["NewerNoncurrentVersions"] !== undefined) {
      contents.NewerNoncurrentVersions = strictParseInt32(output["NewerNoncurrentVersions"]);
    }
    return contents;
  };
  const de_NoncurrentVersionTransitionList = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_NoncurrentVersionTransition(entry);
    });
  };
  const de_NotificationConfigurationFilter = (output, context) => {
    const contents = {};
    if (output["S3Key"] !== undefined) {
      contents.Key = de_S3KeyFilter(output["S3Key"]);
    }
    return contents;
  };
  const de__Object = (output, context) => {
    const contents = {};
    if (output["Key"] !== undefined) {
      contents.Key = expectString(output["Key"]);
    }
    if (output["LastModified"] !== undefined) {
      contents.LastModified = expectNonNull(parseRfc3339DateTimeWithOffset(output["LastModified"]));
    }
    if (output["ETag"] !== undefined) {
      contents.ETag = expectString(output["ETag"]);
    }
    if (output.ChecksumAlgorithm === "") {
      contents.ChecksumAlgorithm = [];
    } else if (output["ChecksumAlgorithm"] !== undefined) {
      contents.ChecksumAlgorithm = de_ChecksumAlgorithmList(getArrayIfSingleItem(output["ChecksumAlgorithm"]));
    }
    if (output["Size"] !== undefined) {
      contents.Size = strictParseLong(output["Size"]);
    }
    if (output["StorageClass"] !== undefined) {
      contents.StorageClass = expectString(output["StorageClass"]);
    }
    if (output["Owner"] !== undefined) {
      contents.Owner = de_Owner(output["Owner"]);
    }
    if (output["RestoreStatus"] !== undefined) {
      contents.RestoreStatus = de_RestoreStatus(output["RestoreStatus"]);
    }
    return contents;
  };
  const de_ObjectList = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de__Object(entry);
    });
  };
  const de_ObjectLockConfiguration = (output, context) => {
    const contents = {};
    if (output["ObjectLockEnabled"] !== undefined) {
      contents.ObjectLockEnabled = expectString(output["ObjectLockEnabled"]);
    }
    if (output["Rule"] !== undefined) {
      contents.Rule = de_ObjectLockRule(output["Rule"]);
    }
    return contents;
  };
  const de_ObjectLockLegalHold = (output, context) => {
    const contents = {};
    if (output["Status"] !== undefined) {
      contents.Status = expectString(output["Status"]);
    }
    return contents;
  };
  const de_ObjectLockRetention = (output, context) => {
    const contents = {};
    if (output["Mode"] !== undefined) {
      contents.Mode = expectString(output["Mode"]);
    }
    if (output["RetainUntilDate"] !== undefined) {
      contents.RetainUntilDate = expectNonNull(parseRfc3339DateTimeWithOffset(output["RetainUntilDate"]));
    }
    return contents;
  };
  const de_ObjectLockRule = (output, context) => {
    const contents = {};
    if (output["DefaultRetention"] !== undefined) {
      contents.DefaultRetention = de_DefaultRetention(output["DefaultRetention"]);
    }
    return contents;
  };
  const de_ObjectPart = (output, context) => {
    const contents = {};
    if (output["PartNumber"] !== undefined) {
      contents.PartNumber = strictParseInt32(output["PartNumber"]);
    }
    if (output["Size"] !== undefined) {
      contents.Size = strictParseLong(output["Size"]);
    }
    if (output["ChecksumCRC32"] !== undefined) {
      contents.ChecksumCRC32 = expectString(output["ChecksumCRC32"]);
    }
    if (output["ChecksumCRC32C"] !== undefined) {
      contents.ChecksumCRC32C = expectString(output["ChecksumCRC32C"]);
    }
    if (output["ChecksumSHA1"] !== undefined) {
      contents.ChecksumSHA1 = expectString(output["ChecksumSHA1"]);
    }
    if (output["ChecksumSHA256"] !== undefined) {
      contents.ChecksumSHA256 = expectString(output["ChecksumSHA256"]);
    }
    return contents;
  };
  const de_ObjectVersion = (output, context) => {
    const contents = {};
    if (output["ETag"] !== undefined) {
      contents.ETag = expectString(output["ETag"]);
    }
    if (output.ChecksumAlgorithm === "") {
      contents.ChecksumAlgorithm = [];
    } else if (output["ChecksumAlgorithm"] !== undefined) {
      contents.ChecksumAlgorithm = de_ChecksumAlgorithmList(getArrayIfSingleItem(output["ChecksumAlgorithm"]));
    }
    if (output["Size"] !== undefined) {
      contents.Size = strictParseLong(output["Size"]);
    }
    if (output["StorageClass"] !== undefined) {
      contents.StorageClass = expectString(output["StorageClass"]);
    }
    if (output["Key"] !== undefined) {
      contents.Key = expectString(output["Key"]);
    }
    if (output["VersionId"] !== undefined) {
      contents.VersionId = expectString(output["VersionId"]);
    }
    if (output["IsLatest"] !== undefined) {
      contents.IsLatest = parseBoolean(output["IsLatest"]);
    }
    if (output["LastModified"] !== undefined) {
      contents.LastModified = expectNonNull(parseRfc3339DateTimeWithOffset(output["LastModified"]));
    }
    if (output["Owner"] !== undefined) {
      contents.Owner = de_Owner(output["Owner"]);
    }
    if (output["RestoreStatus"] !== undefined) {
      contents.RestoreStatus = de_RestoreStatus(output["RestoreStatus"]);
    }
    return contents;
  };
  const de_ObjectVersionList = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_ObjectVersion(entry);
    });
  };
  const de_Owner = (output, context) => {
    const contents = {};
    if (output["DisplayName"] !== undefined) {
      contents.DisplayName = expectString(output["DisplayName"]);
    }
    if (output["ID"] !== undefined) {
      contents.ID = expectString(output["ID"]);
    }
    return contents;
  };
  const de_OwnershipControls = (output, context) => {
    const contents = {};
    if (output.Rule === "") {
      contents.Rules = [];
    } else if (output["Rule"] !== undefined) {
      contents.Rules = de_OwnershipControlsRules(getArrayIfSingleItem(output["Rule"]));
    }
    return contents;
  };
  const de_OwnershipControlsRule = (output, context) => {
    const contents = {};
    if (output["ObjectOwnership"] !== undefined) {
      contents.ObjectOwnership = expectString(output["ObjectOwnership"]);
    }
    return contents;
  };
  const de_OwnershipControlsRules = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_OwnershipControlsRule(entry);
    });
  };
  const de_Part = (output, context) => {
    const contents = {};
    if (output["PartNumber"] !== undefined) {
      contents.PartNumber = strictParseInt32(output["PartNumber"]);
    }
    if (output["LastModified"] !== undefined) {
      contents.LastModified = expectNonNull(parseRfc3339DateTimeWithOffset(output["LastModified"]));
    }
    if (output["ETag"] !== undefined) {
      contents.ETag = expectString(output["ETag"]);
    }
    if (output["Size"] !== undefined) {
      contents.Size = strictParseLong(output["Size"]);
    }
    if (output["ChecksumCRC32"] !== undefined) {
      contents.ChecksumCRC32 = expectString(output["ChecksumCRC32"]);
    }
    if (output["ChecksumCRC32C"] !== undefined) {
      contents.ChecksumCRC32C = expectString(output["ChecksumCRC32C"]);
    }
    if (output["ChecksumSHA1"] !== undefined) {
      contents.ChecksumSHA1 = expectString(output["ChecksumSHA1"]);
    }
    if (output["ChecksumSHA256"] !== undefined) {
      contents.ChecksumSHA256 = expectString(output["ChecksumSHA256"]);
    }
    return contents;
  };
  const de_Parts = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_Part(entry);
    });
  };
  const de_PartsList = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_ObjectPart(entry);
    });
  };
  const de_PolicyStatus = (output, context) => {
    const contents = {};
    if (output["IsPublic"] !== undefined) {
      contents.IsPublic = parseBoolean(output["IsPublic"]);
    }
    return contents;
  };
  const de_Progress = (output, context) => {
    const contents = {};
    if (output["BytesScanned"] !== undefined) {
      contents.BytesScanned = strictParseLong(output["BytesScanned"]);
    }
    if (output["BytesProcessed"] !== undefined) {
      contents.BytesProcessed = strictParseLong(output["BytesProcessed"]);
    }
    if (output["BytesReturned"] !== undefined) {
      contents.BytesReturned = strictParseLong(output["BytesReturned"]);
    }
    return contents;
  };
  const de_PublicAccessBlockConfiguration = (output, context) => {
    const contents = {};
    if (output["BlockPublicAcls"] !== undefined) {
      contents.BlockPublicAcls = parseBoolean(output["BlockPublicAcls"]);
    }
    if (output["IgnorePublicAcls"] !== undefined) {
      contents.IgnorePublicAcls = parseBoolean(output["IgnorePublicAcls"]);
    }
    if (output["BlockPublicPolicy"] !== undefined) {
      contents.BlockPublicPolicy = parseBoolean(output["BlockPublicPolicy"]);
    }
    if (output["RestrictPublicBuckets"] !== undefined) {
      contents.RestrictPublicBuckets = parseBoolean(output["RestrictPublicBuckets"]);
    }
    return contents;
  };
  const de_QueueConfiguration = (output, context) => {
    const contents = {};
    if (output["Id"] !== undefined) {
      contents.Id = expectString(output["Id"]);
    }
    if (output["Queue"] !== undefined) {
      contents.QueueArn = expectString(output["Queue"]);
    }
    if (output.Event === "") {
      contents.Events = [];
    } else if (output["Event"] !== undefined) {
      contents.Events = de_EventList(getArrayIfSingleItem(output["Event"]));
    }
    if (output["Filter"] !== undefined) {
      contents.Filter = de_NotificationConfigurationFilter(output["Filter"]);
    }
    return contents;
  };
  const de_QueueConfigurationList = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_QueueConfiguration(entry);
    });
  };
  const de_Redirect = (output, context) => {
    const contents = {};
    if (output["HostName"] !== undefined) {
      contents.HostName = expectString(output["HostName"]);
    }
    if (output["HttpRedirectCode"] !== undefined) {
      contents.HttpRedirectCode = expectString(output["HttpRedirectCode"]);
    }
    if (output["Protocol"] !== undefined) {
      contents.Protocol = expectString(output["Protocol"]);
    }
    if (output["ReplaceKeyPrefixWith"] !== undefined) {
      contents.ReplaceKeyPrefixWith = expectString(output["ReplaceKeyPrefixWith"]);
    }
    if (output["ReplaceKeyWith"] !== undefined) {
      contents.ReplaceKeyWith = expectString(output["ReplaceKeyWith"]);
    }
    return contents;
  };
  const de_RedirectAllRequestsTo = (output, context) => {
    const contents = {};
    if (output["HostName"] !== undefined) {
      contents.HostName = expectString(output["HostName"]);
    }
    if (output["Protocol"] !== undefined) {
      contents.Protocol = expectString(output["Protocol"]);
    }
    return contents;
  };
  const de_ReplicaModifications = (output, context) => {
    const contents = {};
    if (output["Status"] !== undefined) {
      contents.Status = expectString(output["Status"]);
    }
    return contents;
  };
  const de_ReplicationConfiguration = (output, context) => {
    const contents = {};
    if (output["Role"] !== undefined) {
      contents.Role = expectString(output["Role"]);
    }
    if (output.Rule === "") {
      contents.Rules = [];
    } else if (output["Rule"] !== undefined) {
      contents.Rules = de_ReplicationRules(getArrayIfSingleItem(output["Rule"]));
    }
    return contents;
  };
  const de_ReplicationRule = (output, context) => {
    const contents = {};
    if (output["ID"] !== undefined) {
      contents.ID = expectString(output["ID"]);
    }
    if (output["Priority"] !== undefined) {
      contents.Priority = strictParseInt32(output["Priority"]);
    }
    if (output["Prefix"] !== undefined) {
      contents.Prefix = expectString(output["Prefix"]);
    }
    if (output.Filter === "") ; else if (output["Filter"] !== undefined) {
      contents.Filter = de_ReplicationRuleFilter(expectUnion(output["Filter"]));
    }
    if (output["Status"] !== undefined) {
      contents.Status = expectString(output["Status"]);
    }
    if (output["SourceSelectionCriteria"] !== undefined) {
      contents.SourceSelectionCriteria = de_SourceSelectionCriteria(output["SourceSelectionCriteria"]);
    }
    if (output["ExistingObjectReplication"] !== undefined) {
      contents.ExistingObjectReplication = de_ExistingObjectReplication(output["ExistingObjectReplication"]);
    }
    if (output["Destination"] !== undefined) {
      contents.Destination = de_Destination(output["Destination"]);
    }
    if (output["DeleteMarkerReplication"] !== undefined) {
      contents.DeleteMarkerReplication = de_DeleteMarkerReplication(output["DeleteMarkerReplication"]);
    }
    return contents;
  };
  const de_ReplicationRuleAndOperator = (output, context) => {
    const contents = {};
    if (output["Prefix"] !== undefined) {
      contents.Prefix = expectString(output["Prefix"]);
    }
    if (output.Tag === "") {
      contents.Tags = [];
    } else if (output["Tag"] !== undefined) {
      contents.Tags = de_TagSet(getArrayIfSingleItem(output["Tag"]));
    }
    return contents;
  };
  const de_ReplicationRuleFilter = (output, context) => {
    if (output["Prefix"] !== undefined) {
      return {
        Prefix: expectString(output["Prefix"])
      };
    }
    if (output["Tag"] !== undefined) {
      return {
        Tag: de_Tag(output["Tag"])
      };
    }
    if (output["And"] !== undefined) {
      return {
        And: de_ReplicationRuleAndOperator(output["And"])
      };
    }
    return {
      $unknown: Object.entries(output)[0]
    };
  };
  const de_ReplicationRules = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_ReplicationRule(entry);
    });
  };
  const de_ReplicationTime = (output, context) => {
    const contents = {};
    if (output["Status"] !== undefined) {
      contents.Status = expectString(output["Status"]);
    }
    if (output["Time"] !== undefined) {
      contents.Time = de_ReplicationTimeValue(output["Time"]);
    }
    return contents;
  };
  const de_ReplicationTimeValue = (output, context) => {
    const contents = {};
    if (output["Minutes"] !== undefined) {
      contents.Minutes = strictParseInt32(output["Minutes"]);
    }
    return contents;
  };
  const de_RestoreStatus = (output, context) => {
    const contents = {};
    if (output["IsRestoreInProgress"] !== undefined) {
      contents.IsRestoreInProgress = parseBoolean(output["IsRestoreInProgress"]);
    }
    if (output["RestoreExpiryDate"] !== undefined) {
      contents.RestoreExpiryDate = expectNonNull(parseRfc3339DateTimeWithOffset(output["RestoreExpiryDate"]));
    }
    return contents;
  };
  const de_RoutingRule = (output, context) => {
    const contents = {};
    if (output["Condition"] !== undefined) {
      contents.Condition = de_Condition(output["Condition"]);
    }
    if (output["Redirect"] !== undefined) {
      contents.Redirect = de_Redirect(output["Redirect"]);
    }
    return contents;
  };
  const de_RoutingRules = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_RoutingRule(entry);
    });
  };
  const de_S3KeyFilter = (output, context) => {
    const contents = {};
    if (output.FilterRule === "") {
      contents.FilterRules = [];
    } else if (output["FilterRule"] !== undefined) {
      contents.FilterRules = de_FilterRuleList(getArrayIfSingleItem(output["FilterRule"]));
    }
    return contents;
  };
  const de_ServerSideEncryptionByDefault = (output, context) => {
    const contents = {};
    if (output["SSEAlgorithm"] !== undefined) {
      contents.SSEAlgorithm = expectString(output["SSEAlgorithm"]);
    }
    if (output["KMSMasterKeyID"] !== undefined) {
      contents.KMSMasterKeyID = expectString(output["KMSMasterKeyID"]);
    }
    return contents;
  };
  const de_ServerSideEncryptionConfiguration = (output, context) => {
    const contents = {};
    if (output.Rule === "") {
      contents.Rules = [];
    } else if (output["Rule"] !== undefined) {
      contents.Rules = de_ServerSideEncryptionRules(getArrayIfSingleItem(output["Rule"]));
    }
    return contents;
  };
  const de_ServerSideEncryptionRule = (output, context) => {
    const contents = {};
    if (output["ApplyServerSideEncryptionByDefault"] !== undefined) {
      contents.ApplyServerSideEncryptionByDefault = de_ServerSideEncryptionByDefault(output["ApplyServerSideEncryptionByDefault"]);
    }
    if (output["BucketKeyEnabled"] !== undefined) {
      contents.BucketKeyEnabled = parseBoolean(output["BucketKeyEnabled"]);
    }
    return contents;
  };
  const de_ServerSideEncryptionRules = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_ServerSideEncryptionRule(entry);
    });
  };
  const de_SourceSelectionCriteria = (output, context) => {
    const contents = {};
    if (output["SseKmsEncryptedObjects"] !== undefined) {
      contents.SseKmsEncryptedObjects = de_SseKmsEncryptedObjects(output["SseKmsEncryptedObjects"]);
    }
    if (output["ReplicaModifications"] !== undefined) {
      contents.ReplicaModifications = de_ReplicaModifications(output["ReplicaModifications"]);
    }
    return contents;
  };
  const de_SSEKMS = (output, context) => {
    const contents = {};
    if (output["KeyId"] !== undefined) {
      contents.KeyId = expectString(output["KeyId"]);
    }
    return contents;
  };
  const de_SseKmsEncryptedObjects = (output, context) => {
    const contents = {};
    if (output["Status"] !== undefined) {
      contents.Status = expectString(output["Status"]);
    }
    return contents;
  };
  const de_SSES3 = (output, context) => {
    const contents = {};
    return contents;
  };
  const de_Stats = (output, context) => {
    const contents = {};
    if (output["BytesScanned"] !== undefined) {
      contents.BytesScanned = strictParseLong(output["BytesScanned"]);
    }
    if (output["BytesProcessed"] !== undefined) {
      contents.BytesProcessed = strictParseLong(output["BytesProcessed"]);
    }
    if (output["BytesReturned"] !== undefined) {
      contents.BytesReturned = strictParseLong(output["BytesReturned"]);
    }
    return contents;
  };
  const de_StorageClassAnalysis = (output, context) => {
    const contents = {};
    if (output["DataExport"] !== undefined) {
      contents.DataExport = de_StorageClassAnalysisDataExport(output["DataExport"]);
    }
    return contents;
  };
  const de_StorageClassAnalysisDataExport = (output, context) => {
    const contents = {};
    if (output["OutputSchemaVersion"] !== undefined) {
      contents.OutputSchemaVersion = expectString(output["OutputSchemaVersion"]);
    }
    if (output["Destination"] !== undefined) {
      contents.Destination = de_AnalyticsExportDestination(output["Destination"]);
    }
    return contents;
  };
  const de_Tag = (output, context) => {
    const contents = {};
    if (output["Key"] !== undefined) {
      contents.Key = expectString(output["Key"]);
    }
    if (output["Value"] !== undefined) {
      contents.Value = expectString(output["Value"]);
    }
    return contents;
  };
  const de_TagSet = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_Tag(entry);
    });
  };
  const de_TargetGrant = (output, context) => {
    const contents = {};
    if (output["Grantee"] !== undefined) {
      contents.Grantee = de_Grantee(output["Grantee"]);
    }
    if (output["Permission"] !== undefined) {
      contents.Permission = expectString(output["Permission"]);
    }
    return contents;
  };
  const de_TargetGrants = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_TargetGrant(entry);
    });
  };
  const de_Tiering = (output, context) => {
    const contents = {};
    if (output["Days"] !== undefined) {
      contents.Days = strictParseInt32(output["Days"]);
    }
    if (output["AccessTier"] !== undefined) {
      contents.AccessTier = expectString(output["AccessTier"]);
    }
    return contents;
  };
  const de_TieringList = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_Tiering(entry);
    });
  };
  const de_TopicConfiguration = (output, context) => {
    const contents = {};
    if (output["Id"] !== undefined) {
      contents.Id = expectString(output["Id"]);
    }
    if (output["Topic"] !== undefined) {
      contents.TopicArn = expectString(output["Topic"]);
    }
    if (output.Event === "") {
      contents.Events = [];
    } else if (output["Event"] !== undefined) {
      contents.Events = de_EventList(getArrayIfSingleItem(output["Event"]));
    }
    if (output["Filter"] !== undefined) {
      contents.Filter = de_NotificationConfigurationFilter(output["Filter"]);
    }
    return contents;
  };
  const de_TopicConfigurationList = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_TopicConfiguration(entry);
    });
  };
  const de_Transition = (output, context) => {
    const contents = {};
    if (output["Date"] !== undefined) {
      contents.Date = expectNonNull(parseRfc3339DateTimeWithOffset(output["Date"]));
    }
    if (output["Days"] !== undefined) {
      contents.Days = strictParseInt32(output["Days"]);
    }
    if (output["StorageClass"] !== undefined) {
      contents.StorageClass = expectString(output["StorageClass"]);
    }
    return contents;
  };
  const de_TransitionList = (output, context) => {
    return (output || []).filter(e => e != null).map(entry => {
      return de_Transition(entry);
    });
  };
  const deserializeMetadata = output => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"]
  });
  const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then(body => context.utf8Encoder(body));
  const isSerializableHeaderValue = value => value !== undefined && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
  const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then(encoded => {
    if (encoded.length) {
      const parser = new fxp.XMLParser({
        attributeNamePrefix: "",
        htmlEntities: true,
        ignoreAttributes: false,
        ignoreDeclaration: true,
        parseTagValue: false,
        trimValues: false,
        tagValueProcessor: (_, val) => val.trim() === "" && val.includes("\n") ? "" : undefined
      });
      parser.addEntity("#xD", "\r");
      parser.addEntity("#10", "\n");
      const parsedObj = parser.parse(encoded);
      const textNodeName = "#text";
      const key = Object.keys(parsedObj)[0];
      const parsedObjToReturn = parsedObj[key];
      if (parsedObjToReturn[textNodeName]) {
        parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
        delete parsedObjToReturn[textNodeName];
      }
      return getValueFromTextNode(parsedObjToReturn);
    }
    return {};
  });
  const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    if (value.Error) {
      value.Error.message = value.Error.message ?? value.Error.Message;
    }
    return value;
  };
  const loadRestXmlErrorCode = (output, data) => {
    if (data?.Code !== undefined) {
      return data.Code;
    }
    if (output.statusCode == 404) {
      return "NotFound";
    }
  };

  class AbortMultipartUploadCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, AbortMultipartUploadCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "AbortMultipartUploadCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_AbortMultipartUploadCommand(input, context);
    }
    deserialize(output, context) {
      return de_AbortMultipartUploadCommand(output, context);
    }
  }

  function ssecMiddleware(options) {
    return next => async args => {
      let input = {
        ...args.input
      };
      const properties = [{
        target: "SSECustomerKey",
        hash: "SSECustomerKeyMD5"
      }, {
        target: "CopySourceSSECustomerKey",
        hash: "CopySourceSSECustomerKeyMD5"
      }];
      for (const prop of properties) {
        const value = input[prop.target];
        if (value) {
          const valueView = ArrayBuffer.isView(value) ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength) : typeof value === "string" ? options.utf8Decoder(value) : new Uint8Array(value);
          const encoded = options.base64Encoder(valueView);
          const hash = new options.md5();
          hash.update(valueView);
          input = {
            ...input,
            [prop.target]: encoded,
            [prop.hash]: options.base64Encoder(await hash.digest())
          };
        }
      }
      return next({
        ...args,
        input
      });
    };
  }
  const ssecMiddlewareOptions = {
    name: "ssecMiddleware",
    step: "initialize",
    tags: ["SSE"],
    override: true
  };
  const getSsecPlugin = config => ({
    applyToStack: clientStack => {
      clientStack.add(ssecMiddleware(config), ssecMiddlewareOptions);
    }
  });

  class CompleteMultipartUploadCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, CompleteMultipartUploadCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getThrow200ExceptionsPlugin(configuration));
      this.middlewareStack.use(getSsecPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "CompleteMultipartUploadCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: CompleteMultipartUploadRequestFilterSensitiveLog,
        outputFilterSensitiveLog: CompleteMultipartUploadOutputFilterSensitiveLog
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_CompleteMultipartUploadCommand(input, context);
    }
    deserialize(output, context) {
      return de_CompleteMultipartUploadCommand(output, context);
    }
  }

  class CopyObjectCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, CopyObjectCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getThrow200ExceptionsPlugin(configuration));
      this.middlewareStack.use(getSsecPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "CopyObjectCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: CopyObjectRequestFilterSensitiveLog,
        outputFilterSensitiveLog: CopyObjectOutputFilterSensitiveLog
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_CopyObjectCommand(input, context);
    }
    deserialize(output, context) {
      return de_CopyObjectCommand(output, context);
    }
  }

  function locationConstraintMiddleware(options) {
    return next => async args => {
      const {
        CreateBucketConfiguration
      } = args.input;
      const region = await options.region();
      if (!CreateBucketConfiguration || !CreateBucketConfiguration.LocationConstraint) {
        args = {
          ...args,
          input: {
            ...args.input,
            CreateBucketConfiguration: region === "us-east-1" ? undefined : {
              LocationConstraint: region
            }
          }
        };
      }
      return next(args);
    };
  }
  const locationConstraintMiddlewareOptions = {
    step: "initialize",
    tags: ["LOCATION_CONSTRAINT", "CREATE_BUCKET_CONFIGURATION"],
    name: "locationConstraintMiddleware",
    override: true
  };
  const getLocationConstraintPlugin = config => ({
    applyToStack: clientStack => {
      clientStack.add(locationConstraintMiddleware(config), locationConstraintMiddlewareOptions);
    }
  });

  class CreateBucketCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        DisableAccessPoints: {
          type: "staticContextParams",
          value: true
        },
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, CreateBucketCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getLocationConstraintPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "CreateBucketCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_CreateBucketCommand(input, context);
    }
    deserialize(output, context) {
      return de_CreateBucketCommand(output, context);
    }
  }

  class CreateMultipartUploadCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, CreateMultipartUploadCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getSsecPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "CreateMultipartUploadCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: CreateMultipartUploadRequestFilterSensitiveLog,
        outputFilterSensitiveLog: CreateMultipartUploadOutputFilterSensitiveLog
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_CreateMultipartUploadCommand(input, context);
    }
    deserialize(output, context) {
      return de_CreateMultipartUploadCommand(output, context);
    }
  }

  class DeleteBucketAnalyticsConfigurationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, DeleteBucketAnalyticsConfigurationCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketAnalyticsConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_DeleteBucketAnalyticsConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return de_DeleteBucketAnalyticsConfigurationCommand(output, context);
    }
  }

  class DeleteBucketCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, DeleteBucketCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_DeleteBucketCommand(input, context);
    }
    deserialize(output, context) {
      return de_DeleteBucketCommand(output, context);
    }
  }

  class DeleteBucketCorsCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, DeleteBucketCorsCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketCorsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_DeleteBucketCorsCommand(input, context);
    }
    deserialize(output, context) {
      return de_DeleteBucketCorsCommand(output, context);
    }
  }

  class DeleteBucketEncryptionCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, DeleteBucketEncryptionCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketEncryptionCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_DeleteBucketEncryptionCommand(input, context);
    }
    deserialize(output, context) {
      return de_DeleteBucketEncryptionCommand(output, context);
    }
  }

  class DeleteBucketIntelligentTieringConfigurationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, DeleteBucketIntelligentTieringConfigurationCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketIntelligentTieringConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_DeleteBucketIntelligentTieringConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return de_DeleteBucketIntelligentTieringConfigurationCommand(output, context);
    }
  }

  class DeleteBucketInventoryConfigurationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, DeleteBucketInventoryConfigurationCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketInventoryConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_DeleteBucketInventoryConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return de_DeleteBucketInventoryConfigurationCommand(output, context);
    }
  }

  class DeleteBucketLifecycleCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, DeleteBucketLifecycleCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketLifecycleCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_DeleteBucketLifecycleCommand(input, context);
    }
    deserialize(output, context) {
      return de_DeleteBucketLifecycleCommand(output, context);
    }
  }

  class DeleteBucketMetricsConfigurationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, DeleteBucketMetricsConfigurationCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketMetricsConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_DeleteBucketMetricsConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return de_DeleteBucketMetricsConfigurationCommand(output, context);
    }
  }

  class DeleteBucketOwnershipControlsCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, DeleteBucketOwnershipControlsCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketOwnershipControlsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_DeleteBucketOwnershipControlsCommand(input, context);
    }
    deserialize(output, context) {
      return de_DeleteBucketOwnershipControlsCommand(output, context);
    }
  }

  class DeleteBucketPolicyCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, DeleteBucketPolicyCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketPolicyCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_DeleteBucketPolicyCommand(input, context);
    }
    deserialize(output, context) {
      return de_DeleteBucketPolicyCommand(output, context);
    }
  }

  class DeleteBucketReplicationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, DeleteBucketReplicationCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketReplicationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_DeleteBucketReplicationCommand(input, context);
    }
    deserialize(output, context) {
      return de_DeleteBucketReplicationCommand(output, context);
    }
  }

  class DeleteBucketTaggingCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, DeleteBucketTaggingCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketTaggingCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_DeleteBucketTaggingCommand(input, context);
    }
    deserialize(output, context) {
      return de_DeleteBucketTaggingCommand(output, context);
    }
  }

  class DeleteBucketWebsiteCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, DeleteBucketWebsiteCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteBucketWebsiteCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_DeleteBucketWebsiteCommand(input, context);
    }
    deserialize(output, context) {
      return de_DeleteBucketWebsiteCommand(output, context);
    }
  }

  class DeleteObjectCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, DeleteObjectCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteObjectCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_DeleteObjectCommand(input, context);
    }
    deserialize(output, context) {
      return de_DeleteObjectCommand(output, context);
    }
  }

  var ChecksumAlgorithm;
  (function (ChecksumAlgorithm) {
    ChecksumAlgorithm["MD5"] = "MD5";
    ChecksumAlgorithm["CRC32"] = "CRC32";
    ChecksumAlgorithm["CRC32C"] = "CRC32C";
    ChecksumAlgorithm["SHA1"] = "SHA1";
    ChecksumAlgorithm["SHA256"] = "SHA256";
  })(ChecksumAlgorithm || (ChecksumAlgorithm = {}));
  var ChecksumLocation;
  (function (ChecksumLocation) {
    ChecksumLocation["HEADER"] = "header";
    ChecksumLocation["TRAILER"] = "trailer";
  })(ChecksumLocation || (ChecksumLocation = {}));

  const CLIENT_SUPPORTED_ALGORITHMS = [ChecksumAlgorithm.CRC32, ChecksumAlgorithm.CRC32C, ChecksumAlgorithm.SHA1, ChecksumAlgorithm.SHA256];
  const PRIORITY_ORDER_ALGORITHMS = [ChecksumAlgorithm.CRC32, ChecksumAlgorithm.CRC32C, ChecksumAlgorithm.SHA1, ChecksumAlgorithm.SHA256];

  const getChecksumAlgorithmForRequest = (input, {
    requestChecksumRequired,
    requestAlgorithmMember
  }) => {
    if (!requestAlgorithmMember || !input[requestAlgorithmMember]) {
      return requestChecksumRequired ? ChecksumAlgorithm.MD5 : undefined;
    }
    const checksumAlgorithm = input[requestAlgorithmMember];
    if (!CLIENT_SUPPORTED_ALGORITHMS.includes(checksumAlgorithm)) {
      throw new Error(`The checksum algorithm "${checksumAlgorithm}" is not supported by the client.` + ` Select one of ${CLIENT_SUPPORTED_ALGORITHMS}.`);
    }
    return checksumAlgorithm;
  };

  const getChecksumLocationName = algorithm => algorithm === ChecksumAlgorithm.MD5 ? "content-md5" : `x-amz-checksum-${algorithm.toLowerCase()}`;

  const hasHeader = (header, headers) => {
    const soughtHeader = header.toLowerCase();
    for (const headerName of Object.keys(headers)) {
      if (soughtHeader === headerName.toLowerCase()) {
        return true;
      }
    }
    return false;
  };

  const isStreaming = body => body !== undefined && typeof body !== "string" && !ArrayBuffer.isView(body) && !isArrayBuffer(body);

  var build = {};

  var aws_crc32c = {};

  var hasRequiredAws_crc32c;
  function requireAws_crc32c() {
    if (hasRequiredAws_crc32c) return aws_crc32c;
    hasRequiredAws_crc32c = 1;
    // Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
    // SPDX-License-Identifier: Apache-2.0
    Object.defineProperty(aws_crc32c, "__esModule", {
      value: true
    });
    aws_crc32c.AwsCrc32c = void 0;
    var tslib_1 = require$$0;
    var util_1 = requireBuild$5();
    var index_1 = requireBuild();
    var AwsCrc32c = /** @class */function () {
      function AwsCrc32c() {
        this.crc32c = new index_1.Crc32c();
      }
      AwsCrc32c.prototype.update = function (toHash) {
        if ((0, util_1.isEmptyData)(toHash)) return;
        this.crc32c.update((0, util_1.convertToBuffer)(toHash));
      };
      AwsCrc32c.prototype.digest = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
          return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, (0, util_1.numToUint8)(this.crc32c.digest())];
          });
        });
      };
      AwsCrc32c.prototype.reset = function () {
        this.crc32c = new index_1.Crc32c();
      };
      return AwsCrc32c;
    }();
    aws_crc32c.AwsCrc32c = AwsCrc32c;
    return aws_crc32c;
  }

  var hasRequiredBuild;
  function requireBuild() {
    if (hasRequiredBuild) return build;
    hasRequiredBuild = 1;
    (function (exports) {

      // Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
      // SPDX-License-Identifier: Apache-2.0
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.AwsCrc32c = exports.Crc32c = exports.crc32c = void 0;
      var tslib_1 = require$$0;
      var util_1 = requireBuild$5();
      function crc32c(data) {
        return new Crc32c().update(data).digest();
      }
      exports.crc32c = crc32c;
      var Crc32c = /** @class */function () {
        function Crc32c() {
          this.checksum = 0xffffffff;
        }
        Crc32c.prototype.update = function (data) {
          var e_1, _a;
          try {
            for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
              var byte = data_1_1.value;
              this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 0xff];
            }
          } catch (e_1_1) {
            e_1 = {
              error: e_1_1
            };
          } finally {
            try {
              if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
          return this;
        };
        Crc32c.prototype.digest = function () {
          return (this.checksum ^ 0xffffffff) >>> 0;
        };
        return Crc32c;
      }();
      exports.Crc32c = Crc32c;
      // prettier-ignore
      var a_lookupTable = [0x00000000, 0xF26B8303, 0xE13B70F7, 0x1350F3F4, 0xC79A971F, 0x35F1141C, 0x26A1E7E8, 0xD4CA64EB, 0x8AD958CF, 0x78B2DBCC, 0x6BE22838, 0x9989AB3B, 0x4D43CFD0, 0xBF284CD3, 0xAC78BF27, 0x5E133C24, 0x105EC76F, 0xE235446C, 0xF165B798, 0x030E349B, 0xD7C45070, 0x25AFD373, 0x36FF2087, 0xC494A384, 0x9A879FA0, 0x68EC1CA3, 0x7BBCEF57, 0x89D76C54, 0x5D1D08BF, 0xAF768BBC, 0xBC267848, 0x4E4DFB4B, 0x20BD8EDE, 0xD2D60DDD, 0xC186FE29, 0x33ED7D2A, 0xE72719C1, 0x154C9AC2, 0x061C6936, 0xF477EA35, 0xAA64D611, 0x580F5512, 0x4B5FA6E6, 0xB93425E5, 0x6DFE410E, 0x9F95C20D, 0x8CC531F9, 0x7EAEB2FA, 0x30E349B1, 0xC288CAB2, 0xD1D83946, 0x23B3BA45, 0xF779DEAE, 0x05125DAD, 0x1642AE59, 0xE4292D5A, 0xBA3A117E, 0x4851927D, 0x5B016189, 0xA96AE28A, 0x7DA08661, 0x8FCB0562, 0x9C9BF696, 0x6EF07595, 0x417B1DBC, 0xB3109EBF, 0xA0406D4B, 0x522BEE48, 0x86E18AA3, 0x748A09A0, 0x67DAFA54, 0x95B17957, 0xCBA24573, 0x39C9C670, 0x2A993584, 0xD8F2B687, 0x0C38D26C, 0xFE53516F, 0xED03A29B, 0x1F682198, 0x5125DAD3, 0xA34E59D0, 0xB01EAA24, 0x42752927, 0x96BF4DCC, 0x64D4CECF, 0x77843D3B, 0x85EFBE38, 0xDBFC821C, 0x2997011F, 0x3AC7F2EB, 0xC8AC71E8, 0x1C661503, 0xEE0D9600, 0xFD5D65F4, 0x0F36E6F7, 0x61C69362, 0x93AD1061, 0x80FDE395, 0x72966096, 0xA65C047D, 0x5437877E, 0x4767748A, 0xB50CF789, 0xEB1FCBAD, 0x197448AE, 0x0A24BB5A, 0xF84F3859, 0x2C855CB2, 0xDEEEDFB1, 0xCDBE2C45, 0x3FD5AF46, 0x7198540D, 0x83F3D70E, 0x90A324FA, 0x62C8A7F9, 0xB602C312, 0x44694011, 0x5739B3E5, 0xA55230E6, 0xFB410CC2, 0x092A8FC1, 0x1A7A7C35, 0xE811FF36, 0x3CDB9BDD, 0xCEB018DE, 0xDDE0EB2A, 0x2F8B6829, 0x82F63B78, 0x709DB87B, 0x63CD4B8F, 0x91A6C88C, 0x456CAC67, 0xB7072F64, 0xA457DC90, 0x563C5F93, 0x082F63B7, 0xFA44E0B4, 0xE9141340, 0x1B7F9043, 0xCFB5F4A8, 0x3DDE77AB, 0x2E8E845F, 0xDCE5075C, 0x92A8FC17, 0x60C37F14, 0x73938CE0, 0x81F80FE3, 0x55326B08, 0xA759E80B, 0xB4091BFF, 0x466298FC, 0x1871A4D8, 0xEA1A27DB, 0xF94AD42F, 0x0B21572C, 0xDFEB33C7, 0x2D80B0C4, 0x3ED04330, 0xCCBBC033, 0xA24BB5A6, 0x502036A5, 0x4370C551, 0xB11B4652, 0x65D122B9, 0x97BAA1BA, 0x84EA524E, 0x7681D14D, 0x2892ED69, 0xDAF96E6A, 0xC9A99D9E, 0x3BC21E9D, 0xEF087A76, 0x1D63F975, 0x0E330A81, 0xFC588982, 0xB21572C9, 0x407EF1CA, 0x532E023E, 0xA145813D, 0x758FE5D6, 0x87E466D5, 0x94B49521, 0x66DF1622, 0x38CC2A06, 0xCAA7A905, 0xD9F75AF1, 0x2B9CD9F2, 0xFF56BD19, 0x0D3D3E1A, 0x1E6DCDEE, 0xEC064EED, 0xC38D26C4, 0x31E6A5C7, 0x22B65633, 0xD0DDD530, 0x0417B1DB, 0xF67C32D8, 0xE52CC12C, 0x1747422F, 0x49547E0B, 0xBB3FFD08, 0xA86F0EFC, 0x5A048DFF, 0x8ECEE914, 0x7CA56A17, 0x6FF599E3, 0x9D9E1AE0, 0xD3D3E1AB, 0x21B862A8, 0x32E8915C, 0xC083125F, 0x144976B4, 0xE622F5B7, 0xF5720643, 0x07198540, 0x590AB964, 0xAB613A67, 0xB831C993, 0x4A5A4A90, 0x9E902E7B, 0x6CFBAD78, 0x7FAB5E8C, 0x8DC0DD8F, 0xE330A81A, 0x115B2B19, 0x020BD8ED, 0xF0605BEE, 0x24AA3F05, 0xD6C1BC06, 0xC5914FF2, 0x37FACCF1, 0x69E9F0D5, 0x9B8273D6, 0x88D28022, 0x7AB90321, 0xAE7367CA, 0x5C18E4C9, 0x4F48173D, 0xBD23943E, 0xF36E6F75, 0x0105EC76, 0x12551F82, 0xE03E9C81, 0x34F4F86A, 0xC69F7B69, 0xD5CF889D, 0x27A40B9E, 0x79B737BA, 0x8BDCB4B9, 0x988C474D, 0x6AE7C44E, 0xBE2DA0A5, 0x4C4623A6, 0x5F16D052, 0xAD7D5351];
      var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookupTable);
      var aws_crc32c_1 = requireAws_crc32c();
      Object.defineProperty(exports, "AwsCrc32c", {
        enumerable: true,
        get: function () {
          return aws_crc32c_1.AwsCrc32c;
        }
      });
    })(build);
    return build;
  }

  var buildExports = requireBuild();

  const selectChecksumAlgorithmFunction = (checksumAlgorithm, config) => ({
    [ChecksumAlgorithm.MD5]: config.md5,
    [ChecksumAlgorithm.CRC32]: buildExports$1.AwsCrc32,
    [ChecksumAlgorithm.CRC32C]: buildExports.AwsCrc32c,
    [ChecksumAlgorithm.SHA1]: config.sha1,
    [ChecksumAlgorithm.SHA256]: config.sha256
  })[checksumAlgorithm];

  const stringHasher = (checksumAlgorithmFn, body) => {
    const hash = new checksumAlgorithmFn();
    hash.update(toUint8Array(body || ""));
    return hash.digest();
  };

  const getChecksum = async (body, {
    streamHasher,
    checksumAlgorithmFn,
    base64Encoder
  }) => {
    const digest = isStreaming(body) ? streamHasher(checksumAlgorithmFn, body) : stringHasher(checksumAlgorithmFn, body);
    return base64Encoder(await digest);
  };

  const getChecksumAlgorithmListForResponse = (responseAlgorithms = []) => {
    const validChecksumAlgorithms = [];
    for (const algorithm of PRIORITY_ORDER_ALGORITHMS) {
      if (!responseAlgorithms.includes(algorithm) || !CLIENT_SUPPORTED_ALGORITHMS.includes(algorithm)) {
        continue;
      }
      validChecksumAlgorithms.push(algorithm);
    }
    return validChecksumAlgorithms;
  };

  const validateChecksumFromResponse = async (response, {
    config,
    responseAlgorithms
  }) => {
    const checksumAlgorithms = getChecksumAlgorithmListForResponse(responseAlgorithms);
    const {
      body: responseBody,
      headers: responseHeaders
    } = response;
    for (const algorithm of checksumAlgorithms) {
      const responseHeader = getChecksumLocationName(algorithm);
      const checksumFromResponse = responseHeaders[responseHeader];
      if (checksumFromResponse) {
        const checksumAlgorithmFn = selectChecksumAlgorithmFunction(algorithm, config);
        const {
          streamHasher,
          base64Encoder
        } = config;
        const checksum = await getChecksum(responseBody, {
          streamHasher,
          checksumAlgorithmFn,
          base64Encoder
        });
        if (checksum === checksumFromResponse) {
          break;
        }
        throw new Error(`Checksum mismatch: expected "${checksum}" but received "${checksumFromResponse}"` + ` in response header "${responseHeader}".`);
      }
    }
  };

  const flexibleChecksumsMiddleware = (config, middlewareConfig) => next => async args => {
    if (!HttpRequest.isInstance(args.request)) {
      return next(args);
    }
    const {
      request
    } = args;
    const {
      body: requestBody,
      headers
    } = request;
    const {
      base64Encoder,
      streamHasher
    } = config;
    const {
      input,
      requestChecksumRequired,
      requestAlgorithmMember
    } = middlewareConfig;
    const checksumAlgorithm = getChecksumAlgorithmForRequest(input, {
      requestChecksumRequired,
      requestAlgorithmMember
    });
    let updatedBody = requestBody;
    let updatedHeaders = headers;
    if (checksumAlgorithm) {
      const checksumLocationName = getChecksumLocationName(checksumAlgorithm);
      const checksumAlgorithmFn = selectChecksumAlgorithmFunction(checksumAlgorithm, config);
      if (isStreaming(requestBody)) {
        const {
          getAwsChunkedEncodingStream,
          bodyLengthChecker
        } = config;
        updatedBody = getAwsChunkedEncodingStream(requestBody, {
          base64Encoder,
          bodyLengthChecker,
          checksumLocationName,
          checksumAlgorithmFn,
          streamHasher
        });
        updatedHeaders = {
          ...headers,
          "content-encoding": headers["content-encoding"] ? `${headers["content-encoding"]},aws-chunked` : "aws-chunked",
          "transfer-encoding": "chunked",
          "x-amz-decoded-content-length": headers["content-length"],
          "x-amz-content-sha256": "STREAMING-UNSIGNED-PAYLOAD-TRAILER",
          "x-amz-trailer": checksumLocationName
        };
        delete updatedHeaders["content-length"];
      } else if (!hasHeader(checksumLocationName, headers)) {
        const rawChecksum = await stringHasher(checksumAlgorithmFn, requestBody);
        updatedHeaders = {
          ...headers,
          [checksumLocationName]: base64Encoder(rawChecksum)
        };
      }
    }
    const result = await next({
      ...args,
      request: {
        ...request,
        headers: updatedHeaders,
        body: updatedBody
      }
    });
    const {
      requestValidationModeMember,
      responseAlgorithms
    } = middlewareConfig;
    if (requestValidationModeMember && input[requestValidationModeMember] === "ENABLED") {
      await validateChecksumFromResponse(result.response, {
        config,
        responseAlgorithms
      });
    }
    return result;
  };

  const flexibleChecksumsMiddlewareOptions = {
    name: "flexibleChecksumsMiddleware",
    step: "build",
    tags: ["BODY_CHECKSUM"],
    override: true
  };
  const getFlexibleChecksumsPlugin = (config, middlewareConfig) => ({
    applyToStack: clientStack => {
      clientStack.add(flexibleChecksumsMiddleware(config, middlewareConfig), flexibleChecksumsMiddlewareOptions);
    }
  });

  class DeleteObjectsCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, DeleteObjectsCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteObjectsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_DeleteObjectsCommand(input, context);
    }
    deserialize(output, context) {
      return de_DeleteObjectsCommand(output, context);
    }
  }

  class DeleteObjectTaggingCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, DeleteObjectTaggingCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "DeleteObjectTaggingCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_DeleteObjectTaggingCommand(input, context);
    }
    deserialize(output, context) {
      return de_DeleteObjectTaggingCommand(output, context);
    }
  }

  class DeletePublicAccessBlockCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, DeletePublicAccessBlockCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "DeletePublicAccessBlockCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_DeletePublicAccessBlockCommand(input, context);
    }
    deserialize(output, context) {
      return de_DeletePublicAccessBlockCommand(output, context);
    }
  }

  class GetBucketAccelerateConfigurationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetBucketAccelerateConfigurationCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketAccelerateConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetBucketAccelerateConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetBucketAccelerateConfigurationCommand(output, context);
    }
  }

  class GetBucketAclCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetBucketAclCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketAclCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetBucketAclCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetBucketAclCommand(output, context);
    }
  }

  class GetBucketAnalyticsConfigurationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetBucketAnalyticsConfigurationCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketAnalyticsConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetBucketAnalyticsConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetBucketAnalyticsConfigurationCommand(output, context);
    }
  }

  class GetBucketCorsCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetBucketCorsCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketCorsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetBucketCorsCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetBucketCorsCommand(output, context);
    }
  }

  class GetBucketEncryptionCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetBucketEncryptionCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketEncryptionCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: GetBucketEncryptionOutputFilterSensitiveLog
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetBucketEncryptionCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetBucketEncryptionCommand(output, context);
    }
  }

  class GetBucketIntelligentTieringConfigurationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetBucketIntelligentTieringConfigurationCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketIntelligentTieringConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetBucketIntelligentTieringConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetBucketIntelligentTieringConfigurationCommand(output, context);
    }
  }

  class GetBucketInventoryConfigurationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetBucketInventoryConfigurationCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketInventoryConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: GetBucketInventoryConfigurationOutputFilterSensitiveLog
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetBucketInventoryConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetBucketInventoryConfigurationCommand(output, context);
    }
  }

  class GetBucketLifecycleConfigurationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetBucketLifecycleConfigurationCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketLifecycleConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetBucketLifecycleConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetBucketLifecycleConfigurationCommand(output, context);
    }
  }

  class GetBucketLocationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetBucketLocationCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketLocationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetBucketLocationCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetBucketLocationCommand(output, context);
    }
  }

  class GetBucketLoggingCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetBucketLoggingCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketLoggingCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetBucketLoggingCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetBucketLoggingCommand(output, context);
    }
  }

  class GetBucketMetricsConfigurationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetBucketMetricsConfigurationCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketMetricsConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetBucketMetricsConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetBucketMetricsConfigurationCommand(output, context);
    }
  }

  class GetBucketNotificationConfigurationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetBucketNotificationConfigurationCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketNotificationConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetBucketNotificationConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetBucketNotificationConfigurationCommand(output, context);
    }
  }

  class GetBucketOwnershipControlsCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetBucketOwnershipControlsCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketOwnershipControlsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetBucketOwnershipControlsCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetBucketOwnershipControlsCommand(output, context);
    }
  }

  class GetBucketPolicyCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetBucketPolicyCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketPolicyCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetBucketPolicyCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetBucketPolicyCommand(output, context);
    }
  }

  class GetBucketPolicyStatusCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetBucketPolicyStatusCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketPolicyStatusCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetBucketPolicyStatusCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetBucketPolicyStatusCommand(output, context);
    }
  }

  class GetBucketReplicationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetBucketReplicationCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketReplicationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetBucketReplicationCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetBucketReplicationCommand(output, context);
    }
  }

  class GetBucketRequestPaymentCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetBucketRequestPaymentCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketRequestPaymentCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetBucketRequestPaymentCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetBucketRequestPaymentCommand(output, context);
    }
  }

  class GetBucketTaggingCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetBucketTaggingCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketTaggingCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetBucketTaggingCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetBucketTaggingCommand(output, context);
    }
  }

  class GetBucketVersioningCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetBucketVersioningCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketVersioningCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetBucketVersioningCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetBucketVersioningCommand(output, context);
    }
  }

  class GetBucketWebsiteCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetBucketWebsiteCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetBucketWebsiteCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetBucketWebsiteCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetBucketWebsiteCommand(output, context);
    }
  }

  class GetObjectAclCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetObjectAclCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetObjectAclCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetObjectAclCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetObjectAclCommand(output, context);
    }
  }

  class GetObjectAttributesCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetObjectAttributesCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getSsecPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetObjectAttributesCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: GetObjectAttributesRequestFilterSensitiveLog,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetObjectAttributesCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetObjectAttributesCommand(output, context);
    }
  }

  class GetObjectCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetObjectCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getSsecPlugin(configuration));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestChecksumRequired: false,
        requestValidationModeMember: "ChecksumMode",
        responseAlgorithms: ["CRC32", "CRC32C", "SHA256", "SHA1"]
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetObjectCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: GetObjectRequestFilterSensitiveLog,
        outputFilterSensitiveLog: GetObjectOutputFilterSensitiveLog
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetObjectCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetObjectCommand(output, context);
    }
  }

  class GetObjectLegalHoldCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetObjectLegalHoldCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetObjectLegalHoldCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetObjectLegalHoldCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetObjectLegalHoldCommand(output, context);
    }
  }

  class GetObjectLockConfigurationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetObjectLockConfigurationCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetObjectLockConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetObjectLockConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetObjectLockConfigurationCommand(output, context);
    }
  }

  class GetObjectRetentionCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetObjectRetentionCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetObjectRetentionCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetObjectRetentionCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetObjectRetentionCommand(output, context);
    }
  }

  class GetObjectTaggingCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetObjectTaggingCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetObjectTaggingCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetObjectTaggingCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetObjectTaggingCommand(output, context);
    }
  }

  class GetObjectTorrentCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetObjectTorrentCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetObjectTorrentCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: GetObjectTorrentOutputFilterSensitiveLog
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetObjectTorrentCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetObjectTorrentCommand(output, context);
    }
  }

  class GetPublicAccessBlockCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, GetPublicAccessBlockCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "GetPublicAccessBlockCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_GetPublicAccessBlockCommand(input, context);
    }
    deserialize(output, context) {
      return de_GetPublicAccessBlockCommand(output, context);
    }
  }

  class HeadBucketCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, HeadBucketCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "HeadBucketCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_HeadBucketCommand(input, context);
    }
    deserialize(output, context) {
      return de_HeadBucketCommand(output, context);
    }
  }

  class HeadObjectCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, HeadObjectCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getSsecPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "HeadObjectCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: HeadObjectRequestFilterSensitiveLog,
        outputFilterSensitiveLog: HeadObjectOutputFilterSensitiveLog
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_HeadObjectCommand(input, context);
    }
    deserialize(output, context) {
      return de_HeadObjectCommand(output, context);
    }
  }

  class ListBucketAnalyticsConfigurationsCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, ListBucketAnalyticsConfigurationsCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "ListBucketAnalyticsConfigurationsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_ListBucketAnalyticsConfigurationsCommand(input, context);
    }
    deserialize(output, context) {
      return de_ListBucketAnalyticsConfigurationsCommand(output, context);
    }
  }

  class ListBucketIntelligentTieringConfigurationsCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, ListBucketIntelligentTieringConfigurationsCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "ListBucketIntelligentTieringConfigurationsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_ListBucketIntelligentTieringConfigurationsCommand(input, context);
    }
    deserialize(output, context) {
      return de_ListBucketIntelligentTieringConfigurationsCommand(output, context);
    }
  }

  class ListBucketInventoryConfigurationsCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, ListBucketInventoryConfigurationsCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "ListBucketInventoryConfigurationsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: ListBucketInventoryConfigurationsOutputFilterSensitiveLog
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_ListBucketInventoryConfigurationsCommand(input, context);
    }
    deserialize(output, context) {
      return de_ListBucketInventoryConfigurationsCommand(output, context);
    }
  }

  class ListBucketMetricsConfigurationsCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, ListBucketMetricsConfigurationsCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "ListBucketMetricsConfigurationsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_ListBucketMetricsConfigurationsCommand(input, context);
    }
    deserialize(output, context) {
      return de_ListBucketMetricsConfigurationsCommand(output, context);
    }
  }

  class ListBucketsCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, ListBucketsCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "ListBucketsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_ListBucketsCommand(input, context);
    }
    deserialize(output, context) {
      return de_ListBucketsCommand(output, context);
    }
  }

  class ListMultipartUploadsCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, ListMultipartUploadsCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "ListMultipartUploadsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_ListMultipartUploadsCommand(input, context);
    }
    deserialize(output, context) {
      return de_ListMultipartUploadsCommand(output, context);
    }
  }

  class ListObjectsCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, ListObjectsCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "ListObjectsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_ListObjectsCommand(input, context);
    }
    deserialize(output, context) {
      return de_ListObjectsCommand(output, context);
    }
  }

  class ListObjectsV2Command extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, ListObjectsV2Command.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "ListObjectsV2Command";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_ListObjectsV2Command(input, context);
    }
    deserialize(output, context) {
      return de_ListObjectsV2Command(output, context);
    }
  }

  class ListObjectVersionsCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, ListObjectVersionsCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "ListObjectVersionsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_ListObjectVersionsCommand(input, context);
    }
    deserialize(output, context) {
      return de_ListObjectVersionsCommand(output, context);
    }
  }

  class ListPartsCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, ListPartsCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getSsecPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "ListPartsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: ListPartsRequestFilterSensitiveLog,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_ListPartsCommand(input, context);
    }
    deserialize(output, context) {
      return de_ListPartsCommand(output, context);
    }
  }

  class PutBucketAccelerateConfigurationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutBucketAccelerateConfigurationCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: false
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketAccelerateConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutBucketAccelerateConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutBucketAccelerateConfigurationCommand(output, context);
    }
  }

  class PutBucketAclCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutBucketAclCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketAclCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutBucketAclCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutBucketAclCommand(output, context);
    }
  }

  class PutBucketAnalyticsConfigurationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutBucketAnalyticsConfigurationCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketAnalyticsConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutBucketAnalyticsConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutBucketAnalyticsConfigurationCommand(output, context);
    }
  }

  class PutBucketCorsCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutBucketCorsCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketCorsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutBucketCorsCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutBucketCorsCommand(output, context);
    }
  }

  class PutBucketEncryptionCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutBucketEncryptionCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketEncryptionCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: PutBucketEncryptionRequestFilterSensitiveLog,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutBucketEncryptionCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutBucketEncryptionCommand(output, context);
    }
  }

  class PutBucketIntelligentTieringConfigurationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutBucketIntelligentTieringConfigurationCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketIntelligentTieringConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutBucketIntelligentTieringConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutBucketIntelligentTieringConfigurationCommand(output, context);
    }
  }

  class PutBucketInventoryConfigurationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutBucketInventoryConfigurationCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketInventoryConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: PutBucketInventoryConfigurationRequestFilterSensitiveLog,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutBucketInventoryConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutBucketInventoryConfigurationCommand(output, context);
    }
  }

  class PutBucketLifecycleConfigurationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutBucketLifecycleConfigurationCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketLifecycleConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutBucketLifecycleConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutBucketLifecycleConfigurationCommand(output, context);
    }
  }

  class PutBucketLoggingCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutBucketLoggingCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketLoggingCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutBucketLoggingCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutBucketLoggingCommand(output, context);
    }
  }

  class PutBucketMetricsConfigurationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutBucketMetricsConfigurationCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketMetricsConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutBucketMetricsConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutBucketMetricsConfigurationCommand(output, context);
    }
  }

  class PutBucketNotificationConfigurationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutBucketNotificationConfigurationCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketNotificationConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutBucketNotificationConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutBucketNotificationConfigurationCommand(output, context);
    }
  }

  class PutBucketOwnershipControlsCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutBucketOwnershipControlsCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestChecksumRequired: true
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketOwnershipControlsCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutBucketOwnershipControlsCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutBucketOwnershipControlsCommand(output, context);
    }
  }

  class PutBucketPolicyCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutBucketPolicyCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketPolicyCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutBucketPolicyCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutBucketPolicyCommand(output, context);
    }
  }

  class PutBucketReplicationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutBucketReplicationCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketReplicationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutBucketReplicationCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutBucketReplicationCommand(output, context);
    }
  }

  class PutBucketRequestPaymentCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutBucketRequestPaymentCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketRequestPaymentCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutBucketRequestPaymentCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutBucketRequestPaymentCommand(output, context);
    }
  }

  class PutBucketTaggingCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutBucketTaggingCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketTaggingCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutBucketTaggingCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutBucketTaggingCommand(output, context);
    }
  }

  class PutBucketVersioningCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutBucketVersioningCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketVersioningCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutBucketVersioningCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutBucketVersioningCommand(output, context);
    }
  }

  class PutBucketWebsiteCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutBucketWebsiteCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutBucketWebsiteCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutBucketWebsiteCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutBucketWebsiteCommand(output, context);
    }
  }

  class PutObjectAclCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutObjectAclCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutObjectAclCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutObjectAclCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutObjectAclCommand(output, context);
    }
  }

  class PutObjectCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutObjectCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getCheckContentLengthHeaderPlugin());
      this.middlewareStack.use(getSsecPlugin(configuration));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: false
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutObjectCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: PutObjectRequestFilterSensitiveLog,
        outputFilterSensitiveLog: PutObjectOutputFilterSensitiveLog
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutObjectCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutObjectCommand(output, context);
    }
  }

  class PutObjectLegalHoldCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutObjectLegalHoldCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutObjectLegalHoldCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutObjectLegalHoldCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutObjectLegalHoldCommand(output, context);
    }
  }

  class PutObjectLockConfigurationCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutObjectLockConfigurationCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutObjectLockConfigurationCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutObjectLockConfigurationCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutObjectLockConfigurationCommand(output, context);
    }
  }

  class PutObjectRetentionCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutObjectRetentionCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutObjectRetentionCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutObjectRetentionCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutObjectRetentionCommand(output, context);
    }
  }

  class PutObjectTaggingCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutObjectTaggingCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutObjectTaggingCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutObjectTaggingCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutObjectTaggingCommand(output, context);
    }
  }

  class PutPublicAccessBlockCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, PutPublicAccessBlockCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: true
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "PutPublicAccessBlockCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: _ => _,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_PutPublicAccessBlockCommand(input, context);
    }
    deserialize(output, context) {
      return de_PutPublicAccessBlockCommand(output, context);
    }
  }

  class RestoreObjectCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, RestoreObjectCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: false
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "RestoreObjectCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: RestoreObjectRequestFilterSensitiveLog,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_RestoreObjectCommand(input, context);
    }
    deserialize(output, context) {
      return de_RestoreObjectCommand(output, context);
    }
  }

  class SelectObjectContentCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, SelectObjectContentCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getSsecPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "SelectObjectContentCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: SelectObjectContentRequestFilterSensitiveLog,
        outputFilterSensitiveLog: SelectObjectContentOutputFilterSensitiveLog
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_SelectObjectContentCommand(input, context);
    }
    deserialize(output, context) {
      return de_SelectObjectContentCommand(output, context);
    }
  }

  class UploadPartCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, UploadPartCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getSsecPlugin(configuration));
      this.middlewareStack.use(getFlexibleChecksumsPlugin(configuration, {
        input: this.input,
        requestAlgorithmMember: "ChecksumAlgorithm",
        requestChecksumRequired: false
      }));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "UploadPartCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: UploadPartRequestFilterSensitiveLog,
        outputFilterSensitiveLog: UploadPartOutputFilterSensitiveLog
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_UploadPartCommand(input, context);
    }
    deserialize(output, context) {
      return de_UploadPartCommand(output, context);
    }
  }

  class UploadPartCopyCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        Bucket: {
          type: "contextParams",
          name: "Bucket"
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, UploadPartCopyCommand.getEndpointParameterInstructions()));
      this.middlewareStack.use(getThrow200ExceptionsPlugin(configuration));
      this.middlewareStack.use(getSsecPlugin(configuration));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "UploadPartCopyCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: UploadPartCopyRequestFilterSensitiveLog,
        outputFilterSensitiveLog: UploadPartCopyOutputFilterSensitiveLog
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_UploadPartCopyCommand(input, context);
    }
    deserialize(output, context) {
      return de_UploadPartCopyCommand(output, context);
    }
  }

  class WriteGetObjectResponseCommand extends Command {
    static getEndpointParameterInstructions() {
      return {
        UseObjectLambdaEndpoint: {
          type: "staticContextParams",
          value: true
        },
        ForcePathStyle: {
          type: "clientContextParams",
          name: "forcePathStyle"
        },
        UseArnRegion: {
          type: "clientContextParams",
          name: "useArnRegion"
        },
        DisableMultiRegionAccessPoints: {
          type: "clientContextParams",
          name: "disableMultiregionAccessPoints"
        },
        Accelerate: {
          type: "clientContextParams",
          name: "useAccelerateEndpoint"
        },
        UseGlobalEndpoint: {
          type: "builtInParams",
          name: "useGlobalEndpoint"
        },
        UseFIPS: {
          type: "builtInParams",
          name: "useFipsEndpoint"
        },
        Endpoint: {
          type: "builtInParams",
          name: "endpoint"
        },
        Region: {
          type: "builtInParams",
          name: "region"
        },
        UseDualStack: {
          type: "builtInParams",
          name: "useDualstackEndpoint"
        }
      };
    }
    constructor(input) {
      super();
      this.input = input;
    }
    resolveMiddleware(clientStack, configuration, options) {
      this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
      this.middlewareStack.use(getEndpointPlugin(configuration, WriteGetObjectResponseCommand.getEndpointParameterInstructions()));
      const stack = clientStack.concat(this.middlewareStack);
      const {
        logger
      } = configuration;
      const clientName = "S3Client";
      const commandName = "WriteGetObjectResponseCommand";
      const handlerExecutionContext = {
        logger,
        clientName,
        commandName,
        inputFilterSensitiveLog: WriteGetObjectResponseRequestFilterSensitiveLog,
        outputFilterSensitiveLog: _ => _
      };
      const {
        requestHandler
      } = configuration;
      return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
      return se_WriteGetObjectResponseCommand(input, context);
    }
    deserialize(output, context) {
      return de_WriteGetObjectResponseCommand(output, context);
    }
  }

  const commands = {
    AbortMultipartUploadCommand,
    CompleteMultipartUploadCommand,
    CopyObjectCommand,
    CreateBucketCommand,
    CreateMultipartUploadCommand,
    DeleteBucketCommand,
    DeleteBucketAnalyticsConfigurationCommand,
    DeleteBucketCorsCommand,
    DeleteBucketEncryptionCommand,
    DeleteBucketIntelligentTieringConfigurationCommand,
    DeleteBucketInventoryConfigurationCommand,
    DeleteBucketLifecycleCommand,
    DeleteBucketMetricsConfigurationCommand,
    DeleteBucketOwnershipControlsCommand,
    DeleteBucketPolicyCommand,
    DeleteBucketReplicationCommand,
    DeleteBucketTaggingCommand,
    DeleteBucketWebsiteCommand,
    DeleteObjectCommand,
    DeleteObjectsCommand,
    DeleteObjectTaggingCommand,
    DeletePublicAccessBlockCommand,
    GetBucketAccelerateConfigurationCommand,
    GetBucketAclCommand,
    GetBucketAnalyticsConfigurationCommand,
    GetBucketCorsCommand,
    GetBucketEncryptionCommand,
    GetBucketIntelligentTieringConfigurationCommand,
    GetBucketInventoryConfigurationCommand,
    GetBucketLifecycleConfigurationCommand,
    GetBucketLocationCommand,
    GetBucketLoggingCommand,
    GetBucketMetricsConfigurationCommand,
    GetBucketNotificationConfigurationCommand,
    GetBucketOwnershipControlsCommand,
    GetBucketPolicyCommand,
    GetBucketPolicyStatusCommand,
    GetBucketReplicationCommand,
    GetBucketRequestPaymentCommand,
    GetBucketTaggingCommand,
    GetBucketVersioningCommand,
    GetBucketWebsiteCommand,
    GetObjectCommand,
    GetObjectAclCommand,
    GetObjectAttributesCommand,
    GetObjectLegalHoldCommand,
    GetObjectLockConfigurationCommand,
    GetObjectRetentionCommand,
    GetObjectTaggingCommand,
    GetObjectTorrentCommand,
    GetPublicAccessBlockCommand,
    HeadBucketCommand,
    HeadObjectCommand,
    ListBucketAnalyticsConfigurationsCommand,
    ListBucketIntelligentTieringConfigurationsCommand,
    ListBucketInventoryConfigurationsCommand,
    ListBucketMetricsConfigurationsCommand,
    ListBucketsCommand,
    ListMultipartUploadsCommand,
    ListObjectsCommand,
    ListObjectsV2Command,
    ListObjectVersionsCommand,
    ListPartsCommand,
    PutBucketAccelerateConfigurationCommand,
    PutBucketAclCommand,
    PutBucketAnalyticsConfigurationCommand,
    PutBucketCorsCommand,
    PutBucketEncryptionCommand,
    PutBucketIntelligentTieringConfigurationCommand,
    PutBucketInventoryConfigurationCommand,
    PutBucketLifecycleConfigurationCommand,
    PutBucketLoggingCommand,
    PutBucketMetricsConfigurationCommand,
    PutBucketNotificationConfigurationCommand,
    PutBucketOwnershipControlsCommand,
    PutBucketPolicyCommand,
    PutBucketReplicationCommand,
    PutBucketRequestPaymentCommand,
    PutBucketTaggingCommand,
    PutBucketVersioningCommand,
    PutBucketWebsiteCommand,
    PutObjectCommand,
    PutObjectAclCommand,
    PutObjectLegalHoldCommand,
    PutObjectLockConfigurationCommand,
    PutObjectRetentionCommand,
    PutObjectTaggingCommand,
    PutPublicAccessBlockCommand,
    RestoreObjectCommand,
    SelectObjectContentCommand,
    UploadPartCommand,
    UploadPartCopyCommand,
    WriteGetObjectResponseCommand
  };
  class S3 extends S3Client {}
  createAggregatedClient(commands, S3);

  class AbortSignal {
    constructor() {
      this.onabort = null;
      this._aborted = false;
      Object.defineProperty(this, "_aborted", {
        value: false,
        writable: true
      });
    }
    get aborted() {
      return this._aborted;
    }
    abort() {
      this._aborted = true;
      if (this.onabort) {
        this.onabort(this);
        this.onabort = null;
      }
    }
  }

  let AbortController$1 = class AbortController {
    constructor() {
      this.signal = new AbortSignal();
    }
    abort() {
      this.signal.abort();
    }
  };

  var domain;

  // This constructor is used to store event handlers. Instantiating this is
  // faster than explicitly calling `Object.create(null)` to get a "clean" empty
  // object (tested with v8 v4.9).
  function EventHandlers() {}
  EventHandlers.prototype = Object.create(null);

  function EventEmitter() {
    EventEmitter.init.call(this);
  }

  // nodejs oddity
  // require('events') === require('events').EventEmitter
  EventEmitter.EventEmitter = EventEmitter;

  EventEmitter.usingDomains = false;

  EventEmitter.prototype.domain = undefined;
  EventEmitter.prototype._events = undefined;
  EventEmitter.prototype._maxListeners = undefined;

  // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  EventEmitter.defaultMaxListeners = 10;

  EventEmitter.init = function() {
    this.domain = null;
    if (EventEmitter.usingDomains) {
      // if there is an active domain, then attach to it.
      if (domain.active ) ;
    }

    if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
      this._events = new EventHandlers();
      this._eventsCount = 0;
    }

    this._maxListeners = this._maxListeners || undefined;
  };

  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || isNaN(n))
      throw new TypeError('"n" argument must be a positive number');
    this._maxListeners = n;
    return this;
  };

  function $getMaxListeners(that) {
    if (that._maxListeners === undefined)
      return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
  }

  EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return $getMaxListeners(this);
  };

  // These standalone emit* functions are used to optimize calling of event
  // handlers for fast cases because emit() itself often has a variable number of
  // arguments and can be deoptimized because of that. These functions always have
  // the same number of arguments and thus do not get deoptimized, so the code
  // inside them can execute faster.
  function emitNone(handler, isFn, self) {
    if (isFn)
      handler.call(self);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self);
    }
  }
  function emitOne(handler, isFn, self, arg1) {
    if (isFn)
      handler.call(self, arg1);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1);
    }
  }
  function emitTwo(handler, isFn, self, arg1, arg2) {
    if (isFn)
      handler.call(self, arg1, arg2);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1, arg2);
    }
  }
  function emitThree(handler, isFn, self, arg1, arg2, arg3) {
    if (isFn)
      handler.call(self, arg1, arg2, arg3);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1, arg2, arg3);
    }
  }

  function emitMany(handler, isFn, self, args) {
    if (isFn)
      handler.apply(self, args);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].apply(self, args);
    }
  }

  EventEmitter.prototype.emit = function emit(type) {
    var er, handler, len, args, i, events, domain;
    var doError = (type === 'error');

    events = this._events;
    if (events)
      doError = (doError && events.error == null);
    else if (!doError)
      return false;

    domain = this.domain;

    // If there is no 'error' event listener then throw.
    if (doError) {
      er = arguments[1];
      if (domain) {
        if (!er)
          er = new Error('Uncaught, unspecified "error" event');
        er.domainEmitter = this;
        er.domain = domain;
        er.domainThrown = false;
        domain.emit('error', er);
      } else if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
      return false;
    }

    handler = events[type];

    if (!handler)
      return false;

    var isFn = typeof handler === 'function';
    len = arguments.length;
    switch (len) {
      // fast cases
      case 1:
        emitNone(handler, isFn, this);
        break;
      case 2:
        emitOne(handler, isFn, this, arguments[1]);
        break;
      case 3:
        emitTwo(handler, isFn, this, arguments[1], arguments[2]);
        break;
      case 4:
        emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
        break;
      // slower
      default:
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        emitMany(handler, isFn, this, args);
    }

    return true;
  };

  function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;

    if (typeof listener !== 'function')
      throw new TypeError('"listener" argument must be a function');

    events = target._events;
    if (!events) {
      events = target._events = new EventHandlers();
      target._eventsCount = 0;
    } else {
      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (events.newListener) {
        target.emit('newListener', type,
                    listener.listener ? listener.listener : listener);

        // Re-assign `events` because a newListener handler could have caused the
        // this._events to be assigned to a new object
        events = target._events;
      }
      existing = events[type];
    }

    if (!existing) {
      // Optimize the case of one listener. Don't need the extra array object.
      existing = events[type] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === 'function') {
        // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [listener, existing] :
                                            [existing, listener];
      } else {
        // If we've already got an array, just append.
        if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
      }

      // Check for listener leak
      if (!existing.warned) {
        m = $getMaxListeners(target);
        if (m && m > 0 && existing.length > m) {
          existing.warned = true;
          var w = new Error('Possible EventEmitter memory leak detected. ' +
                              existing.length + ' ' + type + ' listeners added. ' +
                              'Use emitter.setMaxListeners() to increase limit');
          w.name = 'MaxListenersExceededWarning';
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          emitWarning(w);
        }
      }
    }

    return target;
  }
  function emitWarning(e) {
    typeof console.warn === 'function' ? console.warn(e) : console.log(e);
  }
  EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
  };

  EventEmitter.prototype.on = EventEmitter.prototype.addListener;

  EventEmitter.prototype.prependListener =
      function prependListener(type, listener) {
        return _addListener(this, type, listener, true);
      };

  function _onceWrap(target, type, listener) {
    var fired = false;
    function g() {
      target.removeListener(type, g);
      if (!fired) {
        fired = true;
        listener.apply(target, arguments);
      }
    }
    g.listener = listener;
    return g;
  }

  EventEmitter.prototype.once = function once(type, listener) {
    if (typeof listener !== 'function')
      throw new TypeError('"listener" argument must be a function');
    this.on(type, _onceWrap(this, type, listener));
    return this;
  };

  EventEmitter.prototype.prependOnceListener =
      function prependOnceListener(type, listener) {
        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      };

  // emits a 'removeListener' event iff the listener was removed
  EventEmitter.prototype.removeListener =
      function removeListener(type, listener) {
        var list, events, position, i, originalListener;

        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');

        events = this._events;
        if (!events)
          return this;

        list = events[type];
        if (!list)
          return this;

        if (list === listener || (list.listener && list.listener === listener)) {
          if (--this._eventsCount === 0)
            this._events = new EventHandlers();
          else {
            delete events[type];
            if (events.removeListener)
              this.emit('removeListener', type, list.listener || listener);
          }
        } else if (typeof list !== 'function') {
          position = -1;

          for (i = list.length; i-- > 0;) {
            if (list[i] === listener ||
                (list[i].listener && list[i].listener === listener)) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }

          if (position < 0)
            return this;

          if (list.length === 1) {
            list[0] = undefined;
            if (--this._eventsCount === 0) {
              this._events = new EventHandlers();
              return this;
            } else {
              delete events[type];
            }
          } else {
            spliceOne(list, position);
          }

          if (events.removeListener)
            this.emit('removeListener', type, originalListener || listener);
        }

        return this;
      };
      
  // Alias for removeListener added in NodeJS 10.0
  // https://nodejs.org/api/events.html#events_emitter_off_eventname_listener
  EventEmitter.prototype.off = function(type, listener){
      return this.removeListener(type, listener);
  };

  EventEmitter.prototype.removeAllListeners =
      function removeAllListeners(type) {
        var listeners, events;

        events = this._events;
        if (!events)
          return this;

        // not listening for removeListener, no need to emit
        if (!events.removeListener) {
          if (arguments.length === 0) {
            this._events = new EventHandlers();
            this._eventsCount = 0;
          } else if (events[type]) {
            if (--this._eventsCount === 0)
              this._events = new EventHandlers();
            else
              delete events[type];
          }
          return this;
        }

        // emit removeListener for all listeners on all events
        if (arguments.length === 0) {
          var keys = Object.keys(events);
          for (var i = 0, key; i < keys.length; ++i) {
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners('removeListener');
          this._events = new EventHandlers();
          this._eventsCount = 0;
          return this;
        }

        listeners = events[type];

        if (typeof listeners === 'function') {
          this.removeListener(type, listeners);
        } else if (listeners) {
          // LIFO order
          do {
            this.removeListener(type, listeners[listeners.length - 1]);
          } while (listeners[0]);
        }

        return this;
      };

  EventEmitter.prototype.listeners = function listeners(type) {
    var evlistener;
    var ret;
    var events = this._events;

    if (!events)
      ret = [];
    else {
      evlistener = events[type];
      if (!evlistener)
        ret = [];
      else if (typeof evlistener === 'function')
        ret = [evlistener.listener || evlistener];
      else
        ret = unwrapListeners(evlistener);
    }

    return ret;
  };

  EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') {
      return emitter.listenerCount(type);
    } else {
      return listenerCount$1.call(emitter, type);
    }
  };

  EventEmitter.prototype.listenerCount = listenerCount$1;
  function listenerCount$1(type) {
    var events = this._events;

    if (events) {
      var evlistener = events[type];

      if (typeof evlistener === 'function') {
        return 1;
      } else if (evlistener) {
        return evlistener.length;
      }
    }

    return 0;
  }

  EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
  };

  // About 1.5x faster than the two-arg version of Array#splice().
  function spliceOne(list, index) {
    for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
      list[i] = list[k];
    list.pop();
  }

  function arrayClone(arr, i) {
    var copy = new Array(i);
    while (i--)
      copy[i] = arr[i];
    return copy;
  }

  function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for (var i = 0; i < ret.length; ++i) {
      ret[i] = arr[i].listener || arr[i];
    }
    return ret;
  }

  const ClientSharedValues = {
    lstatSync: () => {}
  };

  const ClientDefaultValues = {
    ...ClientSharedValues,
    runtime: "browser"
  };

  const byteLength = input => {
    if (input === null || input === undefined) return 0;
    if (typeof input === "string") input = Buffer.from(input);
    if (typeof input.byteLength === "number") {
      return input.byteLength;
    } else if (typeof input.length === "number") {
      return input.length;
    } else if (typeof input.size === "number") {
      return input.size;
    } else if (typeof input.path === "string") {
      try {
        return ClientDefaultValues.lstatSync(input.path).size;
      } catch (error) {
        return undefined;
      }
    }
    return undefined;
  };

  var inherits;
  if (typeof Object.create === 'function'){
    inherits = function inherits(ctor, superCtor) {
      // implementation from standard node.js 'util' module
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    inherits = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }
  var inherits$1 = inherits;

  var formatRegExp = /%[sdj%]/g;
  function format(f) {
    if (!isString(f)) {
      var objects = [];
      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect(arguments[i]));
      }
      return objects.join(' ');
    }

    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
      if (x === '%%') return '%';
      if (i >= len) return x;
      switch (x) {
        case '%s': return String(args[i++]);
        case '%d': return Number(args[i++]);
        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }
        default:
          return x;
      }
    });
    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject(x)) {
        str += ' ' + x;
      } else {
        str += ' ' + inspect(x);
      }
    }
    return str;
  }

  // Mark that a method should not be used.
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.
  function deprecate(fn, msg) {
    // Allow for deprecating things in the process of starting up.
    if (isUndefined(global$1.process)) {
      return function() {
        return deprecate(fn, msg).apply(this, arguments);
      };
    }

    if (browser$1$1.noDeprecation === true) {
      return fn;
    }

    var warned = false;
    function deprecated() {
      if (!warned) {
        if (browser$1$1.throwDeprecation) {
          throw new Error(msg);
        } else if (browser$1$1.traceDeprecation) {
          console.trace(msg);
        } else {
          console.error(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }

    return deprecated;
  }

  var debugs = {};
  var debugEnviron;
  function debuglog(set) {
    if (isUndefined(debugEnviron))
      debugEnviron = browser$1$1.env.NODE_DEBUG || '';
    set = set.toUpperCase();
    if (!debugs[set]) {
      if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
        var pid = 0;
        debugs[set] = function() {
          var msg = format.apply(null, arguments);
          console.error('%s %d: %s', set, pid, msg);
        };
      } else {
        debugs[set] = function() {};
      }
    }
    return debugs[set];
  }

  /**
   * Echos the value of a value. Trys to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Object} opts Optional options object that alters the output.
   */
  /* legacy: obj, showHidden, depth, colors*/
  function inspect(obj, opts) {
    // default options
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) {
      // legacy...
      ctx.showHidden = opts;
    } else if (opts) {
      // got an "options" object
      _extend(ctx, opts);
    }
    // set default options
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  }

  // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
  inspect.colors = {
    'bold' : [1, 22],
    'italic' : [3, 23],
    'underline' : [4, 24],
    'inverse' : [7, 27],
    'white' : [37, 39],
    'grey' : [90, 39],
    'black' : [30, 39],
    'blue' : [34, 39],
    'cyan' : [36, 39],
    'green' : [32, 39],
    'magenta' : [35, 39],
    'red' : [31, 39],
    'yellow' : [33, 39]
  };

  // Don't use 'blue' not visible on cmd.exe
  inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
  };


  function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];

    if (style) {
      return '\u001b[' + inspect.colors[style][0] + 'm' + str +
             '\u001b[' + inspect.colors[style][1] + 'm';
    } else {
      return str;
    }
  }


  function stylizeNoColor(str, styleType) {
    return str;
  }


  function arrayToHash(array) {
    var hash = {};

    array.forEach(function(val, idx) {
      hash[val] = true;
    });

    return hash;
  }


  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect &&
        value &&
        isFunction(value.inspect) &&
        // Filter out the util module, it's inspect function is special
        value.inspect !== inspect &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);
      if (!isString(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }
      return ret;
    }

    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }

    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    }

    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value)
        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    }

    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }
      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '', array = false, braces = ['{', '}'];

    // Make Array say that they are Array
    if (isArray(value)) {
      array = true;
      braces = ['[', ']'];
    }

    // Make functions say that they are functions
    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    }

    // Make RegExps say that they are RegExps
    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    }

    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    }

    // Make error with message first say the error
    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);

    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();

    return reduceToSingleString(output, base, braces);
  }


  function formatPrimitive(ctx, value) {
    if (isUndefined(value))
      return ctx.stylize('undefined', 'undefined');
    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }
    if (isNumber(value))
      return ctx.stylize('' + value, 'number');
    if (isBoolean(value))
      return ctx.stylize('' + value, 'boolean');
    // For some reason typeof null is "object", so special case here.
    if (isNull(value))
      return ctx.stylize('null', 'null');
  }


  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }


  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            String(i), true));
      } else {
        output.push('');
      }
    }
    keys.forEach(function(key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            key, true));
      }
    });
    return output;
  }


  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
    if (!hasOwnProperty(visibleKeys, key)) {
      name = '[' + key + ']';
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function(line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function(line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify('' + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'")
                   .replace(/\\"/g, '"')
                   .replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }


  function reduceToSingleString(output, base, braces) {
    var length = output.reduce(function(prev, cur) {
      if (cur.indexOf('\n') >= 0) ;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] +
             (base === '' ? '' : base + '\n ') +
             ' ' +
             output.join(',\n  ') +
             ' ' +
             braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }


  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.
  function isArray(ar) {
    return Array.isArray(ar);
  }

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }

  function isNull(arg) {
    return arg === null;
  }

  function isNumber(arg) {
    return typeof arg === 'number';
  }

  function isString(arg) {
    return typeof arg === 'string';
  }

  function isUndefined(arg) {
    return arg === void 0;
  }

  function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
  }

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
  }

  function isError(e) {
    return isObject(e) &&
        (objectToString(e) === '[object Error]' || e instanceof Error);
  }

  function isFunction(arg) {
    return typeof arg === 'function';
  }

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }

  function _extend(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;

    var keys = Object.keys(add);
    var i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin;
  }
  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  function BufferList() {
    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function (v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function (v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function () {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function () {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function (s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function (n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      p.data.copy(ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  var isBufferEncoding = Buffer.isEncoding
    || function(encoding) {
         switch (encoding && encoding.toLowerCase()) {
           case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
           default: return false;
         }
       };


  function assertEncoding(encoding) {
    if (encoding && !isBufferEncoding(encoding)) {
      throw new Error('Unknown encoding: ' + encoding);
    }
  }

  // StringDecoder provides an interface for efficiently splitting a series of
  // buffers into a series of JS strings without breaking apart multi-byte
  // characters. CESU-8 is handled as part of the UTF-8 encoding.
  //
  // @TODO Handling all encodings inside a single object makes it very difficult
  // to reason about this code, so it should be split up in the future.
  // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
  // points as used by CESU-8.
  function StringDecoder(encoding) {
    this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
    assertEncoding(encoding);
    switch (this.encoding) {
      case 'utf8':
        // CESU-8 represents each of Surrogate Pair by 3-bytes
        this.surrogateSize = 3;
        break;
      case 'ucs2':
      case 'utf16le':
        // UTF-16 represents each of Surrogate Pair by 2-bytes
        this.surrogateSize = 2;
        this.detectIncompleteChar = utf16DetectIncompleteChar;
        break;
      case 'base64':
        // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
        this.surrogateSize = 3;
        this.detectIncompleteChar = base64DetectIncompleteChar;
        break;
      default:
        this.write = passThroughWrite;
        return;
    }

    // Enough space to store all bytes of a single character. UTF-8 needs 4
    // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
    this.charBuffer = new Buffer(6);
    // Number of bytes received for the current incomplete multi-byte character.
    this.charReceived = 0;
    // Number of bytes expected for the current incomplete multi-byte character.
    this.charLength = 0;
  }

  // write decodes the given buffer and returns it as JS string that is
  // guaranteed to not contain any partial multi-byte characters. Any partial
  // character found at the end of the buffer is buffered up, and will be
  // returned when calling write again with the remaining bytes.
  //
  // Note: Converting a Buffer containing an orphan surrogate to a String
  // currently works, but converting a String to a Buffer (via `new Buffer`, or
  // Buffer#write) will replace incomplete surrogates with the unicode
  // replacement character. See https://codereview.chromium.org/121173009/ .
  StringDecoder.prototype.write = function(buffer) {
    var charStr = '';
    // if our last write ended with an incomplete multibyte character
    while (this.charLength) {
      // determine how many remaining bytes this buffer has to offer for this char
      var available = (buffer.length >= this.charLength - this.charReceived) ?
          this.charLength - this.charReceived :
          buffer.length;

      // add the new bytes to the char buffer
      buffer.copy(this.charBuffer, this.charReceived, 0, available);
      this.charReceived += available;

      if (this.charReceived < this.charLength) {
        // still not enough chars in this buffer? wait for more ...
        return '';
      }

      // remove bytes belonging to the current character from the buffer
      buffer = buffer.slice(available, buffer.length);

      // get the character that was split
      charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

      // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
      var charCode = charStr.charCodeAt(charStr.length - 1);
      if (charCode >= 0xD800 && charCode <= 0xDBFF) {
        this.charLength += this.surrogateSize;
        charStr = '';
        continue;
      }
      this.charReceived = this.charLength = 0;

      // if there are no more bytes in this buffer, just emit our char
      if (buffer.length === 0) {
        return charStr;
      }
      break;
    }

    // determine and set charLength / charReceived
    this.detectIncompleteChar(buffer);

    var end = buffer.length;
    if (this.charLength) {
      // buffer the incomplete character bytes we got
      buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
      end -= this.charReceived;
    }

    charStr += buffer.toString(this.encoding, 0, end);

    var end = charStr.length - 1;
    var charCode = charStr.charCodeAt(end);
    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      var size = this.surrogateSize;
      this.charLength += size;
      this.charReceived += size;
      this.charBuffer.copy(this.charBuffer, size, 0, size);
      buffer.copy(this.charBuffer, 0, 0, size);
      return charStr.substring(0, end);
    }

    // or just emit the charStr
    return charStr;
  };

  // detectIncompleteChar determines if there is an incomplete UTF-8 character at
  // the end of the given buffer. If so, it sets this.charLength to the byte
  // length that character, and sets this.charReceived to the number of bytes
  // that are available for this character.
  StringDecoder.prototype.detectIncompleteChar = function(buffer) {
    // determine how many bytes we have to check at the end of this buffer
    var i = (buffer.length >= 3) ? 3 : buffer.length;

    // Figure out if one of the last i bytes of our buffer announces an
    // incomplete char.
    for (; i > 0; i--) {
      var c = buffer[buffer.length - i];

      // See http://en.wikipedia.org/wiki/UTF-8#Description

      // 110XXXXX
      if (i == 1 && c >> 5 == 0x06) {
        this.charLength = 2;
        break;
      }

      // 1110XXXX
      if (i <= 2 && c >> 4 == 0x0E) {
        this.charLength = 3;
        break;
      }

      // 11110XXX
      if (i <= 3 && c >> 3 == 0x1E) {
        this.charLength = 4;
        break;
      }
    }
    this.charReceived = i;
  };

  StringDecoder.prototype.end = function(buffer) {
    var res = '';
    if (buffer && buffer.length)
      res = this.write(buffer);

    if (this.charReceived) {
      var cr = this.charReceived;
      var buf = this.charBuffer;
      var enc = this.encoding;
      res += buf.slice(0, cr).toString(enc);
    }

    return res;
  };

  function passThroughWrite(buffer) {
    return buffer.toString(this.encoding);
  }

  function utf16DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 2;
    this.charLength = this.charReceived ? 2 : 0;
  }

  function base64DetectIncompleteChar(buffer) {
    this.charReceived = buffer.length % 3;
    this.charLength = this.charReceived ? 3 : 0;
  }

  Readable.ReadableState = ReadableState;

  var debug = debuglog('stream');
  inherits$1(Readable, EventEmitter);

  function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') {
      return emitter.prependListener(event, fn);
    } else {
      // This is a hack to make sure that our error handler is attached before any
      // userland ones.  NEVER DO THIS. This is here only because this code needs
      // to continue to work with older versions of Node.js that do not include
      // the prependListener() method. The goal is to eventually remove this hack.
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (Array.isArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
  }
  function listenerCount (emitter, type) {
    return emitter.listeners(type).length;
  }
  function ReadableState(options, stream) {

    options = options || {};

    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;

    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    var hwm = options.highWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

    // cast to ints.
    this.highWaterMark = ~ ~this.highWaterMark;

    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;

    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;

    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;

    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';

    // when piping, we only care about 'readable' events that happen
    // after read()ing all the bytes and not getting any pushback.
    this.ranOut = false;

    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;

    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;

    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }
  function Readable(options) {

    if (!(this instanceof Readable)) return new Readable(options);

    this._readableState = new ReadableState(options, this);

    // legacy
    this.readable = true;

    if (options && typeof options.read === 'function') this._read = options.read;

    EventEmitter.call(this);
  }

  // Manually shove something into the read() buffer.
  // This returns true if the highWaterMark has not been hit yet,
  // similar to how Writable.write() returns true if you should
  // write() some more.
  Readable.prototype.push = function (chunk, encoding) {
    var state = this._readableState;

    if (!state.objectMode && typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
    }

    return readableAddChunk(this, state, chunk, encoding, false);
  };

  // Unshift should *always* be something directly out of read()
  Readable.prototype.unshift = function (chunk) {
    var state = this._readableState;
    return readableAddChunk(this, state, chunk, '', true);
  };

  Readable.prototype.isPaused = function () {
    return this._readableState.flowing === false;
  };

  function readableAddChunk(stream, state, chunk, encoding, addToFront) {
    var er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (chunk === null) {
      state.reading = false;
      onEofChunk(stream, state);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (state.ended && !addToFront) {
        var e = new Error('stream.push() after EOF');
        stream.emit('error', e);
      } else if (state.endEmitted && addToFront) {
        var _e = new Error('stream.unshift() after end event');
        stream.emit('error', _e);
      } else {
        var skipAdd;
        if (state.decoder && !addToFront && !encoding) {
          chunk = state.decoder.write(chunk);
          skipAdd = !state.objectMode && chunk.length === 0;
        }

        if (!addToFront) state.reading = false;

        // Don't add to the buffer if we've decoded to an empty string chunk and
        // we're not in object mode
        if (!skipAdd) {
          // if we want the data now, just emit it.
          if (state.flowing && state.length === 0 && !state.sync) {
            stream.emit('data', chunk);
            stream.read(0);
          } else {
            // update the buffer info.
            state.length += state.objectMode ? 1 : chunk.length;
            if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

            if (state.needReadable) emitReadable(stream);
          }
        }

        maybeReadMore(stream, state);
      }
    } else if (!addToFront) {
      state.reading = false;
    }

    return needMoreData(state);
  }

  // if it's past the high water mark, we can push in some more.
  // Also, if we have no data yet, we can stand some
  // more bytes.  This is to work around cases where hwm=0,
  // such as the repl.  Also, if the push() triggered a
  // readable event, and the user called read(largeNumber) such that
  // needReadable was set, then we ought to push more, so that another
  // 'readable' event will be triggered.
  function needMoreData(state) {
    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
  }

  // backwards compatibility.
  Readable.prototype.setEncoding = function (enc) {
    this._readableState.decoder = new StringDecoder(enc);
    this._readableState.encoding = enc;
    return this;
  };

  // Don't raise the hwm > 8MB
  var MAX_HWM = 0x800000;
  function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) {
      n = MAX_HWM;
    } else {
      // Get the next highest power of 2 to prevent increasing hwm excessively in
      // tiny amounts
      n--;
      n |= n >>> 1;
      n |= n >>> 2;
      n |= n >>> 4;
      n |= n >>> 8;
      n |= n >>> 16;
      n++;
    }
    return n;
  }

  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
      // Only flow one buffer at a time
      if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    // Don't have enough
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    }
    return state.length;
  }

  // you can override either this method, or the async _read(n) below.
  Readable.prototype.read = function (n) {
    debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;

    if (n !== 0) state.emittedReadable = false;

    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
      debug('read: emitReadable', state.length, state.ended);
      if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
      return null;
    }

    n = howMuchToRead(n, state);

    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
      if (state.length === 0) endReadable(this);
      return null;
    }

    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.

    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug('need readable', doRead);

    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
      doRead = true;
      debug('length less than watermark', doRead);
    }

    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
      doRead = false;
      debug('reading or ended', doRead);
    } else if (doRead) {
      debug('do read');
      state.reading = true;
      state.sync = true;
      // if the length is currently zero, then we *need* a readable event.
      if (state.length === 0) state.needReadable = true;
      // call internal read method
      this._read(state.highWaterMark);
      state.sync = false;
      // If _read pushed data synchronously, then `reading` will be false,
      // and we need to re-evaluate how much data we can return to the user.
      if (!state.reading) n = howMuchToRead(nOrig, state);
    }

    var ret;
    if (n > 0) ret = fromList(n, state);else ret = null;

    if (ret === null) {
      state.needReadable = true;
      n = 0;
    } else {
      state.length -= n;
    }

    if (state.length === 0) {
      // If we have nothing in the buffer, then we want to know
      // as soon as we *do* get something into the buffer.
      if (!state.ended) state.needReadable = true;

      // If we tried to read() past the EOF, then emit end on the next tick.
      if (nOrig !== n && state.ended) endReadable(this);
    }

    if (ret !== null) this.emit('data', ret);

    return ret;
  };

  function chunkInvalid(state, chunk) {
    var er = null;
    if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }
    return er;
  }

  function onEofChunk(stream, state) {
    if (state.ended) return;
    if (state.decoder) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) {
        state.buffer.push(chunk);
        state.length += state.objectMode ? 1 : chunk.length;
      }
    }
    state.ended = true;

    // emit 'readable' now to make sure it gets picked up.
    emitReadable(stream);
  }

  // Don't emit readable right away in sync mode, because this can trigger
  // another read() call => stack overflow.  This way, it might trigger
  // a nextTick recursion warning, but that's not so bad.
  function emitReadable(stream) {
    var state = stream._readableState;
    state.needReadable = false;
    if (!state.emittedReadable) {
      debug('emitReadable', state.flowing);
      state.emittedReadable = true;
      if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
    }
  }

  function emitReadable_(stream) {
    debug('emit readable');
    stream.emit('readable');
    flow(stream);
  }

  // at this point, the user has presumably seen the 'readable' event,
  // and called read() to consume some data.  that may have triggered
  // in turn another _read(n) call, in which case reading = true if
  // it's in progress.
  // However, if we're not ended, or reading, and the length < hwm,
  // then go ahead and try to read some more preemptively.
  function maybeReadMore(stream, state) {
    if (!state.readingMore) {
      state.readingMore = true;
      nextTick(maybeReadMore_, stream, state);
    }
  }

  function maybeReadMore_(stream, state) {
    var len = state.length;
    while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
      debug('maybeReadMore read 0');
      stream.read(0);
      if (len === state.length)
        // didn't get any data, stop spinning.
        break;else len = state.length;
    }
    state.readingMore = false;
  }

  // abstract method.  to be overridden in specific implementation classes.
  // call cb(er, data) where data is <= n in length.
  // for virtual (non-string, non-buffer) streams, "length" is somewhat
  // arbitrary, and perhaps not very meaningful.
  Readable.prototype._read = function (n) {
    this.emit('error', new Error('not implemented'));
  };

  Readable.prototype.pipe = function (dest, pipeOpts) {
    var src = this;
    var state = this._readableState;

    switch (state.pipesCount) {
      case 0:
        state.pipes = dest;
        break;
      case 1:
        state.pipes = [state.pipes, dest];
        break;
      default:
        state.pipes.push(dest);
        break;
    }
    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

    var doEnd = (!pipeOpts || pipeOpts.end !== false);

    var endFn = doEnd ? onend : cleanup;
    if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);

    dest.on('unpipe', onunpipe);
    function onunpipe(readable) {
      debug('onunpipe');
      if (readable === src) {
        cleanup();
      }
    }

    function onend() {
      debug('onend');
      dest.end();
    }

    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);

    var cleanedUp = false;
    function cleanup() {
      debug('cleanup');
      // cleanup event handlers once the pipe is broken
      dest.removeListener('close', onclose);
      dest.removeListener('finish', onfinish);
      dest.removeListener('drain', ondrain);
      dest.removeListener('error', onerror);
      dest.removeListener('unpipe', onunpipe);
      src.removeListener('end', onend);
      src.removeListener('end', cleanup);
      src.removeListener('data', ondata);

      cleanedUp = true;

      // if the reader is waiting for a drain event from this
      // specific writer, then it would cause it to never start
      // flowing again.
      // So, if this is awaiting a drain, then we just call it now.
      // If we don't know, then assume that we are waiting for one.
      if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }

    // If the user pushes more data while we're writing to dest then we'll end up
    // in ondata again. However, we only want to increase awaitDrain once because
    // dest will only emit one 'drain' event for the multiple writes.
    // => Introduce a guard on increasing awaitDrain.
    var increasedAwaitDrain = false;
    src.on('data', ondata);
    function ondata(chunk) {
      debug('ondata');
      increasedAwaitDrain = false;
      var ret = dest.write(chunk);
      if (false === ret && !increasedAwaitDrain) {
        // If the user unpiped during `dest.write()`, it is possible
        // to get stuck in a permanently paused state if that write
        // also returned false.
        // => Check whether `dest` is still a piping destination.
        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
          debug('false write response, pause', src._readableState.awaitDrain);
          src._readableState.awaitDrain++;
          increasedAwaitDrain = true;
        }
        src.pause();
      }
    }

    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
      debug('onerror', er);
      unpipe();
      dest.removeListener('error', onerror);
      if (listenerCount(dest, 'error') === 0) dest.emit('error', er);
    }

    // Make sure our error handler is attached before userland ones.
    prependListener(dest, 'error', onerror);

    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
      dest.removeListener('finish', onfinish);
      unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
      debug('onfinish');
      dest.removeListener('close', onclose);
      unpipe();
    }
    dest.once('finish', onfinish);

    function unpipe() {
      debug('unpipe');
      src.unpipe(dest);
    }

    // tell the dest that it's being piped to
    dest.emit('pipe', src);

    // start the flow if it hasn't been started already.
    if (!state.flowing) {
      debug('pipe resume');
      src.resume();
    }

    return dest;
  };

  function pipeOnDrain(src) {
    return function () {
      var state = src._readableState;
      debug('pipeOnDrain', state.awaitDrain);
      if (state.awaitDrain) state.awaitDrain--;
      if (state.awaitDrain === 0 && src.listeners('data').length) {
        state.flowing = true;
        flow(src);
      }
    };
  }

  Readable.prototype.unpipe = function (dest) {
    var state = this._readableState;

    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this;

    // just one destination.  most common case.
    if (state.pipesCount === 1) {
      // passed in one, but it's not the right one.
      if (dest && dest !== state.pipes) return this;

      if (!dest) dest = state.pipes;

      // got a match.
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      if (dest) dest.emit('unpipe', this);
      return this;
    }

    // slow case. multiple pipe destinations.

    if (!dest) {
      // remove all.
      var dests = state.pipes;
      var len = state.pipesCount;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;

      for (var _i = 0; _i < len; _i++) {
        dests[_i].emit('unpipe', this);
      }return this;
    }

    // try to find the right one.
    var i = indexOf(state.pipes, dest);
    if (i === -1) return this;

    state.pipes.splice(i, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];

    dest.emit('unpipe', this);

    return this;
  };

  // set up data events if they are asked for
  // Ensure readable listeners eventually get something
  Readable.prototype.on = function (ev, fn) {
    var res = EventEmitter.prototype.on.call(this, ev, fn);

    if (ev === 'data') {
      // Start flowing on next tick if stream isn't explicitly paused
      if (this._readableState.flowing !== false) this.resume();
    } else if (ev === 'readable') {
      var state = this._readableState;
      if (!state.endEmitted && !state.readableListening) {
        state.readableListening = state.needReadable = true;
        state.emittedReadable = false;
        if (!state.reading) {
          nextTick(nReadingNextTick, this);
        } else if (state.length) {
          emitReadable(this);
        }
      }
    }

    return res;
  };
  Readable.prototype.addListener = Readable.prototype.on;

  function nReadingNextTick(self) {
    debug('readable nexttick read 0');
    self.read(0);
  }

  // pause() and resume() are remnants of the legacy readable stream API
  // If the user uses them, then switch into old mode.
  Readable.prototype.resume = function () {
    var state = this._readableState;
    if (!state.flowing) {
      debug('resume');
      state.flowing = true;
      resume(this, state);
    }
    return this;
  };

  function resume(stream, state) {
    if (!state.resumeScheduled) {
      state.resumeScheduled = true;
      nextTick(resume_, stream, state);
    }
  }

  function resume_(stream, state) {
    if (!state.reading) {
      debug('resume read 0');
      stream.read(0);
    }

    state.resumeScheduled = false;
    state.awaitDrain = 0;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
  }

  Readable.prototype.pause = function () {
    debug('call pause flowing=%j', this._readableState.flowing);
    if (false !== this._readableState.flowing) {
      debug('pause');
      this._readableState.flowing = false;
      this.emit('pause');
    }
    return this;
  };

  function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);
    while (state.flowing && stream.read() !== null) {}
  }

  // wrap an old-style stream as the async data source.
  // This is *not* part of the readable stream interface.
  // It is an ugly unfortunate mess of history.
  Readable.prototype.wrap = function (stream) {
    var state = this._readableState;
    var paused = false;

    var self = this;
    stream.on('end', function () {
      debug('wrapped end');
      if (state.decoder && !state.ended) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) self.push(chunk);
      }

      self.push(null);
    });

    stream.on('data', function (chunk) {
      debug('wrapped data');
      if (state.decoder) chunk = state.decoder.write(chunk);

      // don't skip over falsy values in objectMode
      if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

      var ret = self.push(chunk);
      if (!ret) {
        paused = true;
        stream.pause();
      }
    });

    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for (var i in stream) {
      if (this[i] === undefined && typeof stream[i] === 'function') {
        this[i] = function (method) {
          return function () {
            return stream[method].apply(stream, arguments);
          };
        }(i);
      }
    }

    // proxy certain important events.
    var events = ['error', 'close', 'destroy', 'pause', 'resume'];
    forEach(events, function (ev) {
      stream.on(ev, self.emit.bind(self, ev));
    });

    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    self._read = function (n) {
      debug('wrapped _read', n);
      if (paused) {
        paused = false;
        stream.resume();
      }
    };

    return self;
  };

  // exposed for testing purposes only.
  Readable._fromList = fromList;

  // Pluck off n bytes from an array of buffers.
  // Length is the combined lengths of all the buffers in the list.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;

    var ret;
    if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
      // read it all, truncate the list
      if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
      state.buffer.clear();
    } else {
      // read part of list
      ret = fromListPartial(n, state.buffer, state.decoder);
    }

    return ret;
  }

  // Extracts only enough buffered data to satisfy the amount requested.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function fromListPartial(n, list, hasStrings) {
    var ret;
    if (n < list.head.data.length) {
      // slice is the same for buffers and strings
      ret = list.head.data.slice(0, n);
      list.head.data = list.head.data.slice(n);
    } else if (n === list.head.data.length) {
      // first chunk is a perfect match
      ret = list.shift();
    } else {
      // result spans more than one buffer
      ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
    }
    return ret;
  }

  // Copies a specified amount of characters from the list of buffered data
  // chunks.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function copyFromBufferString(n, list) {
    var p = list.head;
    var c = 1;
    var ret = p.data;
    n -= ret.length;
    while (p = p.next) {
      var str = p.data;
      var nb = n > str.length ? str.length : n;
      if (nb === str.length) ret += str;else ret += str.slice(0, n);
      n -= nb;
      if (n === 0) {
        if (nb === str.length) {
          ++c;
          if (p.next) list.head = p.next;else list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = str.slice(nb);
        }
        break;
      }
      ++c;
    }
    list.length -= c;
    return ret;
  }

  // Copies a specified amount of bytes from the list of buffered data chunks.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function copyFromBuffer(n, list) {
    var ret = Buffer.allocUnsafe(n);
    var p = list.head;
    var c = 1;
    p.data.copy(ret);
    n -= p.data.length;
    while (p = p.next) {
      var buf = p.data;
      var nb = n > buf.length ? buf.length : n;
      buf.copy(ret, ret.length - n, 0, nb);
      n -= nb;
      if (n === 0) {
        if (nb === buf.length) {
          ++c;
          if (p.next) list.head = p.next;else list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = buf.slice(nb);
        }
        break;
      }
      ++c;
    }
    list.length -= c;
    return ret;
  }

  function endReadable(stream) {
    var state = stream._readableState;

    // If we get here before consuming all the bytes, then that is a
    // bug in node.  Should never happen.
    if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

    if (!state.endEmitted) {
      state.ended = true;
      nextTick(endReadableNT, state, stream);
    }
  }

  function endReadableNT(state, stream) {
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
      state.endEmitted = true;
      stream.readable = false;
      stream.emit('end');
    }
  }

  function forEach(xs, f) {
    for (var i = 0, l = xs.length; i < l; i++) {
      f(xs[i], i);
    }
  }

  function indexOf(xs, x) {
    for (var i = 0, l = xs.length; i < l; i++) {
      if (xs[i] === x) return i;
    }
    return -1;
  }

  // A bit simpler than readable streams.
  // Implement an async ._write(chunk, encoding, cb), and it'll handle all
  // the drain event emission and buffering.

  Writable.WritableState = WritableState;
  inherits$1(Writable, EventEmitter);

  function nop() {}

  function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
  }

  function WritableState(options, stream) {
    Object.defineProperty(this, 'buffer', {
      get: deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    });
    options = options || {};

    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;

    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    var hwm = options.highWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

    // cast to ints.
    this.highWaterMark = ~ ~this.highWaterMark;

    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;

    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;

    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';

    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;

    // a flag to see when we're in the middle of a write.
    this.writing = false;

    // when true all writes will be buffered until .uncork() call
    this.corked = 0;

    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;

    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;

    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function (er) {
      onwrite(stream, er);
    };

    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;

    // the amount that is being written when _write is called.
    this.writelen = 0;

    this.bufferedRequest = null;
    this.lastBufferedRequest = null;

    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;

    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;

    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;

    // count buffered requests
    this.bufferedRequestCount = 0;

    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
  }

  WritableState.prototype.getBuffer = function writableStateGetBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while (current) {
      out.push(current);
      current = current.next;
    }
    return out;
  };
  function Writable(options) {

    // Writable ctor is applied to Duplexes, though they're not
    // instanceof Writable, they're instanceof Readable.
    if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

    this._writableState = new WritableState(options, this);

    // legacy.
    this.writable = true;

    if (options) {
      if (typeof options.write === 'function') this._write = options.write;

      if (typeof options.writev === 'function') this._writev = options.writev;
    }

    EventEmitter.call(this);
  }

  // Otherwise people can pipe Writable streams, which is just wrong.
  Writable.prototype.pipe = function () {
    this.emit('error', new Error('Cannot pipe, not readable'));
  };

  function writeAfterEnd(stream, cb) {
    var er = new Error('write after end');
    // TODO: defer error events consistently everywhere, not just the cb
    stream.emit('error', er);
    nextTick(cb, er);
  }

  // If we get something that is not a buffer, string, null, or undefined,
  // and we're not in objectMode, then that's an error.
  // Otherwise stream chunks are all considered to be of length=1, and the
  // watermarks determine how many objects to keep in the buffer, rather than
  // how many bytes or characters.
  function validChunk(stream, state, chunk, cb) {
    var valid = true;
    var er = false;
    // Always throw error if a null is written
    // if we are not in object mode then throw
    // if it is not a buffer, string, or undefined.
    if (chunk === null) {
      er = new TypeError('May not write null values to stream');
    } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }
    if (er) {
      stream.emit('error', er);
      nextTick(cb, er);
      valid = false;
    }
    return valid;
  }

  Writable.prototype.write = function (chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;

    if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }

    if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

    if (typeof cb !== 'function') cb = nop;

    if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
      state.pendingcb++;
      ret = writeOrBuffer(this, state, chunk, encoding, cb);
    }

    return ret;
  };

  Writable.prototype.cork = function () {
    var state = this._writableState;

    state.corked++;
  };

  Writable.prototype.uncork = function () {
    var state = this._writableState;

    if (state.corked) {
      state.corked--;

      if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
  };

  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
  };

  function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
      chunk = Buffer.from(chunk, encoding);
    }
    return chunk;
  }

  // if we're already writing something, then just put this
  // in the queue, and wait our turn.  Otherwise, call _write
  // If we return false, then we need a drain event, so set that flag.
  function writeOrBuffer(stream, state, chunk, encoding, cb) {
    chunk = decodeChunk(state, chunk, encoding);

    if (Buffer.isBuffer(chunk)) encoding = 'buffer';
    var len = state.objectMode ? 1 : chunk.length;

    state.length += len;

    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;

    if (state.writing || state.corked) {
      var last = state.lastBufferedRequest;
      state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
      if (last) {
        last.next = state.lastBufferedRequest;
      } else {
        state.bufferedRequest = state.lastBufferedRequest;
      }
      state.bufferedRequestCount += 1;
    } else {
      doWrite(stream, state, false, len, chunk, encoding, cb);
    }

    return ret;
  }

  function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
  }

  function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) nextTick(cb, er);else cb(er);

    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  }

  function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
  }

  function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;

    onwriteStateUpdate(state);

    if (er) onwriteError(stream, state, sync, er, cb);else {
      // Check if we're actually ready to finish, but don't emit yet
      var finished = needFinish(state);

      if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
        clearBuffer(stream, state);
      }

      if (sync) {
        /*<replacement>*/
          nextTick(afterWrite, stream, state, finished, cb);
        /*</replacement>*/
      } else {
          afterWrite(stream, state, finished, cb);
        }
    }
  }

  function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
  }

  // Must force callback to be called on nextTick, so that we don't
  // emit 'drain' before the write() consumer gets the 'false' return
  // value, and has a chance to attach a 'drain' listener.
  function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
      state.needDrain = false;
      stream.emit('drain');
    }
  }

  // if there's something in the buffer waiting, then process it
  function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;

    if (stream._writev && entry && entry.next) {
      // Fast case, write everything using _writev()
      var l = state.bufferedRequestCount;
      var buffer = new Array(l);
      var holder = state.corkedRequestsFree;
      holder.entry = entry;

      var count = 0;
      while (entry) {
        buffer[count] = entry;
        entry = entry.next;
        count += 1;
      }

      doWrite(stream, state, true, state.length, buffer, '', holder.finish);

      // doWrite is almost always async, defer these to save a bit of time
      // as the hot path ends with doWrite
      state.pendingcb++;
      state.lastBufferedRequest = null;
      if (holder.next) {
        state.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state.corkedRequestsFree = new CorkedRequest(state);
      }
    } else {
      // Slow case, write chunks one-by-one
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state.objectMode ? 1 : chunk.length;

        doWrite(stream, state, false, len, chunk, encoding, cb);
        entry = entry.next;
        // if we didn't call the onwrite immediately, then
        // it means that we need to wait until it does.
        // also, that means that the chunk and cb are currently
        // being processed, so move the buffer counter past them.
        if (state.writing) {
          break;
        }
      }

      if (entry === null) state.lastBufferedRequest = null;
    }

    state.bufferedRequestCount = 0;
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
  }

  Writable.prototype._write = function (chunk, encoding, cb) {
    cb(new Error('not implemented'));
  };

  Writable.prototype._writev = null;

  Writable.prototype.end = function (chunk, encoding, cb) {
    var state = this._writableState;

    if (typeof chunk === 'function') {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }

    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

    // .end() fully uncorks
    if (state.corked) {
      state.corked = 1;
      this.uncork();
    }

    // ignore unnecessary end() calls.
    if (!state.ending && !state.finished) endWritable(this, state, cb);
  };

  function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
  }

  function prefinish(stream, state) {
    if (!state.prefinished) {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }

  function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
      if (state.pendingcb === 0) {
        prefinish(stream, state);
        state.finished = true;
        stream.emit('finish');
      } else {
        prefinish(stream, state);
      }
    }
    return need;
  }

  function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
      if (state.finished) nextTick(cb);else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
  }

  // It seems a linked list but it is not
  // there will be only 2 of these for each stream
  function CorkedRequest(state) {
    var _this = this;

    this.next = null;
    this.entry = null;

    this.finish = function (err) {
      var entry = _this.entry;
      _this.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      if (state.corkedRequestsFree) {
        state.corkedRequestsFree.next = _this;
      } else {
        state.corkedRequestsFree = _this;
      }
    };
  }

  inherits$1(Duplex, Readable);

  var keys = Object.keys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
  function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);

    Readable.call(this, options);
    Writable.call(this, options);

    if (options && options.readable === false) this.readable = false;

    if (options && options.writable === false) this.writable = false;

    this.allowHalfOpen = true;
    if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

    this.once('end', onend);
  }

  // the no-half-open enforcer
  function onend() {
    // if we allow half-open state, or if the writable side ended,
    // then we're ok.
    if (this.allowHalfOpen || this._writableState.ended) return;

    // no more data can be written.
    // But allow more writes to happen in this tick.
    nextTick(onEndNT, this);
  }

  function onEndNT(self) {
    self.end();
  }

  // a transform stream is a readable/writable stream where you do
  // something with the data.  Sometimes it's called a "filter",
  // but that's not a great name for it, since that implies a thing where
  // some bits pass through, and others are simply ignored.  (That would
  // be a valid example of a transform, of course.)
  //
  // While the output is causally related to the input, it's not a
  // necessarily symmetric or synchronous transformation.  For example,
  // a zlib stream might take multiple plain-text writes(), and then
  // emit a single compressed chunk some time in the future.
  //
  // Here's how this works:
  //
  // The Transform stream has all the aspects of the readable and writable
  // stream classes.  When you write(chunk), that calls _write(chunk,cb)
  // internally, and returns false if there's a lot of pending writes
  // buffered up.  When you call read(), that calls _read(n) until
  // there's enough pending readable data buffered up.
  //
  // In a transform stream, the written data is placed in a buffer.  When
  // _read(n) is called, it transforms the queued up data, calling the
  // buffered _write cb's as it consumes chunks.  If consuming a single
  // written chunk would result in multiple output chunks, then the first
  // outputted bit calls the readcb, and subsequent chunks just go into
  // the read buffer, and will cause it to emit 'readable' if necessary.
  //
  // This way, back-pressure is actually determined by the reading side,
  // since _read has to be called to start processing a new chunk.  However,
  // a pathological inflate type of transform can cause excessive buffering
  // here.  For example, imagine a stream where every byte of input is
  // interpreted as an integer from 0-255, and then results in that many
  // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
  // 1kb of data being output.  In this case, you could write a very small
  // amount of input, and end up with a very large amount of output.  In
  // such a pathological inflating mechanism, there'd be no way to tell
  // the system to stop doing the transform.  A single 4MB write could
  // cause the system to run out of memory.
  //
  // However, even in such a pathological case, only a single written chunk
  // would be consumed, and then the rest would wait (un-transformed) until
  // the results of the previous transformed chunk were consumed.

  inherits$1(Transform, Duplex);

  function TransformState(stream) {
    this.afterTransform = function (er, data) {
      return afterTransform(stream, er, data);
    };

    this.needTransform = false;
    this.transforming = false;
    this.writecb = null;
    this.writechunk = null;
    this.writeencoding = null;
  }

  function afterTransform(stream, er, data) {
    var ts = stream._transformState;
    ts.transforming = false;

    var cb = ts.writecb;

    if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

    ts.writechunk = null;
    ts.writecb = null;

    if (data !== null && data !== undefined) stream.push(data);

    cb(er);

    var rs = stream._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
      stream._read(rs.highWaterMark);
    }
  }
  function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);

    Duplex.call(this, options);

    this._transformState = new TransformState(this);

    // when the writable side finishes, then flush out anything remaining.
    var stream = this;

    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;

    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;

    if (options) {
      if (typeof options.transform === 'function') this._transform = options.transform;

      if (typeof options.flush === 'function') this._flush = options.flush;
    }

    this.once('prefinish', function () {
      if (typeof this._flush === 'function') this._flush(function (er) {
        done(stream, er);
      });else done(stream);
    });
  }

  Transform.prototype.push = function (chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
  };

  // This is the part where you do stuff!
  // override this function in implementation classes.
  // 'chunk' is an input chunk.
  //
  // Call `push(newChunk)` to pass along transformed output
  // to the readable side.  You may call 'push' zero or more times.
  //
  // Call `cb(err)` when you are done with this chunk.  If you pass
  // an error, then that'll put the hurt on the whole operation.  If you
  // never call cb(), then you'll never get another chunk.
  Transform.prototype._transform = function (chunk, encoding, cb) {
    throw new Error('Not implemented');
  };

  Transform.prototype._write = function (chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
  };

  // Doesn't matter what the args are here.
  // _transform does all the work.
  // That we got here means that the readable side wants more data.
  Transform.prototype._read = function (n) {
    var ts = this._transformState;

    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
      ts.transforming = true;
      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      // mark that we need a transform, so that any data that comes in
      // will get processed, now that we've asked for it.
      ts.needTransform = true;
    }
  };

  function done(stream, er) {
    if (er) return stream.emit('error', er);

    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    var ws = stream._writableState;
    var ts = stream._transformState;

    if (ws.length) throw new Error('Calling transform done when ws.length != 0');

    if (ts.transforming) throw new Error('Calling transform done when still transforming');

    return stream.push(null);
  }

  inherits$1(PassThrough, Transform);
  function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);

    Transform.call(this, options);
  }

  PassThrough.prototype._transform = function (chunk, encoding, cb) {
    cb(null, chunk);
  };

  inherits$1(Stream, EventEmitter);
  Stream.Readable = Readable;
  Stream.Writable = Writable;
  Stream.Duplex = Duplex;
  Stream.Transform = Transform;
  Stream.PassThrough = PassThrough;

  // Backwards-compat with node 0.4.x
  Stream.Stream = Stream;

  // old-style streams.  Note that the pipe method (the only relevant
  // part of this class) is overridden in the Readable class.

  function Stream() {
    EventEmitter.call(this);
  }

  Stream.prototype.pipe = function(dest, options) {
    var source = this;

    function ondata(chunk) {
      if (dest.writable) {
        if (false === dest.write(chunk) && source.pause) {
          source.pause();
        }
      }
    }

    source.on('data', ondata);

    function ondrain() {
      if (source.readable && source.resume) {
        source.resume();
      }
    }

    dest.on('drain', ondrain);

    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
      source.on('end', onend);
      source.on('close', onclose);
    }

    var didOnEnd = false;
    function onend() {
      if (didOnEnd) return;
      didOnEnd = true;

      dest.end();
    }


    function onclose() {
      if (didOnEnd) return;
      didOnEnd = true;

      if (typeof dest.destroy === 'function') dest.destroy();
    }

    // don't leave dangling pipes when there are errors.
    function onerror(er) {
      cleanup();
      if (EventEmitter.listenerCount(this, 'error') === 0) {
        throw er; // Unhandled stream error in pipe.
      }
    }

    source.on('error', onerror);
    dest.on('error', onerror);

    // remove all the event listeners that were added.
    function cleanup() {
      source.removeListener('data', ondata);
      dest.removeListener('drain', ondrain);

      source.removeListener('end', onend);
      source.removeListener('close', onclose);

      source.removeListener('error', onerror);
      dest.removeListener('error', onerror);

      source.removeListener('end', cleanup);
      source.removeListener('close', cleanup);

      dest.removeListener('close', cleanup);
    }

    source.on('end', cleanup);
    source.on('close', cleanup);

    dest.on('close', cleanup);

    dest.emit('pipe', source);

    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
  };

  async function* getChunkBuffer(data, partSize) {
    let partNumber = 1;
    let startByte = 0;
    let endByte = partSize;
    while (endByte < data.byteLength) {
      yield {
        partNumber,
        data: data.slice(startByte, endByte)
      };
      partNumber += 1;
      startByte = endByte;
      endByte = startByte + partSize;
    }
    yield {
      partNumber,
      data: data.slice(startByte),
      lastPart: true
    };
  }

  async function* getChunkStream(data, partSize, getNextData) {
    let partNumber = 1;
    const currentBuffer = {
      chunks: [],
      length: 0
    };
    for await (const datum of getNextData(data)) {
      currentBuffer.chunks.push(datum);
      currentBuffer.length += datum.length;
      while (currentBuffer.length >= partSize) {
        const dataChunk = currentBuffer.chunks.length > 1 ? Buffer.concat(currentBuffer.chunks) : currentBuffer.chunks[0];
        yield {
          partNumber,
          data: dataChunk.slice(0, partSize)
        };
        currentBuffer.chunks = [dataChunk.slice(partSize)];
        currentBuffer.length = currentBuffer.chunks[0].length;
        partNumber += 1;
      }
    }
    yield {
      partNumber,
      data: Buffer.concat(currentBuffer.chunks),
      lastPart: true
    };
  }

  async function* getDataReadable(data) {
    for await (const chunk of data) {
      yield Buffer.from(chunk);
    }
  }

  async function* getDataReadableStream(data) {
    const reader = data.getReader();
    try {
      while (true) {
        const {
          done,
          value
        } = await reader.read();
        if (done) return;
        yield Buffer.from(value);
      }
    } catch (e) {
      throw e;
    } finally {
      reader.releaseLock();
    }
  }

  const getChunk = (data, partSize) => {
    if (data instanceof Buffer) {
      return getChunkBuffer(data, partSize);
    } else if (data instanceof Readable) {
      return getChunkStream(data, partSize, getDataReadable);
    } else if (data instanceof String || typeof data === "string" || data instanceof Uint8Array) {
      return getChunkBuffer(Buffer.from(data), partSize);
    }
    if (typeof data.stream === "function") {
      return getChunkStream(data.stream(), partSize, getDataReadableStream);
    } else if (data instanceof ReadableStream) {
      return getChunkStream(data, partSize, getDataReadableStream);
    } else {
      throw new Error("Body Data is unsupported format, expected data to be one of: string | Uint8Array | Buffer | Readable | ReadableStream | Blob;.");
    }
  };

  const MIN_PART_SIZE = 1024 * 1024 * 5;
  class Upload extends EventEmitter {
    constructor(options) {
      super();
      this.MAX_PARTS = 10000;
      this.queueSize = 4;
      this.partSize = MIN_PART_SIZE;
      this.leavePartsOnError = false;
      this.tags = [];
      this.concurrentUploaders = [];
      this.uploadedParts = [];
      this.isMultiPart = true;
      this.queueSize = options.queueSize || this.queueSize;
      this.partSize = options.partSize || this.partSize;
      this.leavePartsOnError = options.leavePartsOnError || this.leavePartsOnError;
      this.tags = options.tags || this.tags;
      this.client = options.client;
      this.params = options.params;
      this.__validateInput();
      this.totalBytes = byteLength(this.params.Body);
      this.bytesUploadedSoFar = 0;
      this.abortController = options.abortController ?? new AbortController$1();
    }
    async abort() {
      this.abortController.abort();
    }
    async done() {
      return await Promise.race([this.__doMultipartUpload(), this.__abortTimeout(this.abortController.signal)]);
    }
    on(event, listener) {
      this.uploadEvent = event;
      return super.on(event, listener);
    }
    async __uploadUsingPut(dataPart) {
      this.isMultiPart = false;
      const params = {
        ...this.params,
        Body: dataPart.data
      };
      const clientConfig = this.client.config;
      const requestHandler = clientConfig.requestHandler;
      const eventEmitter = requestHandler instanceof EventEmitter ? requestHandler : null;
      const uploadEventListener = event => {
        this.bytesUploadedSoFar = event.loaded;
        this.totalBytes = event.total;
        this.__notifyProgress({
          loaded: this.bytesUploadedSoFar,
          total: this.totalBytes,
          part: dataPart.partNumber,
          Key: this.params.Key,
          Bucket: this.params.Bucket
        });
      };
      if (eventEmitter !== null) {
        eventEmitter.on("xhr.upload.progress", uploadEventListener);
      }
      const resolved = await Promise.all([this.client.send(new PutObjectCommand(params)), clientConfig?.endpoint?.()]);
      const putResult = resolved[0];
      let endpoint = resolved[1];
      if (!endpoint) {
        endpoint = toEndpointV1(await getEndpointFromInstructions(params, PutObjectCommand, {
          ...clientConfig
        }));
      }
      if (!endpoint) {
        throw new Error('Could not resolve endpoint from S3 "client.config.endpoint()" nor EndpointsV2.');
      }
      if (eventEmitter !== null) {
        eventEmitter.off("xhr.upload.progress", uploadEventListener);
      }
      const locationKey = this.params.Key.split("/").map(segment => extendedEncodeURIComponent(segment)).join("/");
      const locationBucket = extendedEncodeURIComponent(this.params.Bucket);
      const Location = (() => {
        const endpointHostnameIncludesBucket = endpoint.hostname.startsWith(`${locationBucket}.`);
        const forcePathStyle = this.client.config.forcePathStyle;
        if (forcePathStyle) {
          return `${endpoint.protocol}//${endpoint.hostname}/${locationBucket}/${locationKey}`;
        }
        if (endpointHostnameIncludesBucket) {
          return `${endpoint.protocol}//${endpoint.hostname}/${locationKey}`;
        }
        return `${endpoint.protocol}//${locationBucket}.${endpoint.hostname}/${locationKey}`;
      })();
      this.singleUploadResult = {
        ...putResult,
        Bucket: this.params.Bucket,
        Key: this.params.Key,
        Location
      };
      const totalSize = byteLength(dataPart.data);
      this.__notifyProgress({
        loaded: totalSize,
        total: totalSize,
        part: 1,
        Key: this.params.Key,
        Bucket: this.params.Bucket
      });
    }
    async __createMultipartUpload() {
      if (!this.createMultiPartPromise) {
        const createCommandParams = {
          ...this.params,
          Body: undefined
        };
        this.createMultiPartPromise = this.client.send(new CreateMultipartUploadCommand(createCommandParams));
      }
      return this.createMultiPartPromise;
    }
    async __doConcurrentUpload(dataFeeder) {
      for await (const dataPart of dataFeeder) {
        if (this.uploadedParts.length > this.MAX_PARTS) {
          throw new Error(`Exceeded ${this.MAX_PARTS} as part of the upload to ${this.params.Key} and ${this.params.Bucket}.`);
        }
        try {
          if (this.abortController.signal.aborted) {
            return;
          }
          if (dataPart.partNumber === 1 && dataPart.lastPart) {
            return await this.__uploadUsingPut(dataPart);
          }
          if (!this.uploadId) {
            const {
              UploadId
            } = await this.__createMultipartUpload();
            this.uploadId = UploadId;
            if (this.abortController.signal.aborted) {
              return;
            }
          }
          const partSize = byteLength(dataPart.data) || 0;
          const requestHandler = this.client.config.requestHandler;
          const eventEmitter = requestHandler instanceof EventEmitter ? requestHandler : null;
          let lastSeenBytes = 0;
          const uploadEventListener = (event, request) => {
            const requestPartSize = Number(request.query["partNumber"]) || -1;
            if (requestPartSize !== dataPart.partNumber) {
              return;
            }
            if (event.total && partSize) {
              this.bytesUploadedSoFar += event.loaded - lastSeenBytes;
              lastSeenBytes = event.loaded;
            }
            this.__notifyProgress({
              loaded: this.bytesUploadedSoFar,
              total: this.totalBytes,
              part: dataPart.partNumber,
              Key: this.params.Key,
              Bucket: this.params.Bucket
            });
          };
          if (eventEmitter !== null) {
            eventEmitter.on("xhr.upload.progress", uploadEventListener);
          }
          const partResult = await this.client.send(new UploadPartCommand({
            ...this.params,
            UploadId: this.uploadId,
            Body: dataPart.data,
            PartNumber: dataPart.partNumber
          }));
          if (eventEmitter !== null) {
            eventEmitter.off("xhr.upload.progress", uploadEventListener);
          }
          if (this.abortController.signal.aborted) {
            return;
          }
          if (!partResult.ETag) {
            throw new Error(`Part ${dataPart.partNumber} is missing ETag in UploadPart response. Missing Bucket CORS configuration for ETag header?`);
          }
          this.uploadedParts.push({
            PartNumber: dataPart.partNumber,
            ETag: partResult.ETag,
            ...(partResult.ChecksumCRC32 && {
              ChecksumCRC32: partResult.ChecksumCRC32
            }),
            ...(partResult.ChecksumCRC32C && {
              ChecksumCRC32C: partResult.ChecksumCRC32C
            }),
            ...(partResult.ChecksumSHA1 && {
              ChecksumSHA1: partResult.ChecksumSHA1
            }),
            ...(partResult.ChecksumSHA256 && {
              ChecksumSHA256: partResult.ChecksumSHA256
            })
          });
          if (eventEmitter === null) {
            this.bytesUploadedSoFar += partSize;
          }
          this.__notifyProgress({
            loaded: this.bytesUploadedSoFar,
            total: this.totalBytes,
            part: dataPart.partNumber,
            Key: this.params.Key,
            Bucket: this.params.Bucket
          });
        } catch (e) {
          if (!this.uploadId) {
            throw e;
          }
          if (this.leavePartsOnError) {
            throw e;
          }
        }
      }
    }
    async __doMultipartUpload() {
      const dataFeeder = getChunk(this.params.Body, this.partSize);
      for (let index = 0; index < this.queueSize; index++) {
        const currentUpload = this.__doConcurrentUpload(dataFeeder);
        this.concurrentUploaders.push(currentUpload);
      }
      await Promise.all(this.concurrentUploaders);
      if (this.abortController.signal.aborted) {
        throw Object.assign(new Error("Upload aborted."), {
          name: "AbortError"
        });
      }
      let result;
      if (this.isMultiPart) {
        this.uploadedParts.sort((a, b) => a.PartNumber - b.PartNumber);
        const uploadCompleteParams = {
          ...this.params,
          Body: undefined,
          UploadId: this.uploadId,
          MultipartUpload: {
            Parts: this.uploadedParts
          }
        };
        result = await this.client.send(new CompleteMultipartUploadCommand(uploadCompleteParams));
      } else {
        result = this.singleUploadResult;
      }
      if (this.tags.length) {
        await this.client.send(new PutObjectTaggingCommand({
          ...this.params,
          Tagging: {
            TagSet: this.tags
          }
        }));
      }
      return result;
    }
    __notifyProgress(progress) {
      if (this.uploadEvent) {
        this.emit(this.uploadEvent, progress);
      }
    }
    async __abortTimeout(abortSignal) {
      return new Promise((resolve, reject) => {
        abortSignal.onabort = () => {
          const abortError = new Error("Upload aborted.");
          abortError.name = "AbortError";
          reject(abortError);
        };
      });
    }
    __validateInput() {
      if (!this.params) {
        throw new Error(`InputError: Upload requires params to be passed to upload.`);
      }
      if (!this.client) {
        throw new Error(`InputError: Upload requires a AWS client to do uploads with.`);
      }
      if (this.partSize < MIN_PART_SIZE) {
        throw new Error(`EntityTooSmall: Your proposed upload partsize [${this.partSize}] is smaller than the minimum allowed size [${MIN_PART_SIZE}] (5MB)`);
      }
      if (this.queueSize < 1) {
        throw new Error(`Queue size: Must have at least one uploading queue.`);
      }
    }
  }

  var ErrorBase = /*#__PURE__*/function (_Error) {
    _inherits(ErrorBase, _Error);
    var _super = _createSuper(ErrorBase);
    function ErrorBase(name, code, message) {
      var _this;
      _classCallCheck(this, ErrorBase);
      _this = _super.call(this);
      _this.name = name;
      _this.code = code;
      _this.message = message;
      return _this;
    }
    return _createClass(ErrorBase);
  }( /*#__PURE__*/_wrapNativeSuper(Error));

  var UploadError = /*#__PURE__*/function (_ErrorBase) {
    _inherits(UploadError, _ErrorBase);
    var _super = _createSuper(UploadError);
    function UploadError() {
      _classCallCheck(this, UploadError);
      return _super.apply(this, arguments);
    }
    return _createClass(UploadError);
  }(ErrorBase);

  var Forever = /*#__PURE__*/function () {
    function Forever(credentials) {
      _classCallCheck(this, Forever);
      this.endpoint = 'https://s3gw.foreverland.xyz';
      this.forcePathStyle = false;
      this.region = 'eu-west-2';
      this.instance = new S3({
        endpoint: this.endpoint,
        credentials: credentials,
        forcePathStyle: this.forcePathStyle,
        region: this.region
      });
    }
    _createClass(Forever, [{
      key: "listBuckets",
      value: function listBuckets() {
        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var data;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return this.instance.listBuckets({});
              case 3:
                data = _context.sent;
                return _context.abrupt("return", data);
              case 7:
                _context.prev = 7;
                _context.t0 = _context["catch"](0);
                throw new UploadError('ACCESSDENIED', 1, _context.t0.message);
              case 10:
              case "end":
                return _context.stop();
            }
          }, _callee, this, [[0, 7]]);
        }));
      }
    }, {
      key: "uploadObject",
      value: function uploadObject(params, configura) {
        var _this = this;
        var task;
        try {
          task = new Upload(Object.assign({
            client: this.instance,
            params: params
          }, configura));
        } catch (error) {
          return {
            abort: function abort() {
              return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
                return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                  while (1) switch (_context2.prev = _context2.next) {
                    case 0:
                    case "end":
                      return _context2.stop();
                  }
                }, _callee2);
              }));
            },
            done: function done() {
              return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
                return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                  while (1) switch (_context3.prev = _context3.next) {
                    case 0:
                      throw error;
                    case 1:
                    case "end":
                      return _context3.stop();
                  }
                }, _callee3);
              }));
            },
            progress: undefined
          };
        }
        return {
          abort: function abort() {
            return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
              return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                while (1) switch (_context4.prev = _context4.next) {
                  case 0:
                    _context4.next = 2;
                    return task.abort();
                  case 2:
                  case "end":
                    return _context4.stop();
                }
              }, _callee4);
            }));
          },
          done: function done() {
            return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
              return _regeneratorRuntime().wrap(function _callee5$(_context5) {
                while (1) switch (_context5.prev = _context5.next) {
                  case 0:
                    _context5.prev = 0;
                    _context5.next = 3;
                    return task.done();
                  case 3:
                    _context5.next = 5;
                    return this.instance.headObject({
                      Bucket: params.Bucket,
                      Key: params.Key
                    });
                  case 5:
                    return _context5.abrupt("return", _context5.sent);
                  case 8:
                    _context5.prev = 8;
                    _context5.t0 = _context5["catch"](0);
                    console.log(_context5.t0, '======', _context5.t0.message);
                    if (!_context5.t0) {
                      _context5.next = 13;
                      break;
                    }
                    throw new UploadError('ACCESSDENIED', 1, _context5.t0.message);
                  case 13:
                  case "end":
                    return _context5.stop();
                }
              }, _callee5, this, [[0, 8]]);
            }));
          },
          progress: function progress(cb) {
            task.on('httpUploadProgress', function (e) {
              if (cb) {
                cb(e);
              }
            });
          }
        };
      }
    }]);
    return Forever;
  }(); // new(task, err)

  exports.Forever = Forever;

}));
